// Generated by CoffeeScript 1.6.3
(function() {
  var FeedList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FeedList = (function(_super) {
    var FeedListItem;

    __extends(FeedList, _super);

    function FeedList() {
      var _this = this;
      FeedList.__super__.constructor.call(this, sybil.templates["feed-list"]);
      this.type = "";
      this.count = 10;
      this.items = [];
      this.node$.scroll(function() {
        return _this.onScroll();
      });
    }

    FeedList.prototype.goto = function(id) {
      var _this = this;
      sybil.rssList.focus(id);
      return sybil.rssList.getRssById(id, function(err, rss) {
        if (err) {
          return;
        }
        _this.clear();
        _this.UI.title$.text(rss.title);
        _this.currentRss = rss;
        _this.undrain();
        return _this.more();
      });
    };

    FeedList.prototype.clear = function() {
      this.items.length = 0;
      return this.UI.listContainer$.empty();
    };

    FeedList.prototype.ListItem = FeedListItem = (function(_super1) {
      __extends(FeedListItem, _super1);

      function FeedListItem(data) {
        FeedListItem.__super__.constructor.call(this, sybil.templates["feed-list-item"]);
        this.init(data);
      }

      FeedListItem.prototype.init = function(data) {
        this.data = data;
        this.UI.title$.text(data.title);
        this.UI.content$.html(sanitizer.sanitize(data.description || ""));
        this.UI.title$.attr("href", data.link || "#");
        this.UI.date$.text(moment(data.date).format("L"));
        this.UI.content$.find("img").each(function() {
          if (!this.getAttribute("src")) {
            return;
          }
          if (this.getAttribute("src").indexOf("http") !== 0) {
            console.log("resolve");
            this.setAttribute("src", sybil.common.resolve(data.source, this.getAttribute("src")));
            return console.log("resolved");
          }
        });
        if (!data.read) {
          return this.node$.addClass("unread");
        } else {
          return this.node$.removeClass("unread");
        }
      };

      FeedListItem.prototype.onClickNode = function() {
        return this.markAsRead();
      };

      FeedListItem.prototype.markAsRead = function() {
        if (this.data.read) {
          return;
        }
        API.read(this.data.id);
        this.node$.removeClass("unread");
        return this.emit("read");
      };

      return FeedListItem;

    })(Leaf.Widget);

    FeedList.prototype.appendFeed = function(data) {
      var rss,
        _this = this;
      rss = this.currentRss;
      return setTimeout((function() {
        var feed;
        feed = new FeedListItem(data);
        feed.appendTo(_this.UI.listContainer);
        feed.on("read", function() {
          var item;
          item = sybil.rssList.getListItemById(rss.id);
          item.data.unreadCount--;
          if (item.data.unreadCount < 0) {
            item.data.unreadCount = 0;
          }
          item.init(item.data);
          return console.log("~~!!!");
        });
        return _this.items.push(feed);
      }), 0);
    };

    FeedList.prototype.onClickMarkAllAsReadButton = function() {
      var _this = this;
      if (!confirm("sure mark all as read?")) {
        return;
      }
      if (!this.currentRss) {
        return;
      }
      return API.markAllAsRead(this.currentRss.source).success(function() {
        var item, _i, _len, _ref, _results;
        sybil.hint("done");
        _this.emit("markAllAsRead");
        item = sybil.rssList.getListItemById(_this.currentRss.id);
        item.data.unreadCount = 0;
        item.init(item.data);
        _ref = _this.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.markAsRead());
        }
        return _results;
      }).fail(function() {
        return sybil.error("fail to mark all as read");
      });
    };

    FeedList.prototype.onClickMoreButton = function() {
      var _this = this;
      if (!this.currentRss || !this.currentRss.source) {
        return;
      }
      return API.feed(this.currentRss.source, this.count, this.items.length, this.type).success(function(data) {
        var item, _i, _len, _ref, _results;
        if (data.drain) {
          _this.drain();
        }
        _ref = data.feeds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.rss = _this.currentRss;
          _results.push(_this.appendFeed(item));
        }
        return _results;
      }).fail(function(error) {
        sybil.error(error);
        return console.error(error);
      });
    };

    FeedList.prototype.onClickUnsubscribeButton = function() {
      var _this = this;
      if (!this.currentRss) {
        return;
      }
      return API.unsubscribe(this.currentRss.source).success(function(data) {
        return sybil.hint("done unsubscribe " + _this.currentRss.source);
      }).fail(function(data) {
        return sybil.error("fail to unsubscribe " + _this.currentRss.source);
      });
    };

    FeedList.prototype.onScroll = function() {};

    FeedList.prototype.more = function() {
      var id,
        _this = this;
      id = this.currentRss.id;
      if (this.isDrain) {
        return;
      }
      if (!this.currentRss) {
        return;
      }
      return API.feed(this.currentRss.source, this.count, this.items.length, this.type).success(function(data) {
        var item, _i, _len, _ref, _results;
        if (id !== _this.currentRss.id) {
          return;
        }
        if (_this.items.length === 0) {
          _this.UI.listContainer$.empty();
        }
        if (data.drain) {
          _this.drain();
        }
        _ref = data.feeds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.rss = _this.currentRss;
          _results.push(_this.appendFeed(item));
        }
        return _results;
      }).fail(function(err) {
        console.error(err);
        return console.error("fail to load feeds", this.currentRss.source);
      });
    };

    FeedList.prototype.feedInView = function(feed) {};

    FeedList.prototype.drain = function() {
      this.isDrain = true;
      console.log(this.items.length);
      if (this.items.length === 0) {
        return this.UI.listContainer$.text("no more");
      }
    };

    FeedList.prototype.undrain = function() {
      return this.isDrain = false;
    };

    return FeedList;

  })(Leaf.Widget);

  window.FeedList = FeedList;

}).call(this);
