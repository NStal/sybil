// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, MessageCenter, WebApiServer, WebSocket, express, http, ws;

  express = require("express");

  EventEmitter = (require("events")).EventEmitter;

  MessageCenter = (require("message-center")).MessageCenter;

  ws = require("ws");

  WebSocket = ws;

  http = require("http");

  WebApiServer = (function() {
    function WebApiServer(sybil) {
      this.sybil = sybil;
      this.host = "localhost";
      this.httpPort = 3006;
      this.setupHttpServer();
      this.setupWebsocketApi();
      this.messageCenter = new MessageCenter();
      this.setupApi();
      this.sybil.on("archive", this.pushArchive.bind(this));
      this.sybil.on("source", this.pushSource.bind(this));
      console.log("webApi start at ws://" + this.host + ":" + this.httpPort + "/");
    }

    WebApiServer.prototype.setupWebsocketApi = function() {
      var _this = this;
      this.websocketServer = new ws.Server({
        server: this.httpServer
      });
      return this.websocketServer.on("connection", function(connection) {
        console.log("webApi get connection");
        _this.messageCenter.setConnection(connection);
        _this.sybil.getSources(function(err, sources) {
          var source, _i, _len, _results;
          if (!sources) {
            return;
          }
          _results = [];
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            source = sources[_i];
            _results.push(_this.messageCenter.fireEvent("source", source));
          }
          return _results;
        });
        return connection.on("close", function() {
          if (_this.messageCenter.connection === connection) {
            return _this.messageCenter.unsetConnection();
          }
        });
      });
    };

    WebApiServer.prototype.setupHttpServer = function() {
      this.app = express();
      this.app.use(express["static"]("../client/static"));
      this.httpServer = http.createServer(this.app);
      return this.httpServer.listen(this.httpPort);
    };

    WebApiServer.prototype.setupApi = function() {
      var _this = this;
      this.messageCenter.registerApi("getConfig", function(name, callback) {
        return _this.sybil.getConfig(name, function(err, config) {
          return callback(err, config);
        });
      });
      this.messageCenter.registerApi("saveConfig", function(config, callback) {
        return _this.sybil.saveConfig(config, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("getCustomWorkspaces", function(_, callback) {
        return _this.sybil.getCustomWorkspaces(function(err, workspaces) {
          return callback(err, workspaces);
        });
      });
      this.messageCenter.registerApi("saveCustomWorkspace", function(query, callback) {
        return _this.sybil.saveCustomWorkspace(query.name, query.data, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("getCustomArchives", function(query, callback) {
        return _this.sybil.getCustomArchives(query.query, function(err, archives) {
          var count, index, item, offset, offsetIndex, sort, _i, _len;
          if (err) {
            console.error(err);
            err = "db error";
            callback(err);
            return;
          }
          sort = query.sort || "latest";
          if (sort === "sybil") {
            true;
          } else if (sort === "oldest") {
            true;
          } else {
            archives.sort(function(a, b) {
              return -((a.createDate && a.createDate.getTime() || 0) - (b.createDate && b.createDate.getTime() || 0));
            });
          }
          if (!query.viewRead) {
            archives = archives.filter(function(item) {
              return !item.hasRead;
            });
          }
          console.log(query, archives.length);
          offset = query.offset || null;
          count = query.count || 20;
          if (offset === null) {
            offsetIndex = 0;
          } else {
            for (index = _i = 0, _len = archives.length; _i < _len; index = ++_i) {
              item = archives[index];
              if (item.guid === offset) {
                offsetIndex = index + 1;
                break;
              }
            }
          }
          if (!offsetIndex) {
            offsetIndex = 0;
          }
          return callback(err, archives.slice(offsetIndex, offsetIndex + count));
        });
      });
      this.messageCenter.registerApi("getSource", function(guid, callback) {
        return _this.sybil.getSource(guid, function(err, source) {
          return callback(err, source);
        });
      });
      this.messageCenter.registerApi("getSources", function(_, callback) {
        return _this.sybil.getSources(function(err, sources) {
          if (err) {
            console.error(err);
            err = "db error";
          }
          return callback(err, sources);
        });
      });
      this.messageCenter.registerApi("getTagArchives", function(query, callback) {
        return _this.sybil.getTagArchives(query.name, function(err, archives) {
          var count, index, item, offset, offsetIndex, sort, _i, _len;
          if (err) {
            console.error(err);
            err = "db error";
            callback(err);
            return;
          }
          sort = query.sort || "latest";
          if (sort === "sybil") {
            true;
          } else if (sort === "oldest") {
            true;
          } else {
            archives.sort(function(a, b) {
              return -((a.createDate && a.createDate.getTime() || 0) - (b.createDate && b.createDate.getTime() || 0));
            });
          }
          if (!query.viewRead) {
            archives = archives.filter(function(item) {
              return !item.hasRead;
            });
          }
          console.log(query, archives.length);
          offset = query.offset || null;
          count = query.count || 20;
          if (offset === null) {
            offsetIndex = 0;
          } else {
            for (index = _i = 0, _len = archives.length; _i < _len; index = ++_i) {
              item = archives[index];
              if (item.guid === offset) {
                offsetIndex = index + 1;
                break;
              }
            }
          }
          if (!offsetIndex) {
            offsetIndex = 0;
          }
          return callback(err, archives.slice(offsetIndex, offsetIndex + count));
        });
      });
      this.messageCenter.registerApi("getSourceArchives", function(query, callback) {
        return _this.sybil.getSourceArchives(query.guid, function(err, archives) {
          var count, index, item, offset, offsetIndex, sort, _i, _len;
          if (err) {
            console.error(err);
            err = "db error";
          }
          sort = query.sort || "latest";
          if (sort === "sybil") {
            true;
          } else if (sort === "oldest") {
            true;
          } else {
            archives.sort(function(a, b) {
              return -((a.createDate && a.createDate.getTime() || 0) - (b.createDate && b.createDate.getTime() || 0));
            });
          }
          if (!query.viewRead) {
            archives = archives.filter(function(item) {
              return !item.hasRead;
            });
          }
          console.log(query, archives.length);
          offset = query.offset || null;
          count = query.count || 20;
          if (offset === null) {
            offsetIndex = 0;
          } else {
            for (index = _i = 0, _len = archives.length; _i < _len; index = ++_i) {
              item = archives[index];
              if (item.guid === offset) {
                offsetIndex = index + 1;
                break;
              }
            }
          }
          if (!offsetIndex) {
            offsetIndex = 0;
          }
          return callback(err, archives.slice(offsetIndex, offsetIndex + count));
        });
      });
      this.messageCenter.registerApi("addTagToSource", function(data, callback) {
        if (!data.guid || !data.name) {
          callback("invalid parameter");
          return;
        }
        return _this.sybil.addTagToSource(data.guid, data.name, function(err, item) {
          return callback(err, item);
        });
      });
      this.messageCenter.registerApi("removeTagFromSource", function(data, callback) {
        if (!data.guid || !data.name) {
          callback("invalid parameter");
          return;
        }
        return _this.sybil.removeTagFromSource(data.guid, data.name, function(err, item) {
          return callback(err, item);
        });
      });
      this.messageCenter.registerApi("likeArchive", function(guid, callback) {
        return _this.sybil.likeArchive(guid, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("unlikeArchive", function(guid, callback) {
        return _this.sybil.unlikeArchive(guid, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("markArchiveAsRead", function(guid, callback) {
        return _this.sybil.markArchiveAsRead(guid, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("markArchiveAsUnread", function(guid, callback) {
        return _this.sybil.markArchiveAsUnread(guid, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("unreadLaterArchive", function(guid, callback) {
        return _this.sybil.unreadLaterArchive(guid, function(err, archive) {
          return callback(err, archive);
        });
      });
      this.messageCenter.registerApi("readLaterArchive", function(guid, callback) {
        return _this.sybil.readLaterArchive(guid, function(err, archive) {
          return callback(err, archive);
        });
      });
      this.messageCenter.registerApi("getReadLaterArchives", function(_, callback) {
        return _this.sybil.getReadLaterArchives(function(err, archives) {
          return callback(err, archives);
        });
      });
      this.messageCenter.registerApi("getSourceHint", function(uri, callback) {
        return _this.sybil.getSourceHint(uri, function(err, available) {
          if (err) {
            console.error(err);
            err = "server error";
          }
          return callback(err, available);
        });
      });
      this.messageCenter.registerApi("unsubscribe", function(guid, callback) {
        return _this.sybil.unsubscribe(guid, function(err) {
          return callback(err);
        });
      });
      this.messageCenter.registerApi("subscribe", function(source, callback) {
        return _this.sybil.subscribe(source, function(err, available) {
          if (err) {
            console.error(err);
            err = "server error";
          }
          return callback(err, available);
        });
      });
      return console.log(this.messageCenter.apis);
    };

    WebApiServer.prototype.pushArchive = function(archive) {
      return this.messageCenter.fireEvent("archive", archive);
    };

    WebApiServer.prototype.pushSource = function(source) {
      return this.messageCenter.fireEvent("source", source);
    };

    return WebApiServer;

  })();

  exports.WebApiServer = WebApiServer;

}).call(this);
