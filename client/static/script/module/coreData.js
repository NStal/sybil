// Generated by CoffeeScript 1.8.0
(function() {
  var CoreData, Errors,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Errors = require("/common/errors");

  CoreData = (function(_super) {
    __extends(CoreData, _super);

    function CoreData(name) {
      this.name = name;
      CoreData.__super__.constructor.call(this);
      this.reset();
    }

    CoreData.prototype.reset = function() {
      return this.data = null;
    };

    CoreData.prototype.load = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (this.data) {
        callback(new Errors.Duplication("data already exists"));
        return;
      }
      return App.messageCenter.invoke("getConfig", this.name, (function(_this) {
        return function(err, data) {
          if (_this.data) {
            callback(new Errors.Duplication("data already exists"));
            return;
          }
          _this.data = data || {};
          if (!_this.isReady) {
            _this.isReady = true;
            _this.emit("ready");
          }
          return callback();
        };
      })(this));
    };

    CoreData.prototype.get = function(key) {
      this.check();
      return this.data[key];
    };

    CoreData.prototype.set = function(key, value) {
      this.check();
      this.data[key] = value;
      return this.delaySave();
    };

    CoreData.prototype.check = function() {
      if (!this.data) {
        throw new Errors.NotReady("The CoreData " + this.name + " are not init yet");
      }
    };

    CoreData.prototype.save = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return App.messageCenter.invoke("saveConfig", {
        name: this.name,
        data: this.data
      }, (function(_this) {
        return function(err) {
          return callback(err);
        };
      })(this));
    };

    CoreData.prototype.delaySave = function(time) {
      var delay;
      delay = this.delayTime || 300;
      clearTimeout(this.saveTimer);
      return this.saveTimer = setTimeout(this.save.bind(this), delay);
    };

    return CoreData;

  })(Leaf.EventEmitter);

  module.exports = CoreData;

}).call(this);
