// Generated by CoffeeScript 1.8.0
(function() {
  var App, Scene, SceneSelectItem, SceneSwitcher, async, tm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  tm = require("/common/templateManager");

  async = require("/component/async");

  Scene = require("/view/base/scene");

  tm.use("view/sceneSwitcher");

  SceneSwitcher = (function(_super) {
    __extends(SceneSwitcher, _super);

    function SceneSwitcher() {
      SceneSwitcher.__super__.constructor.call(this, App.templates.view.sceneSwitcher);
      this.currentScene = null;
      this.sceneItems = [];
      this.hideListener = this.hideListener.bind(this);
      this.hide();
    }

    SceneSwitcher.prototype.switchTo = function(name, option) {
      var has, oldName, oldScene, scene, _i, _len, _ref;
      if (option == null) {
        option = {};
      }
      has = false;
      _ref = Scene.scenes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        scene = _ref[_i];
        if (!(scene.name === name)) {
          continue;
        }
        if (this.currentScene && this.currentScene.name === name) {
          return;
        }
        oldScene = this.currentScene;
        this.currentScene = scene;
        if (oldScene != null) {
          oldScene.remove();
        }
        this.currentScene.after(this);
        if (oldScene && oldScene.onSwitchOff) {
          oldScene.onSwitchOff();
        }
        scene.show();
        this.emit("sceneChange", scene);
        this.VM.title = name;
        if (scene.onSwitchTo) {
          scene.onSwitchTo();
        }
        if (!option.noHistory && oldScene) {
          oldName = oldScene.name;
          App.history.push(this, (function(_this) {
            return function() {
              return _this.switchTo(oldName, {
                noHistory: true
              });
            };
          })(this));
        }
        return;
      }
      if (!has) {
        throw new Error("scene " + name + " not found");
      }
    };

    SceneSwitcher.prototype.onClickTitle = function(e) {
      e.stopImmediatePropagation();
      e.preventDefault();
      this.syncScenes();
      if (this.isShow) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    SceneSwitcher.prototype.hideListener = function(e) {
      e.stopImmediatePropagation();
      e.preventDefault();
      this.hide();
      return false;
    };

    SceneSwitcher.prototype.show = function() {
      window.addEventListener("click", this.hideListener);
      this.isShow = true;
      this.VM.showSelector = true;
      this.VM.caretClass = "fa-caret-down";
      if (this.showIdentifier == null) {
        this.showIdentifier = {};
      }
      return App.history.push(this.showIdentifier, (function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));
    };

    SceneSwitcher.prototype.hide = function() {
      window.removeEventListener("click", this.hideListener);
      this.isShow = false;
      this.VM.showSelector = false;
      this.VM.caretClass = "fa-caret-right";
      return App.history.remove(this.showIdentifier);
    };

    SceneSwitcher.prototype.syncScenes = function() {
      var has, myScene, scene, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      _ref = this.sceneItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        myScene = _ref[_i];
        myScene.__match = "not match";
      }
      _ref1 = Scene.scenes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        scene = _ref1[_j];
        has = false;
        _ref2 = this.sceneItems;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          myScene = _ref2[_k];
          if (scene.name === myScene.name) {
            has = true;
            myScene.__match = "match";
            break;
          }
        }
        if (!has) {
          this.addScene(scene.name);
        }
      }
      return this.sceneItems = this.sceneItems.filter(function(item) {
        return item.__match !== "not match";
      });
    };

    SceneSwitcher.prototype.addScene = function(name) {
      var sceneItem;
      sceneItem = new SceneSelectItem(name);
      this.sceneItems.push(sceneItem);
      sceneItem.appendTo(this.UI.sceneSelector);
      return sceneItem.on("select", (function(_this) {
        return function() {
          _this.switchTo(sceneItem.name);
          return _this.hide();
        };
      })(this));
    };

    return SceneSwitcher;

  })(Leaf.Widget);

  SceneSelectItem = (function(_super) {
    __extends(SceneSelectItem, _super);

    function SceneSelectItem(name) {
      this.name = name;
      SceneSelectItem.__super__.constructor.call(this, document.createElement("li"));
      this.node$.text(this.name);
    }

    SceneSelectItem.prototype.onClickNode = function(e) {
      e.stopImmediatePropagation();
      e.preventDefault();
      return this.emit("select");
    };

    return SceneSelectItem;

  })(Leaf.Widget);

  module.exports = SceneSwitcher;

}).call(this);
