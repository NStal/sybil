// Generated by CoffeeScript 1.8.0
(function() {
  var App, ArchiveDisplayer, ArchiveList, ArchiveListController, ArchiveListItem, BufferedEndlessArchiveLoader, CubeLoadingHint, EndlessListRenderer, Flag, Model, ScrollChecker, SourceUpdateChecker, SwipeChecker, async, tm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  App = require("/app");

  Model = App.Model;

  ScrollChecker = require("/component/scrollChecker");

  SwipeChecker = require("/component/swipeChecker");

  async = require("/component/async");

  BufferedEndlessArchiveLoader = require("/procedure/bufferedEndlessArchiveLoader");

  CubeLoadingHint = require("/widget/cubeLoadingHint");

  ArchiveDisplayer = require("/view/base/archiveDisplayer");

  EndlessListRenderer = require("/component/endlessListRenderer");

  Flag = require("/component/flag");

  tm = require("/common/templateManager");

  tm.use("view/sourceScene/archiveList");

  ArchiveList = (function(_super) {
    __extends(ArchiveList, _super);

    function ArchiveList(template) {
      this.applyPreviewMode = __bind(this.applyPreviewMode, this);
      this.include(CubeLoadingHint);
      ArchiveList.__super__.constructor.call(this, template || App.templates.view.sourceScene.archiveList);
      this.sort = "latest";
      this.viewRead = false;
      this.loadCount = 10;
      this.scrollChecker = new ScrollChecker(this.UI.containerWrapper);
      this.archiveListController = new ArchiveListController(this);
      this.sourceUpdateChecker = new SourceUpdateChecker(this);
      this.initSubWidgets();
      App.userConfig.on("change/previewMode", this.applyPreviewMode.bind(this));
      App.userConfig.init("useResourceProxyByDefault", false);
      App.userConfig.init("enableResourceProxy", true);
    }

    ArchiveList.prototype.applyPreviewMode = function() {
      var globalPreviewMode, infoPreviewMode;
      if (!this.archiveInfo) {
        return;
      }
      globalPreviewMode = App.userConfig.get("previewMode", false);
      infoPreviewMode = App.userConfig.get("previewModeFor" + this.archiveInfo.name, globalPreviewMode);
      this.disableMarkAsRead = true;
      if ((this.previewMode != null) && this.previewMode === infoPreviewMode) {
        this.disableMarkAsRead = false;
        return;
      }
      this.previewMode = infoPreviewMode;
      if (infoPreviewMode) {
        this.node$.addClass("preview-mode");
        this.emit("previewMode", true);
      } else {
        this.node$.removeClass("preview-mode");
        this.emit("previewMode", false);
      }
      return this.disableMarkAsRead = false;
    };

    ArchiveList.prototype.load = function(info) {
      this.archiveInfo = info;
      this.UI.emptyHint$.hide();
      this.UI.loadingHint.hide();
      this.archiveListController.load(info);
      this.render();
      return this.emit("load");
    };

    ArchiveList.prototype.render = function() {
      this.UI.title$.show();
      this.UI.sourceName$.text(this.archiveInfo.name);
      this.applyPreviewMode();
      if (this.viewRead) {
        return this.UI.toggleViewAll$.text("view unread");
      } else {
        return this.UI.toggleViewAll$.text("view all");
      }
    };

    ArchiveList.prototype.onClickMarkAllAsRead = function() {
      return async.eachLimit(this.archiveInfo.sourceGuids, 3, ((function(_this) {
        return function(guid, done) {
          var source;
          source = Model.Source.sources.get(guid);
          if (!source) {
            console.error(source, guid);
            done();
            return;
          }
          return source.markAllAsRead(function(err) {
            if (err) {
              console.error(err);
              done();
              return;
            }
            source.unreadCount = 0;
            return done();
          });
        };
      })(this)), (function(_this) {
        return function(err) {
          console.log("complete mark all as read");
          return _this.load(_this.archiveInfo);
        };
      })(this));
    };

    ArchiveList.prototype.onClickToggleViewAll = function() {
      if (this.viewRead) {
        this.viewRead = false;
        this.load(this.archiveInfo);
      } else {
        this.viewRead = true;
        this.load(this.archiveInfo);
      }
      return this.render();
    };

    ArchiveList.prototype.onClickPreviewMode = function() {
      var previewMode;
      if (!this.archiveInfo) {
        return;
      }
      previewMode = App.userConfig.get("previewModeFor" + this.archiveInfo.name, false);
      App.userConfig.set("previewModeFor" + this.archiveInfo.name, !previewMode);
      return this.applyPreviewMode();
    };

    return ArchiveList;

  })(Leaf.Widget);

  tm.use("view/sourceScene/archiveListItem");

  ArchiveListItem = (function(_super) {
    __extends(ArchiveListItem, _super);

    function ArchiveListItem(archive) {
      ArchiveListItem.__super__.constructor.call(this, App.templates.view.sourceScene.archiveListItem);
      this.setArchive(archive);
      this.isShown = true;
      if (!App.isMobile) {
        this.node$.addClass("rich");
      }
    }

    ArchiveListItem.prototype.onClickContent = function() {
      if (this.lockRead) {
        return;
      }
      this.markAsRead();
      return true;
    };

    ArchiveListItem.prototype.onClickTitle = function(e) {
      window.open(this.archive.originalLink);
      e.stopPropagation();
      e.preventDefault();
      e.stopImmediatePropagation();
      return false;
    };

    ArchiveListItem.prototype.onClickHeader = function(e) {
      this.node$.toggleClass("collapse");
      this.markAsRead();
      return this.node$.css({
        height: "auto"
      });
    };

    ArchiveListItem.prototype.markAsRead = function() {
      if (this.lockRead) {
        return;
      }
      if (this.isMarking) {
        return;
      }
      if (this.archive.hasRead) {
        return;
      }
      this.isMarking = true;
      return this.archive.markAsRead((function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
            return;
          }
          return _this.isMarking = false;
        };
      })(this));
    };

    ArchiveListItem.prototype.onClickKeepUnread = function(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      return this.onClickMarkAsUnread();
    };

    ArchiveListItem.prototype.render = function() {
      ArchiveListItem.__super__.render.call(this);
      if (this.lockRead) {
        this.node$.addClass("lock-read");
      } else {
        this.node$.removeClass("lock-read");
      }
      if (this.archive.hasRead) {
        return this.node$.addClass("read");
      } else {
        return this.node$.removeClass("read");
      }
    };

    ArchiveListItem.prototype.onClickMarkAsUnread = function() {
      this.lockRead = true;
      this.archive.lockRead = true;
      this.emit("change");
      if (this.archive.hasRead === false) {
        this.render();
        return;
      }
      return this.archive.markAsUnread((function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
            return;
          }
          return _this.render();
        };
      })(this));
    };

    ArchiveListItem.prototype.destroy = function() {
      ArchiveListItem.__super__.destroy.call(this);
      return this.unsetArchive();
    };

    return ArchiveListItem;

  })(ArchiveDisplayer);

  tm.use("view/sourceScene/archiveListController");

  ArchiveListController = (function(_super) {
    __extends(ArchiveListController, _super);

    function ArchiveListController(context) {
      this.context = context;
      ArchiveListController.__super__.constructor.call(this, App.templates.view.sourceScene.archiveListController);
      this.scrollable = this.context.UI.containerWrapper;
      this.renderer = new EndlessListRenderer(this.scrollable, (function(_this) {
        return function(archive) {
          return new ArchiveListItem(archive);
        };
      })(this));
      this.archiveBuffer = new BufferedEndlessArchiveLoader();
      this.swipeChecker = new SwipeChecker(this.node);
      this.swipeChecker.on("swipeleft", (function(_this) {
        return function(e) {
          return _this.node$.addClass("left-mode");
        };
      })(this));
      this.swipeChecker.on("swiperight", (function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return _this.node$.removeClass("left-mode");
        };
      })(this));
      this.renderer.listenBy(this, "reflow", (function(_this) {
        return function(start, end) {
          return _this.updateFocusItem();
        };
      })(this));
      this.renderer.listenBy(this, "resize", (function(_this) {
        return function(start, end) {
          return _this.updateFocusItem();
        };
      })(this));
      this.context.disableMarkAsRead = true;
      this.renderer.listenBy(this, "viewPortChange", (function(_this) {
        return function() {
          var archive, current, index, _i, _len, _ref;
          _this.updateFocusItem();
          if (!_this.context.disableMarkAsRead) {
            if (!_this.currentFocus) {
              return;
            }
            current = _this.renderer.indexOf(_this.currentFocus);
            _ref = _this.renderer.datas;
            for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
              archive = _ref[index];
              if (index > current) {
                return;
              }
              if (archive.hasRead) {
                continue;
              }
              if (archive.lockRead) {
                continue;
              }
              archive.markAsRead(function() {});
            }
          }
        };
      })(this));
      this.renderer.listenBy(this, "requireMore", (function(_this) {
        return function() {
          return _this.loadMore();
        };
      })(this));
      this.archiveBuffer.on("startLoading", (function(_this) {
        return function() {
          if (!_this.archiveBuffer.isDrain()) {
            _this.renderer.setHint(_this.context.UI.hint);
            _this.context.UI.loadingHint$.show();
            return _this.context.UI.emptyHint$.hide();
          }
        };
      })(this));
      this.archiveBuffer.on("endLoading", (function(_this) {
        return function() {
          _this.context.UI.loadingHint$.hide();
          if (_this.archiveBuffer.isDrain()) {
            return _this.context.UI.emptyHint$.show();
          }
        };
      })(this));
    }

    ArchiveListController.prototype.updateFocusItem = function() {
      var height, pack;
      height = this.getFocusHeight();
      pack = this.renderer.getPackByHeight(height);
      if (!(pack != null ? pack.isRealized : void 0)) {
        return;
      }
      if (this.currentFocus === pack.widget) {
        return;
      }
      if (this.currentFocus) {
        this.currentFocus.blur();
        this.currentFocus.stopListenBy(this);
      }
      this.currentFocus = pack.widget;
      this.currentFocus.listenBy(this, "change", (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.currentFocus.focus();
      this.renderer.trace(pack);
      return this.render();
    };

    ArchiveListController.prototype.load = function(info) {
      this.renderer.reset();
      this.isLoading = false;
      this.archiveInfo = info;
      this.archiveBuffer.reset();
      this.context.UI.emptyHint$.hide();
      this.archiveBuffer.init({
        query: {
          sourceGuids: this.archiveInfo.sourceGuids
        },
        sort: this.context.sort,
        viewRead: this.context.viewRead
      });
      return this.loadMore();
    };

    ArchiveListController.prototype.loadMore = function() {
      if (this.isLoading) {
        return;
      }
      if (this.archiveBuffer.isDrain()) {
        this.context.UI.emptyHint$.show();
        return;
      }
      this.isLoading = true;
      return this.archiveBuffer.more(5, (function(_this) {
        return function(err, archives) {
          var item, _i, _len, _results;
          _this.isLoading = false;
          if (err) {
            _this.context.UI.loadingHint$.hide();
            console.error(err);
            return;
          }
          if (!archives || archives.length === 0) {
            console.debug("NO MORE");
            _this.context.UI.emptyHint$.show();
            _this.context.UI.loadingHint$.hide();
            return;
          }
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            item = archives[_i];
            _results.push(_this.renderer.add(item));
          }
          return _results;
        };
      })(this));
    };

    ArchiveListController.prototype.getFocusHeight = function() {
      var bottom, fix, fixMax, height, top, _ref;
      _ref = this.renderer.getViewPort(), top = _ref.top, height = _ref.height, bottom = _ref.bottom;
      fix = top * 0.7;
      fixMax = height / 3;
      return top + Math.min(fixMax, fix);
    };

    ArchiveListController.prototype.getFocusHeightFix = function() {
      var bottom, fix, fixMax, height, top, _ref;
      _ref = this.renderer.getViewPort(), top = _ref.top, height = _ref.height, bottom = _ref.bottom;
      fix = top * 0.7;
      fixMax = height / 3;
      return Math.min(fixMax, fix);
    };

    ArchiveListController.prototype.getScrollTop = function() {
      return this.context.UI.containerWrapper.scrollTop;
    };

    ArchiveListController.prototype.scrollItemToFocus = function(item) {
      var fix, index, pack, padding, scrollTop, vp;
      if (typeof item === "number") {
        index = item;
      } else {
        index = this.renderer.indexOf(item);
      }
      pack = this.renderer.packs[index];
      if (!pack || !pack.size) {
        return;
      }
      padding = 0;
      scrollTop = pack.top;
      vp = this.renderer.getViewPort();
      if (vp.height / 2 > pack.size.height) {
        fix = this.getFocusHeightFix();
        scrollTop -= fix - padding - pack.size.height / 2;
      }
      this.renderer.scrollable.scrollTop = scrollTop;
      return this.renderer.saveTrace();
    };

    ArchiveListController.prototype.scrollItemBottomToFocus = function(item) {
      var index, pack, scrollTop, scrollTopEx, vp;
      if (typeof item === "number") {
        index = item;
      } else {
        index = this.renderer.indexOf(item);
      }
      pack = this.renderer.packs[index];
      if (!pack || !pack.size) {
        return;
      }
      scrollTop = pack.top;
      vp = this.renderer.getViewPort();
      if (vp.height > pack.size.height) {
        this.scrollItemToFocus(item);
        return;
      }
      if (!pack.size) {
        console.debug(item, "??");
      }
      scrollTopEx = pack.size.height - vp.height;
      scrollTop += scrollTopEx;
      this.renderer.scrollable.scrollTop = scrollTop;
      return this.renderer.saveTrace();
    };

    ArchiveListController.prototype.onClickExpandOption = function() {
      if (this.showOptionFlag == null) {
        this.showOptionFlag = new Flag().attach(this.VM, "showOption").unset();
      }
      return this.showOptionFlag.toggle();
    };

    ArchiveListController.prototype.render = function() {
      var archive;
      if (!this.currentFocus) {
        return;
      }
      archive = this.currentFocus.archive;
      this.Data.keepUnread = this.currentFocus.lockRead;
      this.Data.liked = archive.like;
      return this.Data.shared = archive.share;
    };

    ArchiveListController.prototype.onClickPrevious = function() {
      var index;
      if (!this.currentFocus) {
        return;
      }
      index = this.renderer.indexOf(this.currentFocus);
      if (index <= 0) {
        index = 1;
      }
      return this.scrollItemToFocus(index - 1);
    };

    ArchiveListController.prototype.onClickNext = function() {
      var index;
      if (!this.currentFocus) {
        return;
      }
      index = this.renderer.indexOf(this.currentFocus);
      return this.scrollItemToFocus(index + 1);
    };

    ArchiveListController.prototype.onClickGoBottom = function() {
      var index;
      if (!this.currentFocus) {
        return;
      }
      index = this.renderer.indexOf(this.currentFocus);
      return this.scrollItemBottomToFocus(index);
    };

    ArchiveListController.prototype.onClickLike = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickLike();
      }
    };

    ArchiveListController.prototype.onClickShare = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickShare();
      }
    };

    ArchiveListController.prototype.onClickKeepUnread = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickKeepUnread();
      }
    };

    return ArchiveListController;

  })(Leaf.Widget);

  SourceUpdateChecker = (function(_super) {
    __extends(SourceUpdateChecker, _super);

    function SourceUpdateChecker(context) {
      this.context = context;
      SourceUpdateChecker.__super__.constructor.call(this, this.context.UI.refreshHint);
      this.init();
    }

    SourceUpdateChecker.prototype.onClickNode = function() {
      return this.context.load(this.context.archiveInfo);
    };

    SourceUpdateChecker.prototype.onClickHideRefreshHint = function(e) {
      if (e) {
        e.capture();
      }
      return this.hideUpdateHint();
    };

    SourceUpdateChecker.prototype.init = function() {
      this.context.on("load", (function(_this) {
        return function() {
          return _this.hideUpdateHint();
        };
      })(this));
      return App.modelSyncManager.on("archive", (function(_this) {
        return function(archive) {
          var _ref;
          if (_this.context.archiveInfo && (_ref = archive.sourceGuid, __indexOf.call(_this.context.archiveInfo.sourceGuids, _ref) >= 0)) {
            return _this.showUpdateHint();
          }
        };
      })(this));
    };

    SourceUpdateChecker.prototype.showUpdateHint = function() {
      if (this.refreshHintShowInterval == null) {
        this.refreshHintShowInterval = 1000 * 15;
      }
      this.context.UI.refreshHint$.addClass("show");
      if (this._updateHintTimer) {
        this._updateHintTimer = null;
        clearTimeout(this._updateHintTimer);
      }
      return this._updateHintTimer = setTimeout(this.hideUpdateHint.bind(this), this.refreshHintShowInterval);
    };

    SourceUpdateChecker.prototype.hideUpdateHint = function() {
      clearTimeout(this._updateHintTimer);
      this._updateHintTimer = null;
      return this.UI.refreshHint$.removeClass("show");
    };

    return SourceUpdateChecker;

  })(Leaf.Widget);

  module.exports = ArchiveList;

}).call(this);
