// Generated by CoffeeScript 1.8.0
(function() {
  var App, ArchiveList, SourceDetail, SourceList, SourceScene, SwipeChecker, tm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  SwipeChecker = require("/component/swipeChecker");

  SourceList = require("./sourceList");

  ArchiveList = require("./archiveList");

  SourceDetail = require("./sourceDetail");

  tm = require("/common/templateManager");

  tm.use("view/sourceScene/scene");

  SourceScene = (function(_super) {
    __extends(SourceScene, _super);

    function SourceScene() {
      var checker;
      this.sourceList = new SourceList();
      this.archiveList = new ArchiveList();
      this.sourceList.on("select", (function(_this) {
        return function(info) {
          _this.archiveList.load(info);
          return _this.node$.removeClass("show-list");
        };
      })(this));
      this.sourceDetail = new SourceDetail();
      SourceScene.__super__.constructor.call(this, App.templates.view.sourceScene.scene, "source scene");
      this.showList();
      checker = new SwipeChecker(this.node);
      checker.swipeFloor = $(window).width() / 4;
      checker.on("swiperight", (function(_this) {
        return function(ev) {
          return _this.showList();
        };
      })(this));
      checker.on("swipeleft", (function(_this) {
        return function(ev) {
          return _this.hideList();
        };
      })(this));
      this.UI.sourceListOverlay$.click((function(_this) {
        return function() {
          return _this.hideList();
        };
      })(this));
      this.km = new Leaf.KeyEventManager(window);
      this.km.on("keydown", (function(_this) {
        return function(e) {
          var use;
          use = true;
          if (e.which === Leaf.Key.p && e.altKey) {
            _this.archiveList.archiveListController.onClickPrevious();
          } else if (e.which === Leaf.Key.n && e.altKey) {
            _this.archiveList.archiveListController.onClickNext();
          } else if (e.which === Leaf.Key.b && e.altKey) {
            _this.archiveList.archiveListController.onClickGoBottom();
          } else {
            use = false;
          }
          if (use) {
            return e.capture();
          }
        };
      })(this));
    }

    SourceScene.prototype.showList = function() {
      if (this.showListIdentifier == null) {
        this.showListIdentifier = {};
      }
      this.node$.addClass("show-list");
      return App.history.push(this.showListI, (function(_this) {
        return function() {
          return _this.hideList();
        };
      })(this));
    };

    SourceScene.prototype.hideList = function() {
      this.node$.removeClass("show-list");
      return App.history.remove(this.showListIdentifier);
    };

    SourceScene.prototype.onSwitchTo = function() {
      this.km.active();
      this.isActive = true;
      return this.sourceList.reflow();
    };

    SourceScene.prototype.onSwitchOff = function() {
      this.km.deactive();
      return this.isActive = false;
    };

    return SourceScene;

  })(require("/view/base/scene"));

  module.exports = SourceScene;

}).call(this);
