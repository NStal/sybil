// Generated by CoffeeScript 1.8.0
(function() {
  var App, ArchiveDisplayer, CubeLoadingHint, EndlessSearchArchiveLoader, Model, Scene, SearchList, SearchListItem, SearchScene, SwipeChecker, async, tm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  Model = App.Model;

  Scene = require("/scene");

  ArchiveDisplayer = require("/view/base/archiveDisplayer");

  SwipeChecker = require("/component/swipeChecker");

  EndlessSearchArchiveLoader = require("/procedure/endlessSearchArchiveLoader");

  async = require("/component/async");

  CubeLoadingHint = require("/widget/cubeLoadingHint");

  tm = require("/common/templateManager");

  tm.use("view/searchScene/scene");

  SearchScene = (function(_super) {
    __extends(SearchScene, _super);

    function SearchScene() {
      var checker;
      this.searchList = new SearchList();
      this.archiveDisplayer = new ArchiveDisplayer(App.templates.baseView.archiveDisplayer);
      this.archiveDisplayer.node$.hide();
      this.searchList.on("select", (function(_this) {
        return function(archive) {
          _this.archiveDisplayer.setArchive(archive);
          _this.archiveDisplayer.node.scrollTop = 0;
          _this.archiveDisplayer.node$.show();
          return _this.node$.addClass("show-displayer");
        };
      })(this));
      SearchScene.__super__.constructor.call(this, App.templates.view.searchScene.scene, "search scene");
      checker = new SwipeChecker(this.node);
      checker.on("swiperight", (function(_this) {
        return function(ev) {
          return _this.node$.removeClass("show-displayer");
        };
      })(this));
      checker.on("swipeleft", (function(_this) {
        return function(ev) {
          return _this.node$.addClass("show-displayer");
        };
      })(this));
    }

    SearchScene.prototype.show = function() {
      SearchScene.__super__.show.call(this);
      return this.node$.removeClass("show-displayer");
    };

    return SearchScene;

  })(Scene);

  tm.use("view/searchScene/searchList");

  SearchList = (function(_super) {
    __extends(SearchList, _super);

    function SearchList() {
      this.include(CubeLoadingHint);
      SearchList.__super__.constructor.call(this, App.templates.view.searchScene.searchList);
      this.resultList = Leaf.Widget.makeList(this.UI.resultList);
      this.UI.searchKeywordInput$.keydown((function(_this) {
        return function(e) {
          if (e.which === Leaf.Key.enter) {
            _this.onClickSearchButton();
            return false;
          }
        };
      })(this));
      this._searchId = 0;
      this._pushInterval = 4;
      this.appendQueue = async.queue(((function(_this) {
        return function(archive, done) {
          var listItem;
          listItem = new SearchListItem(archive);
          listItem.onClickNode = function() {
            return _this.emit("select", listItem.archive);
          };
          listItem.onMouseoverNode = function() {
            return _this.emit("select", listItem.archive);
          };
          _this.resultList.push(listItem);
          return setTimeout(done, _this._pushInterval);
        };
      })(this)), 1);
      this.node.onscroll = (function(_this) {
        return function() {
          return _this.onScroll();
        };
      })(this);
      this.scrollTarget = this.node;
      this.viewRead = true;
      this.loadCount = 20;
    }

    SearchList.prototype.onScroll = function() {
      if (this.scrollTarget.scrollHeight - this.scrollTarget.scrollTop - this.scrollTarget.clientHeight < this.scrollTarget.clientHeight / 2) {
        return this.more();
      }
    };

    SearchList.prototype.applySearch = function(query) {
      this.query = query;
      this.offset = 0;
      this.resultList.length = 0;
      if (this.searcher) {
        this.searcher.stopListenBy(this);
      }
      this.searcher = new EndlessSearchArchiveLoader();
      this.searcher.reset({
        query: query,
        viewRead: this.viewRead,
        count: this.loadCount
      });
      this.searcher.listenBy(this, "archive", this.appendArchive);
      this.searcher.listenBy(this, "noMore", this.onNoMore);
      return this.more();
    };

    SearchList.prototype.more = function() {
      if (!this.query) {
        return;
      }
      if (!this.searcher) {
        return;
      }
      if (this.searcher.noMore) {
        return;
      }
      if (this.searcher.isLoading) {
        return;
      }
      this.UI.loadingHint.show();
      return this.searcher.more((function(_this) {
        return function(err, archives) {
          _this.UI.loadingHint.hide();
          if (err) {
            App.showError(err);
          }
        };
      })(this));
    };

    SearchList.prototype.appendArchive = function(archive) {
      this.UI.noMoreHint$.hide();
      return this.appendQueue.push(archive);
    };

    SearchList.prototype.onNoMore = function() {
      return this.UI.noMoreHint$.show();
    };

    SearchList.prototype.onClickSearchButton = function() {
      var query;
      query = this.UI.searchKeywordInput.value.trim();
      return this.applySearch(query);
    };

    return SearchList;

  })(Leaf.Widget);

  tm.use("view/searchScene/searchListItem");

  SearchListItem = (function(_super) {
    __extends(SearchListItem, _super);

    function SearchListItem(archive) {
      this.archive = archive;
      SearchListItem.__super__.constructor.call(this, App.templates.view.searchScene.searchListItem);
      this.archive.listenBy(this, "change", this.render);
      this.render();
    }

    SearchListItem.prototype.render = function() {
      var day, hour, minute, month, now, text, tilNow, time, year;
      this.UI.title$.text(this.archive.title);
      this.UI.preview$.text(this._htmlToPreview(this.archive.content));
      if (!this.archive.createDate) {
        time = (new Date(0)).getTime();
      } else {
        time = this.archive.createDate.getTime();
      }
      now = Date.now();
      tilNow = now - time;
      minute = 1000 * 60;
      hour = minute * 60;
      day = hour * 24;
      month = day * 30;
      year = day * 365;
      text = "";
      if (tilNow < minute) {
        text = "seconds ago";
      } else if (tilNow < hour) {
        text = "minutes ago";
      } else if (tilNow < day) {
        text = "hours ago";
      } else if (tilNow < month) {
        text = "days ago";
      } else if (tilNow < month * 2) {
        text = "weeks ago";
      } else if (tilNow < year) {
        text = "months ago";
      } else {
        text = "years ago";
      }
      this.UI.time$.text(text);
      if (!this.archive.like) {
        return this.UI.like$.hide();
      } else {
        return this.UI.like$.show();
      }
    };

    SearchListItem.prototype._htmlToPreview = function(html, count) {
      this._tempDiv = this._tempDiv || document.createElement("div");
      this._tempDiv.innerHTML = html;
      return $(this._tempDiv).text().substring(0, count || 200) + "...";
    };

    return SearchListItem;

  })(Leaf.Widget);

  module.exports = SearchScene;

}).call(this);
