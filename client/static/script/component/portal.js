// Generated by CoffeeScript 1.8.0
(function() {
  var Adapter, EventEmitter, ExampleAdapter, ObservePortal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof EventEmitter === "undefined") {
    EventEmitter = (typeof Leaf !== "undefined" && Leaf !== null ? Leaf.EventEmitter : void 0) || require("eventex").EventEmitter;
  }

  ObservePortal = (function(_super) {
    __extends(ObservePortal, _super);

    function ObservePortal(adapter) {
      this.adapter = adapter;
      ObservePortal.__super__.constructor.call(this);
      this.shadow = {};
      this.watches = {};
      this.adapter.listenBy(this, "change", this.handleChange.bind(this));
      this.adapter.listenBy(this, "init", this.handleInit.bind(this));
      this.adapter.listenBy(this, "delete", this.handleDelete.bind(this));
      this.adapter.listenBy(this, "gap", this.handleGap.bind(this));
    }

    ObservePortal.prototype.handleChange = function(info) {
      this.setShadowProperty(info.path, info);
      this.emit("change", info);
      return this.emit("change/" + info.path, info);
    };

    ObservePortal.prototype.handleInit = function(info) {
      this.setShadowProperty(info.path, info);
      this.emit("init", info);
      return this.emit("init/" + info.path, info);
    };

    ObservePortal.prototype.handleDelete = function(path) {
      var prop;
      prop = (this.getProperty(path)) || null;
      prop.data = null;
      prop.deleted = true;
      this.emit("delete", path);
      return this.emit("delete/" + path);
    };

    ObservePortal.prototype.observeGroupBy = function(who, group, callback) {
      var initialObserve, _base;
      if ((_base = this.shadow)[group] == null) {
        _base[group] = {
          _watchers: []
        };
      }
      if (this.shadow[group]._watchers.length === 0) {
        initialObserve = true;
      }
      if (__indexOf.call(this.shadow[group]._watchers, who) < 0) {
        this.shadow[group]._watchers.push(who);
      }
      if (initialObserve) {
        this._observe(group, callback);
        return;
      }
      return callback(null, this.get(group));
    };

    ObservePortal.prototype.observePropertyBy = function(who, group, name, callback) {
      var _base, _base1;
      if ((_base = this.shadow)[group] == null) {
        _base[group] = {
          _watchers: []
        };
      }
      if ((_base1 = this.shadow[group])[name] == null) {
        _base1[name] = {
          _watchers: []
        };
      }
      if (__indexOf.call(this.shadow[group][name]._watchers, who) < 0) {
        this.shadow[group][name]._watchers.push(who);
      }
      if (!this.shadow[group][name].property) {
        this._observe("" + group + "." + name, callback);
        return;
      }
      return callback(null, this.shadow[group][name].property.data);
    };

    ObservePortal.prototype.stopObserveGroupBy = function(who, groupName) {
      var blacklist, group, prop, retain, _ref, _ref1;
      group = this.shadow[groupName];
      if (!group) {
        return;
      }
      if (__indexOf.call(group._watchers, who) < 0) {
        return;
      }
      group._watchers = group._watchers.filter(function(item) {
        return item !== who;
      });
      blacklist = ["_watchers"];
      if (group._watchers.length === 0) {
        retain = false;
        for (prop in group) {
          if (__indexOf.call(blacklist, prop) >= 0) {
            continue;
          }
          if (!(((_ref = group[prop]) != null ? (_ref1 = _ref._watchers) != null ? _ref1.length : void 0 : void 0) > 0)) {
            delete group[prop];
          } else {
            retain = true;
          }
        }
        if (!retain) {
          delete this.shadow[groupName];
        }
      }
      this._stopObserve(groupName);
    };

    ObservePortal.prototype.stopObservePropertyBy = function(who, groupName, name) {
      var blacklist, group, prop, property, retain;
      group = this.shadow[groupName];
      if (!group) {
        return;
      }
      property = group[name];
      if (!property) {
        return;
      }
      if (__indexOf.call(property._watchers, who) < 0) {
        return;
      }
      property._watchers = property._watchers.filter(function(item) {
        return item !== who;
      });
      if (property._watchers.length === 0) {
        delete group[name];
      }
      blacklist = ["_watchers"];
      if (group._watchers.length === 0) {
        retain = false;
        for (prop in group) {
          if (__indexOf.call(blacklist, prop) >= 0) {
            continue;
          }
          retain = true;
        }
        if (!retain) {
          delete this.shadow[groupName];
        }
      }
      this._stopObserve("" + groupName + "." + name);
    };

    ObservePortal.prototype.observeBy = function(who, path, callback) {
      var group, name, _ref;
      path = this.normalize(path);
      _ref = path.split("."), group = _ref[0], name = _ref[1];
      if (!group) {
        callback();
        return;
      }
      if (name) {
        return this.observePropertyBy(who, group, name, callback);
      } else {
        return this.observeGroupBy(who, group, callback);
      }
    };

    ObservePortal.prototype.stopObserveBy = function(who, path) {
      var group, name, _ref;
      path = this.normalize(path);
      _ref = path.split("."), group = _ref[0], name = _ref[1];
      if (!group) {
        return;
      }
      if (name) {
        return this.stopObservePropertyBy(who, group, name);
      } else {
        return this.stopObserveGroupBy(who, group);
      }
    };

    ObservePortal.prototype.isObserving = function(path) {
      var group, name, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      _ref = this.normalize(path).split("."), group = _ref[0], name = _ref[1];
      if (!group) {
        return false;
      }
      if (!name) {
        return ((_ref1 = this.shadow[group]) != null ? (_ref2 = _ref1._watchers) != null ? _ref2.length : void 0 : void 0) > 0;
      }
      return ((_ref3 = this.shadow[group][name]) != null ? (_ref4 = _ref3._watchers) != null ? _ref4.length : void 0 : void 0) > 0 || ((_ref5 = this.shadow[group]) != null ? (_ref6 = _ref5._watchers) != null ? _ref6.length : void 0 : void 0);
    };

    ObservePortal.prototype.handleGap = function(results) {
      var changed, item, result, _i, _j, _len, _len1, _results;
      if (results && !(results instanceof Array)) {
        results = [results];
      } else if (!results) {
        results = [];
      }
      changed = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (this.setShadowProperty(result.path, result)) {
          changed.push(result);
        }
      }
      _results = [];
      for (_j = 0, _len1 = changed.length; _j < _len1; _j++) {
        item = changed[_j];
        this.emit("change", item);
        _results.push(this.emit("change/" + item.path, item));
      }
      return _results;
    };

    ObservePortal.prototype._observe = function(path, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.adapter.observe(path, (function(_this) {
        return function(err, results) {
          var name, result, target, _i, _j, _len, _len1, _ref;
          if (results && !(results instanceof Array)) {
            results = [results];
          } else if (!results) {
            results = [];
          }
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            _this.setShadowProperty(result.path, result);
          }
          if (path.split(".").length > 1) {
            target = (_ref = results[0]) != null ? _ref.data : void 0;
          } else {
            target = {};
            for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
              result = results[_j];
              name = result.path.split(".")[1];
              target[name] = result.data;
            }
          }
          return callback(err, target);
        };
      })(this));
    };

    ObservePortal.prototype._stopObserve = function(path, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.adapter.stopObserve(path, callback);
    };

    ObservePortal.prototype.normalize = function(path) {
      var group, name;
      path = path.split(".");
      group = path.shift();
      if (!group) {
        return;
      }
      name = path.shift();
      if (!name || name === "*") {
        name = "";
      }
      path = "" + group + "." + name;
      return path;
    };

    ObservePortal.prototype.get = function(path) {
      var group, name, prop, property, _ref;
      _ref = this.normalize(path).split("."), group = _ref[0], name = _ref[1];
      if (!group) {
        return null;
      }
      property = this.getProperty(path);
      if (name) {
        return (property != null ? property.data : void 0) || null;
      }
      for (prop in property) {
        property[prop] = property[prop].data;
      }
      return property;
    };

    ObservePortal.prototype.getProperty = function(path) {
      var group, groupName, name, prop, result, _ref, _ref1, _ref2;
      _ref = this.normalize(path).split("."), groupName = _ref[0], name = _ref[1];
      if (!groupName) {
        return null;
      }
      if (!name) {
        group = this.shadow[groupName];
        if (!group) {
          return {};
        }
        result = {};
        for (prop in group) {
          if (prop === "_watchers") {
            continue;
          }
          result[prop] = group[prop].property;
        }
        return result;
      }
      return ((_ref1 = this.shadow[groupName]) != null ? (_ref2 = _ref1[name]) != null ? _ref2.property : void 0 : void 0) || null;
    };

    ObservePortal.prototype.setShadowProperty = function(path, property) {
      var group, name, old, _base, _base1, _ref;
      _ref = path.split("."), group = _ref[0], name = _ref[1];
      if (!group || !name) {
        return;
      }
      if ((_base = this.shadow)[group] == null) {
        _base[group] = {
          _watchers: []
        };
      }
      if ((_base1 = this.shadow[group])[name] == null) {
        _base1[name] = {
          _watchers: []
        };
      }
      old = this.shadow[group][name].property;
      this.shadow[group][name].property = property;
      if (old.version !== property.version) {
        return true;
      }
      return false;
    };

    return ObservePortal;

  })(EventEmitter);

  Adapter = (function(_super) {
    __extends(Adapter, _super);

    function Adapter() {
      Adapter.__super__.constructor.call(this);
    }

    Adapter.prototype.observe = function(path, callback) {};

    Adapter.prototype.stopObserve = function(path, callback) {};

    return Adapter;

  })(EventEmitter);

  ExampleAdapter = (function(_super) {
    __extends(ExampleAdapter, _super);

    function ExampleAdapter(observeWindow) {
      var bubble;
      this.observeWindow = observeWindow;
      ExampleAdapter.__super__.constructor.call(this);
      bubble = (function(_this) {
        return function(event) {
          return _this.observeWindow.on(event, function(data) {
            return _this.emit(event, data);
          });
        };
      })(this);
      bubble("delete");
      bubble("init");
      bubble("change");
    }

    ExampleAdapter.prototype.observe = function(path, callback) {
      return callback(null, this.observeWindow.observe(path));
    };

    ExampleAdapter.prototype.stopObserve = function(path, callback) {
      return callback(null, this.observeWindow.stopObserve(path));
    };

    return ExampleAdapter;

  })(Adapter);

  module.exports.ObservePortal = ObservePortal;

  module.exports.Adapter = Adapter;

  module.exports.ExampleAdapter = ExampleAdapter;

}).call(this);
