// Generated by CoffeeScript 1.8.0
(function() {
  var App, Model, ModelSyncManager,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  Model = App.Model;

  ModelSyncManager = (function(_super) {
    __extends(ModelSyncManager, _super);

    function ModelSyncManager() {
      ModelSyncManager.__super__.constructor.call(this);
      App.afterInitialLoad((function(_this) {
        return function() {
          _this.setupSyncHandlers();
          return _this.setMessageCenter(App.messageCenter);
        };
      })(this));
    }

    ModelSyncManager.prototype.setMessageCenter = function(mc) {
      if (this.mc) {
        this.mc.stopListenBy(this);
      }
      this.mc = mc;
      this.mc.listenBy(this, "event/source", (function(_this) {
        return function(source) {
          return _this.emit("source", new Model.Source(source));
        };
      })(this));
      this.mc.listenBy(this, "event/archive", (function(_this) {
        return function(archive) {
          return _this.emit("archive", new Model.Archive(archive));
        };
      })(this));
      this.mc.listenBy(this, "event/archive/listChange", (function(_this) {
        return function(info) {
          console.debug("recieve event", "listChange", info);
          return _this.emit("listChange", info);
        };
      })(this));
      this.mc.listenBy(this, "event/source/requireLocalAuth", (function(_this) {
        return function(source) {
          var results;
          console.debug("recieve require localauth", source);
          results = Model.Source.sources.find({
            guid: source.guid
          });
          if (results.length === 0) {
            return;
          }
          results[0].sets(source);
          return _this.emit("source/requireLocalAuth", results[0]);
        };
      })(this));
      return this.mc.listenBy(this, "event/source/authorized", (function(_this) {
        return function(source) {
          var results;
          console.debug("recieve authorized", source);
          results = Model.Source.sources.find({
            guid: source.guid
          });
          if (results.length === 0) {
            return;
          }
          results[0].sets(source);
          return _this.emit("source/authorized", results[0]);
        };
      })(this));
    };

    ModelSyncManager.prototype.setupSyncHandlers = function() {
      this.on("archive", (function(_this) {
        return function(archive) {
          var source, _i, _len, _ref, _results;
          _ref = Model.Source.sources.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            source = _ref[_i];
            if (source.guid === archive.sourceGuid) {
              _results.push(source.unreadCount += 1);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      this.on("archive/read", (function(_this) {
        return function(archive) {
          var source, _i, _len, _ref, _results;
          _ref = Model.Source.sources.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            source = _ref[_i];
            if (source.guid === archive.sourceGuid) {
              _results.push(source.unreadCount -= 1);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      return this.on("archive/unread", (function(_this) {
        return function(archive) {
          var source, _i, _len, _ref, _results;
          _ref = Model.Source.sources.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            source = _ref[_i];
            if (source.guid === archive.sourceGuid) {
              _results.push(source.unreadCount += 1);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    };

    return ModelSyncManager;

  })(Leaf.EventEmitter);

  module.exports = ModelSyncManager;

}).call(this);
