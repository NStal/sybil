// Generated by CoffeeScript 1.8.0
(function() {
  var ConnectionManager, ServerConnection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  ServerConnection = require("/component/serverConnection");

  ConnectionManager = (function(_super) {
    __extends(ConnectionManager, _super);

    function ConnectionManager(address) {
      ConnectionManager.__super__.constructor.call(this);
      this.connectInterval = 1000;
      this.connection = new ServerConnection();
      this.connection.on("connect", (function(_this) {
        return function() {
          return _this.emit("connect");
        };
      })(this));
      this.connection.on("disconnect", (function(_this) {
        return function() {
          _this.emit("disconnect");
          console.debug("reconnect");
          return setTimeout(_this.connection.reconnect.bind(_this.connection), 500);
        };
      })(this));
    }

    ConnectionManager.prototype.ready = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.connection.ready.apply(this.connection, args);
    };

    ConnectionManager.prototype.start = function() {
      var wsProtocol;
      if (window.location.protocol === "https:") {
        wsProtocol = "wss:";
      } else {
        wsProtocol = "ws:";
      }
      console.debug("connect at", "" + wsProtocol + "//" + window.location.hostname + ":" + window.location.port + window.location.pathname);
      return this.connection.connect("" + wsProtocol + "//" + window.location.hostname + ":" + window.location.port + window.location.pathname);
    };

    return ConnectionManager;

  })(Leaf.EventEmitter);

  module.exports = ConnectionManager;

}).call(this);
