// Generated by CoffeeScript 1.7.1
(function() {
  var ArchiveDisplayer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ArchiveDisplayer = (function(_super) {
    __extends(ArchiveDisplayer, _super);

    function ArchiveDisplayer(template) {
      ArchiveDisplayer.__super__.constructor.call(this, template);
    }

    ArchiveDisplayer.prototype.setArchive = function(archive) {
      this.archive = archive;
      this.render();
      return this.useDisplayContent = true;
    };

    ArchiveDisplayer.prototype._renderShareInfo = function(profile, howmany) {
      var html, words;
      if (howmany === 0) {
        this.UI.shareInfo$.text("");
        return true;
      }
      if (!profile) {
        this.UI.shareInfo$.text(App.textFormat(App.Language.thisManyPeopleHasShareIt_i, howmany));
        return true;
      }
      if (profile) {
        html = "<img src='http://www.gravatar.com/avatar/" + profile.hash + "?s=12&d=identicon'></img>";
        if (howmany > 1) {
          words = App.textFormat(App.Language.andThisMorePeopleHasShareIt_i, howmany - 1);
        } else {
          words = profile.nickname + " " + App.Language.sharesIt;
        }
        return this.UI.shareInfo$.html(html + words);
      }
    };

    ArchiveDisplayer.prototype.render = function() {
      var content, originalLink, profile, shareRecords, toDisplay;
      this.UI.title$.text(this.archive.title);
      if (this.archive.originalLink) {
        this.UI.title$.attr("href", this.archive.originalLink);
      }
      if (this.archive.like) {
        this.UI.like$.addClass("active");
      } else {
        this.UI.like$.removeClass("active");
      }
      if (this.archive.listName === "read later") {
        this.UI.readLater$.addClass("active");
      } else {
        this.UI.readLater$.removeClass("active");
      }
      if (this.archive.createDate) {
        this.UI.date$.text(moment(this.archive.createDate).format(App.Language.fullDateFormatString));
      }
      if (this.archive.share) {
        this.UI.share$.addClass("active");
      } else {
        this.UI.share$.removeClass("active");
      }
      shareRecords = this.archive.meta.shareRecords;
      if (shareRecords) {
        profile = this.archive.getFirstValidProfile();
        this._renderShareInfo(profile, shareRecords.length);
      }
      this.UI.sourceName$.text(this.archive.sourceName);
      originalLink = this.archive.originalLink || "";
      if (this.useDisplayContent) {
        toDisplay = this.archive.displayContent || this.archive.content;
      } else {
        toDisplay = this.archive.content;
      }
      if (this.currentContent !== toDisplay) {
        this.currentContent = toDisplay;
        if (!this.currentContent) {
          this.UI.content$.text("");
          return;
        }
        if (App.userConfig.get("enableResourceProxy")) {
          if (!App.userConfig.get("useResourceProxyByDefault")) {
            this.UI.content$.html(sanitizer.sanitize(toDisplay));
            this.UI.content$.find("img").each(function() {
              this.useProxy = false;
              return this.onerror = (function(_this) {
                return function() {
                  var url;
                  if (_this.userProxy) {
                    return;
                  }
                  _this.useProxy = true;
                  url = _this.getAttribute("src");
                  if (url.indexOf("/remoteResource") >= 0) {
                    return;
                  }
                  return $(_this).attr("src", "/remoteResource?url=" + (encodeURIComponent(url)) + "&referer=" + originalLink);
                };
              })(this);
            });
          } else {
            content = document.createElement("div");
            content.innerHTML = sanitizer.sanitize(toDisplay);
            $(content).find("img").each(function() {
              var url;
              url = this.getAttribute("src");
              return $(this).attr("src", "/remoteResource?url=" + (encodeURIComponent(url)) + "&referer=" + originalLink);
            });
            this.UI.content$.html(content.innerHTML);
          }
        } else {
          this.UI.content$.html(sanitizer.sanitize(toDisplay));
        }
        return this.UI.content$.find("a").each(function() {
          return this.setAttribute("target", "_blank");
        });
      }
    };

    ArchiveDisplayer.prototype.onClickShare = function() {
      console.log("HI ~~");
      if (!this.archive.share) {
        console.log(this.archive);
        return this.archive.markAsShare((function(_this) {
          return function(err) {
            return _this.render();
          };
        })(this));
      } else {
        return this.archive.markAsUnshare((function(_this) {
          return function(err) {
            return _this.render();
          };
        })(this));
      }
    };

    ArchiveDisplayer.prototype.onClickReadLater = function() {
      if (this.archive.listName !== "read later") {
        return this.archive.readLaterArchive((function(_this) {
          return function(err) {
            if (err) {
              console.error(err);
            }
            return _this.render();
          };
        })(this));
      } else {
        return this.archive.unreadLaterArchive((function(_this) {
          return function(err) {
            if (err) {
              console.error(err);
            }
            return _this.render();
          };
        })(this));
      }
    };

    ArchiveDisplayer.prototype.onClickLike = function() {
      if (!this.archive.like) {
        return this.archive.likeArchive((function(_this) {
          return function(err) {
            if (err) {
              console.error(err);
            }
            return _this.render();
          };
        })(this));
      } else {
        return this.archive.unlikeArchive((function(_this) {
          return function(err) {
            if (err) {
              console.error(err);
            }
            return _this.render();
          };
        })(this));
      }
    };

    ArchiveDisplayer.prototype.markAsLike = function() {
      if (!this.archive.like) {
        return this.archive.likeArchive(function() {
          return this.render();
        });
      }
    };

    ArchiveDisplayer.prototype.markAsUnlike = function() {
      if (!this.archive.like) {
        return this.archive.unlikeArchive((function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      }
    };

    return ArchiveDisplayer;

  })(Leaf.Widget);

  window.ArchiveDisplayer = ArchiveDisplayer;

}).call(this);
