// Generated by CoffeeScript 1.8.0
(function() {
  var BufferedEndlessArchiveLoader, Errors, Model,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Model = require("../model");

  Errors = require("/errors");

  BufferedEndlessArchiveLoader = (function(_super) {
    __extends(BufferedEndlessArchiveLoader, _super);

    function BufferedEndlessArchiveLoader() {
      BufferedEndlessArchiveLoader.__super__.constructor.call(this);
    }

    BufferedEndlessArchiveLoader.prototype.reset = function() {
      this.emit("endLoading");
      BufferedEndlessArchiveLoader.__super__.reset.call(this);
      this.data.archives = [];
      this.data.guids = [];
      this.data.cursor = 0;
      return this.data.drain = false;
    };

    BufferedEndlessArchiveLoader.prototype.init = function(option) {
      if (option == null) {
        option = {};
      }
      if (this.state !== "void") {
        throw new Error("State isnt void, can init loader when already running.");
      }
      this.reset();
      this.viewRead = option.viewRead || false;
      this.sort = option.sort || "latest";
      this.bufferSize = option.buffer || 30;
      return this.query = option.query || {};
    };

    BufferedEndlessArchiveLoader.prototype.more = function(count, callback) {
      var archives, start;
      if (count > this.bufferSize) {
        count = this.bufferSize;
      }
      if (this.data.archives.length - this.data.cursor < count && !this.data.drain) {
        this._bufferMore((function(_this) {
          return function(err) {
            if (err) {
              callback(err);
              return;
            }
            return _this.more(count, callback);
          };
        })(this));
        return;
      }
      start = this.data.cursor;
      this.data.cursor += count;
      archives = this.data.archives.slice(start, start + count);
      callback(null, archives);
      if (this.isDrain()) {
        return this.emit("drain");
      }
    };

    BufferedEndlessArchiveLoader.prototype.oneMore = function(callback) {
      return this.more(1, function(err, archives) {
        if (err) {
          callback(err);
          return;
        }
        if (!archives || archives.length === 0) {
          callback(null, null);
          return;
        }
        return callback(null, archives[0]);
      });
    };

    BufferedEndlessArchiveLoader.prototype.isDrain = function() {
      return this.data.drain && this.data.cursor >= this.data.archives.length;
    };

    BufferedEndlessArchiveLoader.prototype._bufferMore = function(callback) {
      if (this.data.archives.length - this.data.cursor > this.bufferSize) {
        callback();
        return;
      }
      if (this.state === "drain") {
        callback();
        return;
      }
      if (this.state === "pause") {
        this.give("continue");
      } else if (this.state === "void") {
        this.setState("loading");
      } else if (this.state === "loading") {
        true;
      }
      return this.once("state", (function(_this) {
        return function(state) {
          if (state === "panic") {
            return callback(_this.panicError);
          } else if (state === "pause") {
            return callback();
          } else if (state === "drain") {
            return callback();
          } else if (state === "void") {
            return callback(new Errors.Abort("abort"));
          } else {
            return callback(new Errors.UnkownError("buffer state change to unexpected", {
              state: state
            }));
          }
        };
      })(this));
    };

    BufferedEndlessArchiveLoader.prototype.atLoading = function(sole) {
      var offset;
      if (this.data.archives.length > 0) {
        offset = this.data.archives[this.data.archives.length - 1].guid;
      } else {
        offset = null;
      }
      this.emit("startLoading");
      console.log(this.query, "???");
      return Model.Archive.getByCustom({
        query: this.query || {},
        sort: this.sort,
        count: this.bufferSize,
        viewRead: this.viewRead,
        offset: offset
      }, (function(_this) {
        return function(err, archives) {
          var archive, _i, _len, _ref;
          if (_this.stale(sole)) {
            return;
          }
          _this.emit("endLoading");
          if (err) {
            _this.error(err);
            return;
          }
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            if (_ref = archive.guid, __indexOf.call(_this.data.guids, _ref) >= 0) {
              continue;
            }
            _this.data.guids.push(archive.guid);
            _this.data.archives.push(archive);
          }
          if (archives.length < _this.bufferSize) {
            _this.data.drain = true;
            return _this.setState("drained");
          } else {
            return _this.setState("pause");
          }
        };
      })(this));
    };

    BufferedEndlessArchiveLoader.prototype.atPause = function() {
      return this.waitFor("continue", (function(_this) {
        return function() {
          return _this.setState("loading");
        };
      })(this));
    };

    BufferedEndlessArchiveLoader.prototype.atDrained = function() {};

    return BufferedEndlessArchiveLoader;

  })(Leaf.States);

  module.exports = BufferedEndlessArchiveLoader;

}).call(this);
