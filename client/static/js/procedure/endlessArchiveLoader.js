// Generated by CoffeeScript 1.8.0
(function() {
  var EndlessArchiveLoader, Model,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Model = require("../model");

  EndlessArchiveLoader = (function(_super) {
    __extends(EndlessArchiveLoader, _super);

    function EndlessArchiveLoader() {
      EndlessArchiveLoader.__super__.constructor.call(this);
      this.archives = [];
      this.reset();
    }

    EndlessArchiveLoader.prototype.reset = function(option) {
      if (option == null) {
        option = {};
      }
      this.archives = [];
      this.guids = [];
      this.viewRead = option.viewRead || false;
      this.sort = option.sort || "latest";
      this.count = option.count || 10;
      return this.query = option.query || {};
    };

    EndlessArchiveLoader.prototype._load = function(option, callback) {
      option.query = this.query || {};
      return Model.Archive.getByCustom(option, callback);
    };

    EndlessArchiveLoader.prototype.more = function(callback) {
      var offset;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (this.isLoading) {
        callback("isLoading");
        return;
      }
      if (this.noMore) {
        callback("noMore");
        return;
      }
      if (this.archives.length > 0) {
        offset = this.archives[this.archives.length - 1].guid;
      } else {
        offset = null;
      }
      this.isLoading = true;
      this.emit("startLoading");
      return this._load({
        viewRead: this.viewRead,
        sort: this.sort,
        count: this.count,
        offset: offset
      }, (function(_this) {
        return function(err, archives) {
          var archive, _i, _len, _ref;
          _this.emit("endLoading");
          _this.isLoading = false;
          if (err) {
            callback(err);
            return;
          }
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            if (_ref = archive.guid, __indexOf.call(_this.guids, _ref) >= 0) {
              continue;
            }
            _this.guids.push(archive.guid);
            _this.archives.push(archive);
            _this.emit("archive", archive);
          }
          if (archives.length < _this.count) {
            _this.emit("noMore");
            _this.noMore = true;
          }
          return callback(null, archives);
        };
      })(this));
    };

    return EndlessArchiveLoader;

  })(Leaf.EventEmitter);

  module.exports = EndlessArchiveLoader;

}).call(this);
