// Generated by CoffeeScript 1.7.1
(function() {
  var TagDetailPanel, TagList, TagListItem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TagList = (function(_super) {
    __extends(TagList, _super);

    function TagList(sourceList) {
      TagList.__super__.constructor.call(this, SybilWebUI.templates["tag-list"]);
      this.listItems = [];
      Model.on("tag/change", (function(_this) {
        return function() {
          if (_this.buildTimer) {
            clearTimeout(_this.buildTimer);
          }
          return _this.buildTimer = setTimeout((function() {
            _this.buildTagList();
            return _this.buildTimer = null;
          }), 10);
        };
      })(this));
    }

    TagList.prototype.select = function(tag) {
      var item, target, _i, _len, _ref;
      target = null;
      _ref = this.listItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.name === tag) {
          target = item;
          break;
        }
      }
      if (!target) {
        console.error("source guid " + guid + " not found");
        return;
      }
      this.tagArchiveList.setTag(target);
      if (this.currentActive) {
        this.currentActive.deactive();
      }
      target.active();
      return this.currentActive = target;
    };

    TagList.prototype.buildTagList = function() {
      var found, index, item, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      _ref = this.listItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.__match = "notmatch";
      }
      console.log(Tag.tags);
      _ref1 = Tag.tags;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tag = _ref1[_j];
        found = false;
        _ref2 = this.listItems;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          item = _ref2[_k];
          if (item.tag.name === tag.name) {
            found = true;
            item.__match = "match";
            break;
          }
        }
        if (!found) {
          this.addTag(tag);
        }
      }
      _ref3 = this.listItems;
      for (index = _l = 0, _len3 = _ref3.length; _l < _len3; index = ++_l) {
        item = _ref3[index];
        if (item.__match === "notmatch") {
          item.remove();
          this.listItems[index] = null;
        }
      }
      return this.listItems = this.listItems.filter(function(item) {
        return item;
      });
    };

    TagList.prototype.addTag = function(tag) {
      tag = new TagListItem(tag);
      this.listItems.push(tag);
      tag.appendTo(this.UI.container);
      tag.parent = this;
      return tag;
    };

    return TagList;

  })(Leaf.Widget);

  TagListItem = (function(_super) {
    __extends(TagListItem, _super);

    function TagListItem(tag) {
      this.tag = tag;
      TagListItem.__super__.constructor.call(this, SybilWebUI.templates["source-list-item"]);
      this.name = this.tag.name;
      this.sources = this.tag.sources;
      this.render();
      this.tag.on("change", (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    }

    TagListItem.prototype.render = function() {
      var source, _i, _len, _ref;
      this.unreadCount = 0;
      _ref = this.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (source.unreadCount > 0) {
          this.unreadCount += source.unreadCount;
        }
      }
      this.UI.name.innerText = "" + this.name + "(" + this.sources.length + ")";
      return this.UI.unreadCounter$.text((parseInt(this.unreadCount) >= 0) && parseInt(this.unreadCount).toString() || "?");
    };

    TagListItem.prototype.onClickName = function() {
      this.parent.select(this.name);
      return false;
    };

    TagListItem.prototype.active = function() {
      this.node$.addClass("active");
      return this.isActive = true;
    };

    TagListItem.prototype.deactive = function() {
      this.node$.removeClass("active");
      return this.isActive = false;
    };

    return TagListItem;

  })(Leaf.Widget);

  TagDetailPanel = (function(_super) {
    __extends(TagDetailPanel, _super);

    function TagDetailPanel() {
      TagDetailPanel.__super__.constructor.call(this, SybilWebUI.templates["source-detail-panel"]);
      this.tags = [];
    }

    TagDetailPanel.prototype.setSource = function(source) {
      this.data = source;
      return this.render();
    };

    TagDetailPanel.prototype.render = function() {
      var tag, tags, _i, _j, _len, _len1, _ref, _results;
      this.UI.name$.text(this.data.name);
      tags = this.data.tags || [];
      _ref = this.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tag.remove();
      }
      this.tags.length = 0;
      _results = [];
      for (_j = 0, _len1 = tags.length; _j < _len1; _j++) {
        tag = tags[_j];
        _results.push(this.addTag(new TagDetailPanel.Tag(tag)));
      }
      return _results;
    };

    TagDetailPanel.prototype.addTag = function(tag) {
      var guid;
      tag.appendTo(this.UI.tagContainer);
      guid = this.data.guid;
      tag.onClickNode = (function(_this) {
        return function() {
          return SybilWebUI.messageCenter.invoke("removeTagFromSource", {
            guid: guid,
            name: tag.name
          }, function(err) {
            if (err) {
              console.error(err);
              return;
            }
            _this.tags = _this.tags.filter(function(_) {
              if (_.name === tag.name) {
                _.remove();
                return false;
              }
              return true;
            });
            return _this.data.tags = (_this.data.tags || []).filter(function(item) {
              return item !== tag.name;
            });
          });
        };
      })(this);
      return this.tags.push(tag);
    };

    TagDetailPanel.prototype.onClickAddTag = function() {
      this.UI.addTag$.hide();
      this.UI.tagAddActions$.show();
      return this.UI.addTagInput$.focus();
    };

    TagDetailPanel.prototype.onClickConfirmAddTag = function() {
      var name, _, _i, _len, _ref;
      name = this.UI.addTagInput.value.trim().toLowerCase();
      if (!name) {
        return;
      }
      _ref = this.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ = _ref[_i];
        if (_.name === name) {
          SybilWebUI.showHint("" + name + " already exist.");
          return;
        }
      }
      return SybilWebUI.messageCenter.invoke("addTagToSource", {
        guid: this.data.guid,
        name: name
      }, (function(_this) {
        return function(err, source) {
          if (err) {
            console.error;
            return;
          }
          _this.addTag(new TagDetailPanel.Tag(name));
          _this.UI.addTagInput.value = "";
          _this.data.tags = _this.data.tags || [];
          return _this.data.tags.push(name);
        };
      })(this));
    };

    TagDetailPanel.prototype.onClickCancelAddTag = function() {
      this.UI.addTag$.show();
      return this.UI.tagAddActions$.hide();
    };

    TagDetailPanel.prototype.onKeydownAddTagInput = function(e) {
      if (e.which === Leaf.Key.enter) {
        this.onClickConfirmAddTag();
        return false;
      }
      return true;
    };

    return TagDetailPanel;

  })(Leaf.Widget);

  TagDetailPanel.Tag = (function(_super) {
    __extends(Tag, _super);

    function Tag(name) {
      this.name = name;
      Tag.__super__.constructor.call(this, "<span class='tag'><span>");
      this.node$.text(name);
    }

    return Tag;

  })(Leaf.Widget);

  window.TagList = TagList;

}).call(this);
