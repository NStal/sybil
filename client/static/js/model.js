// Generated by CoffeeScript 1.7.1
(function() {
  var Archive, ArchiveList, Config, Friend, Model, P2pNode, Source, Tag, Workspace, WorkspaceMember, WorkspaceMemberGroup, WorkspaceMemberSource, WorkspaceMemberTag,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Source = (function(_super) {
    __extends(Source, _super);

    Source.sources = [];

    Source.createOrUpdate = function(data) {
      var source, _i, _len, _ref, _source;
      _source = new Source(data);
      _ref = Source.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (source.guid === _source.guid) {
          source.set(_source);
          return;
        }
      }
      Source.sources.push(_source);
      Model.emit("source/add", _source);
      return source;
    };

    Source.getOrCreate = function(data) {
      var source;
      source = this.getByGuid(data.guid);
      if (source) {
        return source;
      }
      return this.createOrUpdate(data);
    };

    Source.remove = function(which) {
      var index, source, _i, _len, _ref;
      _ref = Source.sources;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        source = _ref[index];
        if (source === which) {
          Source.sources.splice(index, 1);
          which.emit("remove");
          return true;
        }
      }
      return false;
    };

    Source.getByGuid = function(guid) {
      var source, _i, _len, _ref;
      _ref = this.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (source.guid === guid) {
          return source;
        }
      }
      return null;
    };

    Source.sync = function() {
      return App.messageCenter.invoke("getSources", {}, (function(_this) {
        return function(err, sources) {
          var source, _i, _len, _results;
          if (sources == null) {
            sources = [];
          }
          if (err) {
            throw err;
          }
          _results = [];
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            source = sources[_i];
            _results.push(_this.createOrUpdate(source));
          }
          return _results;
        };
      })(this));
    };

    function Source(data) {
      Source.__super__.constructor.call(this);
      this.set(data);
      Model.on("archive", (function(_this) {
        return function(archive) {
          if (archive.sourceGuid === _this.guid) {
            console.debug("archive");
            return _this.unread();
          }
        };
      })(this));
      Model.on("archive/read", (function(_this) {
        return function(archive) {
          if (archive.sourceGuid === _this.guid) {
            return _this.read();
          }
        };
      })(this));
      Model.on("archive/unread", (function(_this) {
        return function(archive) {
          if (archive.sourceGuid === _this.guid) {
            return _this.unread();
          }
        };
      })(this));
    }

    Source.prototype.set = function(data) {
      this.data = data;
      this.guid = this.data.guid;
      this.name = this.data.name;
      this.unreadCount = this.data.unreadCount;
      this.tags = this.data.tags || [];
      this.emit("change");
      return this.uri = this.data.uri;
    };

    Source.prototype.toJSON = function() {
      return this.data;
    };

    Source.prototype.read = function() {
      this.unreadCount--;
      if (this.unreadCount < 0) {
        this.unreadCount = 0;
      }
      return this.emit("change");
    };

    Source.prototype.unread = function() {
      this.unreadCount++;
      return this.emit("change");
    };

    Source.prototype.removeTag = function(name, callback) {
      if (__indexOf.call(this.tags, name) < 0) {
        callback("not found");
        return;
      }
      return App.messageCenter.invoke("removeTagFromSource", {
        guid: this.guid,
        name: name
      }, (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
            return;
          }
          _this.tags = _this.tags.filter(function(item) {
            return item !== name;
          });
          _this.emit("change");
          Tag.addSource(_this);
          return callback(null);
        };
      })(this));
    };

    Source.prototype.unsubscribe = function(callback) {
      return App.messageCenter.invoke("unsubscribe", this.guid, (function(_this) {
        return function(err) {
          if (err) {
            console.error("fail to unsubscribe " + _this.guid, err);
            callback(err);
            return;
          }
          console.log("unsubscribed " + _this.name + " " + _this.guid);
          Source.remove(_this);
          return callback();
        };
      })(this));
    };

    Source.prototype.addTag = function(name, callback) {
      if (__indexOf.call(this.tags, name) >= 0) {
        callback("dumplicated tag");
        return;
      }
      return SybilWebUI.messageCenter.invoke("addTagToSource", {
        guid: this.guid,
        name: name
      }, (function(_this) {
        return function(err, source) {
          if (err) {
            callback(err);
            return;
          }
          if (__indexOf.call(_this.tags, name) >= 0) {
            callback(null);
            return;
          }
          _this.tags.push(name);
          _this.emit("change");
          Tag.addSource(_this);
          return callback(null);
        };
      })(this));
    };

    Source.prototype.markAllAsRead = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("markAllArchiveAsRead", this.guid, (function(_this) {
        return function(err) {
          return callback(err);
        };
      })(this));
    };

    return Source;

  })(Leaf.EventEmitter);

  Config = (function(_super) {
    __extends(Config, _super);

    Config.configs = [];

    Config.load = function(callback) {
      return App.messageCenter.invoke("getConfig", "configIndex", (function(_this) {
        return function(err, configs) {
          if (err) {
            throw err;
          }
          if (!(configs instanceof Array)) {
            configs = [];
          }
          return async.map(configs, (function(name, done) {
            return App.messageCenter.invoke("getConfig", name, function(err, data) {
              var item, prop, _i, _len, _ref;
              if (err) {
                return done(err);
              } else {
                data = data || {};
                _ref = _this.configs;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  item = _ref[_i];
                  if (item.name === name) {
                    for (prop in data) {
                      item.data[prop] = data[prop];
                    }
                    return done(null, null);
                  }
                }
                return done(null, new Config(name, data));
              }
            });
          }), function(err, configs) {
            if (err) {
              if (callback) {
                callback(err);
              } else {
                throw err;
              }
            }
            _this.isReady = true;
            configs = configs.filter(function(item) {
              return item;
            });
            _this.configs.push.apply(_this.configs, configs);
            Model.emit("config/ready");
            if (_this._saveOnLoad) {
              return _this._saveIndex(function() {
                return _this.save();
              });
            }
          });
        };
      })(this));
    };

    Config.save = function(name, callback) {
      var configsToSave;
      if (!this.isReady) {
        console.debug("won't save " + name + " when config not load yet");
        return;
      }
      if (name) {
        configsToSave = this.configs.filter(function(item) {
          return item.name === name;
        });
      } else {
        configsToSave = this.configs;
      }
      return async.each(configsToSave, ((function(_this) {
        return function(config, done) {
          return App.messageCenter.invoke("saveConfig", {
            name: config.name,
            data: config.toJSON()
          }, function(err) {
            return done(err);
          });
        };
      })(this)), (function(_this) {
        return function(err) {
          if (err) {
            if (callback) {
              return callback(err);
            } else {
              throw err;
            }
          }
        };
      })(this));
    };

    Config.getConfig = function(name, defaultConfig) {
      var item, _i, _len, _ref;
      _ref = this.configs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.name === name) {
          return item;
        }
      }
      if (defaultConfig && typeof defaultConfig !== "object") {
        throw "invalid defaultConfig";
      }
      if (!this.isReady) {
        this._saveOnLoad = true;
      }
      return this.createConfig(name, defaultConfig && defaultConfig || {});
    };

    Config.createConfig = function(name, data, callback) {
      var config, err, item, _i, _len, _ref;
      if (!name) {
        err = "config need a name";
        if (callback) {
          callback(err);
        } else {
          throw err;
        }
      }
      if (name === "configName") {
        err = "invalid config name, conflict with 'configName'";
        if (callback) {
          callback(err);
        } else {
          throw err;
        }
        return;
      }
      _ref = this.configs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.name === name) {
          err = "already exists";
          if (callback) {
            callback(err);
          } else {
            throw err;
          }
          return;
        }
      }
      config = new Config(name, data);
      this.configs.push(config);
      this._saveIndex((function(_this) {
        return function(err) {
          if (err) {
            if (callback) {
              callback(err);
            }
          }
          return _this.save(config.name, callback);
        };
      })(this));
      return config;
    };

    Config._saveIndex = function(callback) {
      var item;
      if (!this.isReady) {
        if (callback) {
          callback("config not ready");
        }
        return;
      }
      return App.messageCenter.invoke("saveConfig", {
        name: "configIndex",
        data: (function() {
          var _i, _len, _ref, _results;
          _ref = this.configs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(item.name);
          }
          return _results;
        }).call(this)
      }, function(err) {
        return callback(err);
      });
    };

    function Config(name, data) {
      this.data = data != null ? data : {};
      this.name = name;
    }

    Config.prototype.toJSON = function() {
      return this.data;
    };

    Config.prototype.save = function(callback) {
      return Config.save(this.name, callback);
    };

    Config.prototype.set = function(key, value) {
      this.data[key] = _.cloneDeep(value);
      return this.save();
    };

    Config.prototype.get = function(key, defaultValue) {
      return (_.cloneDeep(this.data[key])) || defaultValue;
    };

    return Config;

  })(Leaf.EventEmitter);

  ArchiveList = (function(_super) {
    __extends(ArchiveList, _super);

    ArchiveList.lists = [];

    ArchiveList.sync = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return App.messageCenter.invoke("getLists", {}, (function(_this) {
        return function(err, lists) {
          var list, match, _i, _len;
          if (err) {
            callback(err);
            return;
          }
          for (_i = 0, _len = lists.length; _i < _len; _i++) {
            list = lists[_i];
            match = _this.lists.some(function(item) {
              return item.name === list.name;
            });
            if (!match) {
              _this.create(list);
            }
          }
          return callback();
        };
      })(this));
    };

    ArchiveList.create = function(data) {
      var archive, list, _i, _len, _ref;
      archive = new ArchiveList(data);
      _ref = ArchiveList.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        if (list.name === name) {
          throw "already exists";
        }
      }
      ArchiveList.lists.push(archive);
      console.debug("archiveList add!");
      return Model.emit("archiveList/add", archive);
    };

    function ArchiveList(data) {
      this.data = data;
      ArchiveList.__super__.constructor.call(this);
      this.name = this.data.name;
      this.count = this.data.count || 0;
      if (!this.name) {
        throw "invalid list data";
      }
      Model.on("archive/listChange", (function(_this) {
        return function(info) {
          if (info.archive.listName === _this.name) {
            return _this.remove(new Archive(info.archive));
          } else if (info.listName === _this.name) {
            info.archive.listName = _this.name;
            return _this.add(new Archive(info.archive));
          }
        };
      })(this));
    }

    ArchiveList.prototype.getArchives = function(callback) {
      return App.messageCenter.invoke("getList", this.name, function(err, listInfo) {
        if (listInfo == null) {
          listInfo = {};
        }
        if (!listInfo || !listInfo.archives) {
          callback(err, null);
          return;
        }
        return callback(err, listInfo.archives.map(function(info) {
          return new Archive(info);
        }));
      });
    };

    ArchiveList.prototype["delete"] = function(callback) {
      ArchiveList.list = ArchiveList.list.filter(function(item) {
        return item !== this;
      });
      callback(null);
      return Model.emit("archiveList/delete", this);
    };

    ArchiveList.prototype.add = function(archive) {
      this.count++;
      return this.emit("add", archive);
    };

    ArchiveList.prototype.remove = function(archive) {
      this.count--;
      return this.emit("remove", archive);
    };

    return ArchiveList;

  })(Leaf.EventEmitter);

  Tag = (function(_super) {
    __extends(Tag, _super);

    Tag.tags = [];

    Tag.addSource = function(source) {
      var hasTag, tag, tagName, _i, _j, _len, _len1, _ref, _ref1;
      if (!source.tags || source.tags.length === 0) {
        Tag.homelessSourceTag.addSource(source);
        return;
      }
      _ref = source.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tagName = _ref[_i];
        hasTag = false;
        _ref1 = this.tags;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tag = _ref1[_j];
          if (tag.name === tagName) {
            tag.addSource(source);
            tag.emit("change");
            hasTag = true;
            break;
          }
        }
        if (!hasTag) {
          tag = Tag.create(tagName);
          tag.addSource(source);
          tag.emit("change");
        }
      }
      return Model.emit("tag/change");
    };

    Tag.create = function(data) {
      var newTag, tag, _i, _len, _ref;
      newTag = new Tag(data);
      _ref = Tag.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        if (tag.name === newTag.name) {
          return;
        }
      }
      Tag.tags.push(newTag);
      return newTag;
    };

    function Tag(name) {
      Tag.__super__.constructor.call(this);
      this.sources = [];
      this.name = name;
    }

    Tag.prototype.addSource = function(_source) {
      var source, _i, _len, _ref;
      _ref = this.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (source.guid === _source.guid) {
          return false;
        }
      }
      this.sources.push(_source);
      _source.on("change", (function(_this) {
        return function() {
          var index, _j, _len1, _ref1, _ref2;
          if (_this.name === "untagged" && (!_source.tags || _source.tags.length === 0)) {
            _this.emit("change");
            return;
          }
          if (_ref1 = _this.name, __indexOf.call(_source.tags, _ref1) < 0) {
            _ref2 = _this.sources;
            for (index = _j = 0, _len1 = _ref2.length; _j < _len1; index = ++_j) {
              source = _ref2[index];
              if (source === _source) {
                _this.sources.splice(index, 1);
                break;
              }
            }
          }
          return _this.emit("change");
        };
      })(this));
      this.emit("change");
      return true;
    };

    return Tag;

  })(Leaf.EventEmitter);

  Archive = (function(_super) {
    __extends(Archive, _super);

    Archive.getFromSource = function(option, callback) {
      return App.messageCenter.invoke("getSourceArchives", option, function(err, archives) {
        var archive, result;
        if (err) {
          callback(err);
          return;
        }
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            _results.push(new Archive(archive));
          }
          return _results;
        })();
        return callback(null, result);
      });
    };

    Archive.getByTag = function(option, callback) {
      return App.messageCenter.invoke("getTagArchives", option, function(err, archives) {
        var archive, result;
        if (err) {
          callback(err);
          return;
        }
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            _results.push(new Archive(archive));
          }
          return _results;
        })();
        return callback(null, result);
      });
    };

    Archive.getByCustom = function(option, callback) {
      console.debug("send by custom", option);
      return App.messageCenter.invoke("getCustomArchives", option, function(err, archives) {
        var archive, result;
        console.debug("return by custom", err, archives);
        if (err) {
          callback(err);
          return;
        }
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            _results.push(new Archive(archive));
          }
          return _results;
        })();
        return callback(null, result);
      });
    };

    Archive.getByShareHashes = function(option, callback) {
      if (option == null) {
        option = {};
      }
      return App.messageCenter.invoke("getShareArchiveByNodeHashes", {
        hashes: option.hashes,
        option: {
          count: option.count || 30,
          offset: option.offset || 0
        }
      }, (function(_this) {
        return function(err, archives) {
          if (archives == null) {
            archives = [];
          }
          if (err) {
            callback(err);
            return;
          }
          archives = archives.map(function(data) {
            return new Archive(data);
          });
          return callback(null, archives);
        };
      })(this));
    };

    function Archive(data) {
      this.data = data;
      Archive.__super__.constructor.call(this);
      this.originalLink = this.data.originalLink;
      this.content = this.data.content;
      this.displayContent = this.data.displayContent;
      this.title = this.data.title;
      this.hasRead = this.data.hasRead;
      this.star = this.data.star;
      this.guid = this.data.guid;
      this.createDate = new Date(this.data.createDate);
      this.sourceGuid = this.data.sourceGuid;
      this.sourceName = this.data.sourceName;
      this.like = this.data.like;
      this.share = this.data.share;
      this.listName = this.data.listName || null;
      this.meta = this.data.meta || {};
    }

    Archive.prototype.changeList = function(name, callback) {
      return App.messageCenter.invoke("moveArchiveToList", {
        guid: this.guid,
        listName: name
      }, function(err) {
        return callback(err);
      });
    };

    Archive.prototype.markAsShare = function(callback) {
      return App.messageCenter.invoke("share", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            _this.share = true;
            _this.emit("change");
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.markAsUnshare = function(callback) {
      return App.messageCenter.invoke("unshare", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            _this.share = false;
            _this.emit("change");
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.markAsRead = function(callback) {
      return App.messageCenter.invoke("markArchiveAsRead", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            if (!_this.hasRead) {
              _this.hasRead = true;
              Model.emit("archive/read", _this);
            }
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.markAsUnread = function(callback) {
      return App.messageCenter.invoke("markArchiveAsUnread", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            if (_this.hasRead) {
              Model.emit("archive/unread", _this);
              _this.hasRead = false;
            }
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.likeArchive = function(callback) {
      return App.messageCenter.invoke("likeArchive", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            _this.like = true;
            _this.emit("change");
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.unlikeArchive = function(callback) {
      return App.messageCenter.invoke("unlikeArchive", this.guid, (function(_this) {
        return function(err) {
          if (!err) {
            _this.like = false;
            _this.emit("change");
          }
          return callback(err);
        };
      })(this));
    };

    Archive.prototype.readLaterArchive = function(callback) {
      return this.changeList("read later", (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
            return;
          }
          _this.listName = "read later";
          _this.emit("change");
          return callback();
        };
      })(this));
    };

    Archive.prototype.unreadLaterArchive = function(callback) {
      if (this.listName !== "read later") {
        callback("not in read later list");
        return;
      }
      return this.changeList(null, (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
            return;
          }
          _this.listName = null;
          _this.emit("change");
          return callback();
        };
      })(this));
    };

    Archive.prototype.getFirstValidProfile = function() {
      var item, _i, _len, _ref;
      if (!this.meta || !this.meta.shareRecords) {
        return null;
      }
      _ref = this.meta.shareRecords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        console.log(item.profile);
        if (item.profile && item.profile.email && item.profile.nickname) {
          return {
            hash: md5(item.profile.email.trim()),
            nickname: item.profile.nickname
          };
        }
      }
      return null;
    };

    return Archive;

  })(Leaf.EventEmitter);

  P2pNode = (function(_super) {
    __extends(P2pNode, _super);

    P2pNode.nodes = [];

    P2pNode.sync = function() {
      return App.messageCenter.invoke("getP2pNode", {}, (function(_this) {
        return function(err, nodes) {
          var node, _i, _len, _results;
          if (err) {
            return;
          }
          _results = [];
          for (_i = 0, _len = nodes.length; _i < _len; _i++) {
            node = nodes[_i];
            _results.push(_this.addOrUpdate(node));
          }
          return _results;
        };
      })(this));
    };

    P2pNode.addOrUpdate = function(node) {
      if (P2pNode.nodes.some((function(_this) {
        return function(oldNode) {
          if (oldNode.publicKey === node.publicKey) {
            if (node.online) {
              oldNode.init(node);
            } else {
              _this.remove(oldNode);
            }
            return true;
          }
        };
      })(this))) {
        return console.debug("find node");
      } else {
        if (node.online) {
          return P2pNode.add(new P2pNode(node));
        }
      }
    };

    P2pNode.add = function(node) {
      this.nodes.push(node);
      return Model.emit("node/add", node);
    };

    P2pNode.remove = function(node) {
      var index;
      index = this.nodes.indexOf(node);
      if (index >= 0) {
        this.nodes.splice(index, 1);
        node.emit("delete");
        Model.emit("node/delete", node);
        return node;
      }
      return null;
    };

    function P2pNode(data) {
      P2pNode.__super__.constructor.call(this);
      this.init(data);
    }

    P2pNode.prototype.isFriend = function() {
      var item, _i, _len, _ref;
      _ref = Friend.friends;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.publicKey === this.publicKey) {
          return true;
        }
      }
      return false;
    };

    P2pNode.prototype.init = function(data) {
      console.debug("create profile", data);
      this.data = data;
      this.publicKey = this.data.publicKey;
      this.hash = this.data.hash;
      this.profile = data.profile || {};
      if (this.profile && this.profile.email && !this.profile.emailHash) {
        this.profile.emailHash = md5(this.profile.email.toString().trim());
      }
      return this.emit("change", this);
    };

    return P2pNode;

  })(Leaf.EventEmitter);

  Friend = (function(_super) {
    __extends(Friend, _super);

    Friend.friends = [];

    Friend.sync = function() {
      return App.messageCenter.invoke("getFriends", {}, (function(_this) {
        return function(err, friends) {
          var friend, _i, _len, _results;
          if (friends == null) {
            friends = [];
          }
          if (err) {
            console.debug(err, "fail to get friends");
            return;
          }
          _results = [];
          for (_i = 0, _len = friends.length; _i < _len; _i++) {
            friend = friends[_i];
            _results.push(_this.addOrUpdate(friend));
          }
          return _results;
        };
      })(this));
    };

    Friend.addOrUpdate = function(friend) {
      console.log("get firend data", friend);
      if (!this.friends.some(function(oldFriend) {
        if (oldFriend.hash === friend.hash) {
          oldFriend.init(friend);
          return true;
        }
      })) {
        return this.add(new Friend(friend));
      }
    };

    Friend.add = function(friend) {
      this.friends.push(friend);
      return Model.emit("friend/add", friend);
    };

    Friend.removeByHash = function(hash) {
      var index, item, _i, _len, _ref;
      _ref = this.friends;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        if (item.keyHash === hash) {
          this.friends.splice(index, 1);
          return true;
        }
      }
      return false;
    };

    Friend.remove = function(friend) {
      var index;
      index = this.friends.indexOf(friend);
      if (index >= 0) {
        this.friends.splice(index, 1);
      }
      friend.emit("delete");
      return Model.emit("friend/delete", friend);
    };

    Friend.addFriendFromNode = function(node, callback) {
      var info;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      console.log("add friend from node");
      info = {
        keyHash: node.hash,
        nickname: node.profile.nickname,
        email: node.profile.email,
        publicKey: node.publicKey.toString()
      };
      return App.messageCenter.invoke("addFriend", info, function(err, friend) {
        return callback(err, friend);
      });
    };

    function Friend(data) {
      if (data == null) {
        data = {};
      }
      Friend.__super__.constructor.call(this);
      this.init(data);
    }

    Friend.prototype.init = function(data) {
      var item, _i, _len, _ref, _results;
      this.data = data;
      this.keyHash = this.data.keyHash;
      this.nickname = this.data.nickname || "anonymous";
      this.email = this.data.email || "";
      this.emailHash = md5(this.email);
      this.publicKey = this.data.publicKey || "";
      this.emit("change", this);
      this.status = "offline";
      _ref = P2pNode.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.publicKey === this.publicKey) {
          this.status = "online";
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Friend.prototype.remove = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("removeFriend", this.keyHash, (function(_this) {
        return function(err) {
          if (err) {
            callback(err);
            return;
          }
          Friend.remove(_this);
          return callback(null);
        };
      })(this));
    };

    return Friend;

  })(Leaf.EventEmitter);

  Workspace = (function(_super) {
    __extends(Workspace, _super);

    Workspace.workspaces = [];

    Workspace.sync = function(callback) {
      callback = callback || function() {
        return true;
      };
      return App.messageCenter.invoke("getCustomWorkspaces", {}, (function(_this) {
        return function(err, workspaces) {
          var workspace, _i, _len;
          if (workspaces.length === 0) {
            _this.addWorkspace(new Workspace({
              name: "default",
              members: []
            }));
          }
          for (_i = 0, _len = workspaces.length; _i < _len; _i++) {
            workspace = workspaces[_i];
            _this.addWorkspace(new Workspace(workspace));
          }
          Model.emit("workspace/sync");
          return callback(err);
        };
      })(this));
    };

    Workspace.addWorkspace = function(newWorkspace) {
      var has, workspace, _i, _len, _ref;
      has = false;
      _ref = this.workspaces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        workspace = _ref[_i];
        if (workspace.name === newWorkspace.name) {
          throw "add dumplicated workspace " + workspace.name;
          has = true;
          break;
        }
      }
      if (!has) {
        return this.initWorkspace(newWorkspace);
      }
    };

    Workspace.initWorkspace = function(newWorkspace) {
      this.workspaces.push(newWorkspace);
      return newWorkspace.on("change", (function(_this) {
        return function() {
          return Model.emit("workspace/change", newWorkspace);
        };
      })(this));
    };

    function Workspace(data) {
      Workspace.__super__.constructor.call(this);
      this.set(data);
    }

    Workspace.prototype.set = function(data) {
      var item, _i, _len, _ref;
      this.data = data;
      this.name = this.data.name;
      this.members = [];
      _ref = this.data.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.members.push(WorkspaceMember.fromJSON(item));
      }
      return this.emit("change");
    };

    Workspace.prototype.add = function(member) {
      var item, _i, _len, _ref;
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item === member) {
          return false;
        }
      }
      this.members.push(member);
      return member;
    };

    Workspace.prototype.remove = function(member) {
      var index, item, _i, _len, _ref;
      _ref = this.members;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        if (item === member) {
          this.members.splice(index, 1);
          return true;
        }
      }
      return false;
    };

    Workspace.prototype.save = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("saveCustomWorkspace", {
        name: this.name,
        data: this.toJSON()
      }, function(err) {
        if (err) {
          callback(err);
          return;
        }
        return callback();
      });
    };

    Workspace.prototype.toJSON = function() {
      var member;
      return {
        name: this.name,
        members: (function() {
          var _i, _len, _ref, _results;
          _ref = this.members;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            member = _ref[_i];
            _results.push(member.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return Workspace;

  })(Leaf.EventEmitter);

  WorkspaceMember = (function(_super) {
    __extends(WorkspaceMember, _super);

    WorkspaceMember.fromJSON = function(json) {
      if (json.type === "source") {
        return WorkspaceMemberSource.fromJSON(json);
      } else if (json.type === "group") {
        return WorkspaceMemberGroup.fromJSON(json);
      } else if (json.type === "tag") {
        return WorkspaceMemberTag.fromJSON(json);
      }
    };

    function WorkspaceMember() {
      WorkspaceMember.__super__.constructor.call(this);
      this;
    }

    return WorkspaceMember;

  })(Leaf.EventEmitter);

  WorkspaceMemberSource = (function(_super) {
    __extends(WorkspaceMemberSource, _super);

    function WorkspaceMemberSource(data) {
      this.data = data;
      WorkspaceMemberSource.__super__.constructor.call(this);
      this.type = "source";
      this.guid = this.data.guid;
      this.name = this.data.name;
      this.source = Source.getByGuid(this.guid);
      if (this.source) {
        this.source.on("change", (function(_this) {
          return function() {
            return _this.emit("change");
          };
        })(this));
      }
    }

    WorkspaceMemberSource.fromJSON = function(json) {
      return new WorkspaceMemberSource(json);
    };

    WorkspaceMemberSource.prototype.toJSON = function() {
      return {
        type: "source",
        guid: this.guid,
        name: this.name
      };
    };

    WorkspaceMemberSource.prototype.toQuery = function() {
      return {
        sourceGuids: [this.guid],
        tags: []
      };
    };

    return WorkspaceMemberSource;

  })(WorkspaceMember);

  WorkspaceMemberTag = (function(_super) {
    __extends(WorkspaceMemberTag, _super);

    WorkspaceMemberTag.fromJSON = function(json) {
      return new WorkspaceMemberTag(json);
    };

    function WorkspaceMemberTag(info) {
      WorkspaceMemberTag.__super__.constructor.call(this);
      this.type = "tag";
      this.tagName = info.tagName;
      this.name = this.tagName;
      this.syncTag();
    }

    WorkspaceMemberTag.prototype.syncTag = function() {
      var tag, _i, _len, _ref;
      _ref = Tag.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        if (tag.name === this.tagName) {
          this.tag = tag;
          this.emit("change");
          return;
        }
      }
      return this.emit("empty");
    };

    WorkspaceMemberTag.prototype.toJSON = function() {
      return {
        type: "tag",
        tagName: this.tagName
      };
    };

    WorkspaceMemberTag.prototype.toQuery = function() {
      return {
        sourceGuids: [],
        tags: [this.tagName]
      };
    };

    return WorkspaceMemberTag;

  })(WorkspaceMember);

  WorkspaceMemberGroup = (function(_super) {
    __extends(WorkspaceMemberGroup, _super);

    WorkspaceMemberGroup.fromJSON = function(json) {
      var group, item, _i, _len, _ref;
      group = new WorkspaceMemberGroup(json.name || "untitles");
      _ref = json.items || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.type === "source") {
          group.add(new WorkspaceMemberSource(item));
        } else if (item.type === "tag") {
          group.add(new WorkspaceMemberTag(item));
        } else {
          throw "contain invalid data " + (JSON.stringify(item));
        }
      }
      return group;
    };

    function WorkspaceMemberGroup(name) {
      WorkspaceMemberGroup.__super__.constructor.call(this);
      this.name = name;
      this.type = "group";
      this.items = [];
    }

    WorkspaceMemberGroup.prototype.add = function(member) {
      if (!(member instanceof WorkspaceMember)) {
        throw "member group can only add member or source or tag";
      }
      if (member instanceof WorkspaceMemberGroup) {
        throw "member group can't contain any other group, at least for now";
      }
      return this.items.push(member);
    };

    WorkspaceMemberGroup.prototype.toJSON = function() {
      var item;
      return {
        type: this.type,
        name: this.name || "untitled group",
        items: (function() {
          var _i, _len, _ref, _results;
          _ref = this.items;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push(item.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    WorkspaceMemberGroup.prototype.toQuery = function() {
      var item, query, result, sourceGuid, tag, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      result = {
        sourceGuids: [],
        tags: []
      };
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        query = item.toQuery();
        _ref1 = query.sourceGuids;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          sourceGuid = _ref1[_j];
          if (__indexOf.call(result.sourceGuids, sourceGuid) < 0) {
            result.sourceGuids.push(sourceGuid);
          }
        }
        _ref2 = query.tags;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          tag = _ref2[_k];
          if (__indexOf.call(result.tags, tag) < 0) {
            result.tags.push(tag);
          }
        }
      }
      return result;
    };

    return WorkspaceMemberGroup;

  })(WorkspaceMember);

  Tag.homelessSourceTag = Tag.create("untagged");

  Model = new Leaf.EventEmitter;

  Model.initEventListener = function() {
    App.on("connect", function() {
      Model.Workspace.sync();
      Model.ArchiveList.sync();
      Model.P2pNode.sync();
      Model.Source.sync();
      Model.Friend.sync();
      Model.Config.load();
      return console.debug("connected");
    });
    App.messageCenter.on("event/source", function(source) {
      console.debug("get source event", source);
      return Model.Source.createOrUpdate(source);
    });
    App.messageCenter.on("event/archive", function(archive) {
      return Model.emit("archive", new Archive(archive));
    });
    App.messageCenter.on("event/archive/listChange", function(info) {
      if (!info || !info.archive) {
        console.error("invalid archive list change event", info);
        return;
      }
      return Model.emit("archive/listChange", info);
    });
    App.messageCenter.on("event/node/change", function(node) {
      console.log("node change", node);
      return Model.P2pNode.addOrUpdate(node);
    });
    App.messageCenter.on("event/friend/add", function(friend) {
      return Model.Friend.addOrUpdate(friend);
    });
    return App.messageCenter.on("event/friend/remove", function(friend) {
      return Model.Friend.removeByHash(friend.keyHash);
    });
  };

  Model.on("source/add", function(source) {
    return Tag.addSource(source);
  });

  Model.on("node/add", function(node) {
    var friend, _i, _len, _ref, _results;
    _ref = Friend.friends;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      friend = _ref[_i];
      if (friend.publicKey === node.publicKey) {
        console.debug("online,==");
        friend.status = "online";
        _results.push(friend.emit("online"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  Model.on("node/delete", function(node) {
    var friend, _i, _len, _ref, _results;
    _ref = Friend.friends;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      friend = _ref[_i];
      console.debug("offline ?", friend.publicKey, node.publicKey);
      if (friend.publicKey === node.publicKey) {
        console.debug("offline--");
        friend.status = "offline";
        _results.push(friend.emit("offline"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  Model.Tag = Tag;

  Model.Source = Source;

  Model.Model = Model;

  Model.Archive = Archive;

  Model.Workspace = Workspace;

  Model.WorkspaceMember = WorkspaceMember;

  Model.Config = Config;

  Model.ArchiveList = ArchiveList;

  Model.P2pNode = P2pNode;

  Model.Friend = Friend;

  window.Model = Model;

}).call(this);
