// Generated by CoffeeScript 1.7.1
(function() {
  var AddSourcePopup, SourceAdder, Terminal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  AddSourcePopup = (function(_super) {
    __extends(AddSourcePopup, _super);

    function AddSourcePopup() {
      AddSourcePopup.__super__.constructor.call(this, App.templates["add-source-popup"]);
      this.terminal = new Terminal(this.UI.terminal);
      this.node$.hide();
    }

    AddSourcePopup.prototype.show = function() {
      this.inflate();
      return this.node$.slideDown(100);
    };

    AddSourcePopup.prototype.hide = function() {
      return this.node$.slideUp(100);
    };

    AddSourcePopup.prototype.shrink = function() {
      return this.node$.addClass("monitor-mode");
    };

    AddSourcePopup.prototype.inflate = function() {
      return this.node$.removeClass("monitor-mode");
    };

    AddSourcePopup.prototype.clear = function() {
      if (this.currentAdder) {
        this.currentAdder.destroy();
      }
      this.UI.input.value = "";
      return this.terminal.clear();
    };

    AddSourcePopup.prototype.onClickSubmit = function() {
      var sourceAdder, uris;
      if (this.isAdding) {
        return;
      }
      this.shrink();
      this.terminal.clear();
      uris = this.UI.input.value.trim().split(/\s+/).map(function(item) {
        return item.trim();
      });
      uris = uris.filter(function(item) {
        return item;
      });
      sourceAdder = new SourceAdder(App.messageCenter, this.terminal);
      this.isAdding = true;
      this.currentAdder = sourceAdder;
      return sourceAdder.addSources(uris, (function(_this) {
        return function(err) {
          _this.isAdding = false;
          if (err === "abort") {
            _this.terminal.error("abort");
            return;
          }
          if (err) {
            _this.terminal.singleSelection([
              {
                text: "retry",
                callback: function() {
                  return _this.onClickSubmit();
                }
              }, {
                text: "cancel",
                callback: function() {
                  _this.clear();
                  return _this.hide();
                }
              }
            ]);
          } else {
            return _this.terminal.singleSelection([
              {
                text: "ok",
                callback: function() {
                  _this.clear();
                  return _this.hide();
                }
              }
            ]);
          }
        };
      })(this));
    };

    AddSourcePopup.prototype.onClickCancel = function() {
      return this.hide();
    };

    AddSourcePopup.prototype.onKeydownInput = function(e) {
      if (e.which === Leaf.Key.enter) {
        this.onClickSubmit();
        return false;
      }
    };

    return AddSourcePopup;

  })(Leaf.Widget);

  SourceAdder = (function(_super) {
    __extends(SourceAdder, _super);

    function SourceAdder(messageCenter, terminal) {
      this.messageCenter = messageCenter;
      this.terminal = terminal;
      this.addSourceCarefully = __bind(this.addSourceCarefully, this);
      this.controllers = [];
    }

    SourceAdder.prototype.addSources = function(uris, callback) {
      var fails, successes;
      if (this.mode === "carefully") {
        async.eachSeries(uris, ((function(_this) {
          return function(uri, done) {
            return _this.addSourceCarefully(uri, function(err) {
              return done(err);
            });
          };
        })(this)), function(err) {
          return callback(err);
        });
        return;
      }
      fails = [];
      successes = [];
      return async.forEachLimit(uris, 5, ((function(_this) {
        return function(uri, done) {
          if (!_this.messageCenter) {
            done("abort");
            return;
          }
          return _this.addSource(uri, function(err) {
            if (err) {
              fails.push(uri);
            } else {
              successes.push(uri);
            }
            return done();
          });
        };
      })(this)), (function(_this) {
        return function(err) {
          var fail, _i, _len;
          if (err === "abort") {
            callback("abort");
            return;
          }
          for (_i = 0, _len = fails.length; _i < _len; _i++) {
            fail = fails[_i];
            _this.terminal.error("fail to add " + fail);
          }
          if (fails.length > 0) {
            _this.terminal.warn("COMPLETE with some fail cases");
          } else {
            _this.terminal.ok("COMPLETE");
          }
          return callback();
        };
      })(this));
    };

    SourceAdder.prototype.addSource = function(uri, callback) {
      var hintToString;
      hintToString = function(hint) {
        return hint.uri;
      };
      this.terminal.log("try add uri", uri);
      if (!this.messageCenter) {
        callback("abort");
        return;
      }
      return this.controllers.push(this.messageCenter.invoke("getSourceHint", uri, (function(_this) {
        return function(err, available) {
          var source;
          if (err) {
            _this.terminal.error("error detecting source from " + uri);
            _this.terminal.error(err.toString());
            callback(err);
            return;
          }
          if (available.length === 0) {
            _this.terminal.error("can't detect any source from '" + uri + "'");
            callback("detect fail");
            return;
          }
          if (available.length > 1) {
            _this.terminal.warn("multiple source detect from single url");
            _this.terminal.warn("add first one " + (hintToString(available[0])));
            _this.terminal.warn("if you do need a choice here please use master mode");
          }
          source = available[0];
          if (!_this.messageCenter) {
            callback("abort");
            return;
          }
          return _this.controllers.push(_this.messageCenter.invoke("subscribe", source, function(err, result) {
            if (err) {
              if (err === "duplicate") {
                _this.terminal.warn("source " + (hintToString(source)) + " already exsits");
                _this.terminal.log("skip " + (hintToString(source)));
                callback();
              } else {
                _this.terminal.error(err.toString());
                _this.terminal.error("fail to add source " + (hintToString(source)));
                callback(err);
              }
              return;
            }
            _this.terminal.ok("successfully add " + (hintToString(source)));
            return callback();
          }));
        };
      })(this)));
    };

    SourceAdder.prototype.addSourceCarefully = function(uri, callback) {
      return App.messageCenter.invoke("getSourceHint", uri, (function(_this) {
        return function(err, available) {
          if (err) {
            _this.terminal.error("error detecting source from " + uri);
            return _this.terminal.error(err.toString());
          }
        };
      })(this));
    };

    SourceAdder.prototype.destroy = function(callback) {
      var controller, _i, _len, _ref, _results;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      this.messageCenter = null;
      this.terminal = null;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(controller.clear("abort"));
      }
      return _results;
    };

    return SourceAdder;

  })(Leaf.EventEmitter);

  Terminal = (function(_super) {
    var Button, Text;

    __extends(Terminal, _super);

    Text = (function(_super1) {
      __extends(Text, _super1);

      function Text(text, className) {
        Text.__super__.constructor.call(this, "<span></span>");
        this.node$.text(text);
        if (className) {
          this.node$.addClass(className);
        }
      }

      return Text;

    })(Leaf.Widget);

    Button = (function(_super1) {
      __extends(Button, _super1);

      function Button(text, callback) {
        Button.__super__.constructor.call(this, "<button></button>");
        this.callback = callback;
        this.node$.text(text);
      }

      Button.prototype.onClickNode = function() {
        if (this.isDisable) {
          return;
        }
        return this.callback();
      };

      Button.prototype.disable = function() {
        this.isDisable = true;
        return this.node$.attr("disabled", true);
      };

      return Button;

    })(Leaf.Widget);

    function Terminal(template) {
      Terminal.__super__.constructor.call(this, template);
    }

    Terminal.prototype._push = function() {
      var widget, widgets, _i, _len;
      widgets = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = widgets.length; _i < _len; _i++) {
        widget = widgets[_i];
        widget.appendTo(this);
      }
      this.node$.append(document.createElement("br"));
      return this.node.scrollTop = this.node.scrollHeight;
    };

    Terminal.prototype.clear = function() {
      return this.node$.empty();
    };

    Terminal.prototype.error = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._push(new Text(args.join(" "), "terminal-error"));
    };

    Terminal.prototype.warn = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._push(new Text(args.join(" "), "terminal-warn"));
    };

    Terminal.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._push(new Text(args.join(" "), "terminal-normal"));
    };

    Terminal.prototype.ok = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._push(new Text(args.join(" "), "terminal-ok"));
    };

    Terminal.prototype.good = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._push(new Text(args.join(" "), "terminal-ok"));
    };

    Terminal.prototype.singleSelection = function(selections) {
      var buttons, selection, _fn, _i, _len;
      buttons = [];
      _fn = (function(_this) {
        return function(selection) {
          return buttons.push(new Button(selection.text, function() {
            var button, _j, _len1;
            for (_j = 0, _len1 = buttons.length; _j < _len1; _j++) {
              button = buttons[_j];
              button.disable();
            }
            _this.log("choose " + selection.text);
            return selection.callback();
          }));
        };
      })(this);
      for (_i = 0, _len = selections.length; _i < _len; _i++) {
        selection = selections[_i];
        _fn(selection);
      }
      return this._push.apply(this, buttons);
    };

    Terminal.prototype.multiSelect = function(selections, callback) {
      return callback(null, selections);
    };

    return Terminal;

  })(Leaf.Widget);

  window.AddSourcePopup = AddSourcePopup;

}).call(this);
