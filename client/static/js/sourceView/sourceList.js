// Generated by CoffeeScript 1.8.0
(function() {
  var App, ContextMenu, DragContext, Model, SourceAuthorizeTerminal, SourceList, SourceListDragController, SourceListFolder, SourceListFolderContextMenu, SourceListInitializer, SourceListItem, SourceListItemBase, SourceListItemContextMenu, SourceListSyncManager, async, tm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ContextMenu = require("/widget/contextMenu");

  DragContext = require("/util/dragContext");

  SourceAuthorizeTerminal = require("/sourceUtil/sourceAuthorizeTerminal");

  App = require("/app");

  Model = require("/model");

  async = require("/lib/async");

  tm = require("/templateManager");

  SourceListItemBase = (function(_super) {
    __extends(SourceListItemBase, _super);

    function SourceListItemBase(template) {
      SourceListItemBase.__super__.constructor.call(this, template);
    }

    SourceListItemBase.prototype.active = function() {
      if (this.node) {
        this.node.classList.add("active");
      }
      return this.isActive = true;
    };

    SourceListItemBase.prototype.deactive = function() {
      if (this.node) {
        this.node.classList.remove("active");
      }
      return this.isActive = false;
    };

    return SourceListItemBase;

  })(Leaf.Widget);

  SourceListFolderContextMenu = (function(_super) {
    __extends(SourceListFolderContextMenu, _super);

    function SourceListFolderContextMenu(folder) {
      this.folder = folder;
      this.selections = [
        {
          name: "remove folder",
          callback: this.remove.bind(this)
        }, {
          name: "unsubscribe all",
          callback: this.unsubscribeAll.bind(this)
        }, {
          name: "rename folder",
          callback: this.rename.bind(this)
        }
      ];
      SourceListFolderContextMenu.__super__.constructor.call(this, this.selections);
    }

    SourceListFolderContextMenu.prototype.rename = function() {
      var name;
      name = prompt("folder name", this.folder.model.name);
      if (name && name.trim()) {
        return this.folder.rename(name);
      } else {

      }
    };

    SourceListFolderContextMenu.prototype.unsubscribeAll = function() {
      if (!confirm("unsubscribe all in this folder " + this.folder.model.name + "?")) {
        return;
      }
      return this.folder.unsubscribeAll();
    };

    SourceListFolderContextMenu.prototype.remove = function() {
      if (!confirm("remove this folder " + this.folder.model.name + "?")) {
        return;
      }
      return this.folder.remove();
    };

    return SourceListFolderContextMenu;

  })(ContextMenu);

  tm.use("sourceView/sourceListFolder");

  SourceListFolder = (function(_super) {
    __extends(SourceListFolder, _super);

    function SourceListFolder(model) {
      if (model == null) {
        model = "untitled folder";
      }
      SourceListFolder.__super__.constructor.call(this, App.templates.sourceView.sourceListFolder);
      if (typeof model === "string") {
        this.model = new Model.SourceFolder({
          name: string
        });
      } else if (model instanceof Model) {
        this.model = model;
      } else {
        throw new Error("invalid source list folder parameter");
      }
      this.model.defaults({
        collapse: true,
        children: []
      });
      this.children = Leaf.Widget.makeList(this.UI.container);
      this.children.on("child/add", (function(_this) {
        return function(child) {
          return _this._attachChild(child);
        };
      })(this));
      this.children.on("child/remove", (function(_this) {
        return function(child) {
          return _this._detachChild(child);
        };
      })(this));
      this._initChildren(this.model.children);
      this.bubble(this.children, "child/add");
      this.bubble(this.children, "child/remove");
      this.bubble(this.model, "change");
      this.bubble(this.model, "change/name");
      this.bubble(this.model, "change/collapse");
      this.model.listenBy(this, "change", this.render);
      this.UI.title.oncontextmenu = (function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          if (!_this.contextMenu) {
            _this.contextMenu = new SourceListFolderContextMenu(_this);
          }
          return _this.contextMenu.show(e);
        };
      })(this);
      this.render();
    }

    SourceListFolder.prototype._attachChild = function(child) {
      this.bubble(child, "select");
      child.listenBy(this, "destroy", (function(_this) {
        return function() {
          _this.updateModel();
          return _this.emit("child/destroy");
        };
      })(this));
      child.listenBy(this, "remove", (function(_this) {
        return function() {
          return _this.removeChild(child);
        };
      })(this));
      child.folder = this;
      return child.listenBy(this, "change", this.render);
    };

    SourceListFolder.prototype._detachChild = function(child) {
      this.stopBubble(child);
      if (child.folder === this) {
        return child.folder = null;
      }
    };

    SourceListFolder.prototype._initChildren = function(sources) {
      var child, source, _i, _len, _ref, _results;
      this.children.length = 0;
      _ref = sources || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        child = new SourceListItem(source);
        _results.push(this.children.push(child));
      }
      return _results;
    };

    SourceListFolder.prototype.addChild = function(child, index) {
      if (index == null) {
        index = this.children.length;
      }
      this.children.splice(index, 0, child);
      return this.updateModel();
    };

    SourceListFolder.prototype.removeChild = function(child) {
      this.children.removeItem(child);
      return this.updateModel();
    };

    SourceListFolder.prototype.updateModel = function() {
      var child;
      this.model.set("children", (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(child.source);
        }
        return _results;
      }).call(this));
      return this.model;
    };

    SourceListFolder.prototype.unsubscribeAll = function() {
      var item, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(item.unsubscribe());
      }
      return _results;
    };

    SourceListFolder.prototype.rename = function(name) {
      return this.model.name = name;
    };

    SourceListFolder.prototype.remove = function() {
      return this.emit("remove", this);
    };

    SourceListFolder.prototype.delayRender = function() {
      if (this._delayRenderTimer) {
        clearTimeout(this._delayRenderTimer);
      }
      return this._delayRenderTimer = setTimeout(this.render.bind(this), 10);
    };

    SourceListFolder.prototype.render = function() {
      var child, style, unreadCount, _i, _len, _ref;
      unreadCount = 0;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        unreadCount += child.source.unreadCount || 0;
      }
      this.renderData.name = this.model.name;
      this.renderData.unreadCount = unreadCount;
      style = "no-update";
      if (parseInt(unreadCount) > 0) {
        style = "has-update";
      }
      if (parseInt(unreadCount) >= 20) {
        style = "many-update";
      }
      this.renderData.statusStyle = style;
      console.debug(style, "!!!");
      if (!this.model.collapse) {
        this.renderData.collapseClass = "";
        return this.renderData.iconClass = "fa-folder";
      } else {
        this.renderData.collapseClass = "collapse";
        return this.renderData.iconClass = "fa-folder-open";
      }
    };

    SourceListFolder.prototype.onClickTitle = function() {
      return this.emit("select", this);
    };

    SourceListFolder.prototype.onClickFolderIcon = function(e) {
      e.stopPropagation();
      return this.toggleCollapse();
    };

    SourceListFolder.prototype.toggleCollapse = function(e) {
      return this.model.collapse = !this.model.collapse;
    };

    SourceListFolder.prototype.toJSON = function() {
      var json;
      json = this.model.toJSON();
      json.type = "folder";
      return json;
    };

    return SourceListFolder;

  })(SourceListItemBase);

  SourceListItemContextMenu = (function(_super) {
    __extends(SourceListItemContextMenu, _super);

    function SourceListItemContextMenu(item) {
      this.item = item;
      this.selections = [
        {
          name: "source detail",
          callback: this.showSourceDetail.bind(this)
        }, {
          name: "unsubscribe",
          callback: this.unsubscribe.bind(this)
        }
      ];
      SourceListItemContextMenu.__super__.constructor.call(this, this.selections);
    }

    SourceListItemContextMenu.prototype.showSourceDetail = function() {
      return this.item.showSourceDetail();
    };

    SourceListItemContextMenu.prototype.unsubscribe = function() {
      if (!confirm("unsubscribe item " + this.item.source.name + "?")) {
        return;
      }
      return this.item.unsubscribe();
    };

    return SourceListItemContextMenu;

  })(ContextMenu);

  tm.use("sourceView/sourceListItem");

  SourceListItem = (function(_super) {
    __extends(SourceListItem, _super);

    function SourceListItem(source) {
      SourceListItem.__super__.constructor.call(this, App.templates.sourceView.sourceListItem);
      if (!(source instanceof Model.Source)) {
        throw new Error("invalid source");
      }
      this.source = source;
      this.node.oncontextmenu = (function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          if (!_this.contextMenu) {
            _this.contextMenu = new SourceListItemContextMenu(_this);
          }
          return _this.contextMenu.show(e);
        };
      })(this);
      this.source.listenBy(this, "destroy", this.destroy);
      this.source.listenBy(this, "change", this.render);
      this.bubble(this.source, "change");
      this.bubble(this.source, "change/name");
      this.render();
    }

    SourceListItem.prototype.showSourceDetail = function() {
      App.sourceView.sourceDetail.setSource(this.source);
      return App.sourceView.sourceDetail.show();
    };

    SourceListItem.prototype.unsubscribe = function(callback) {
      if (callback == null) {
        callback = (function(_this) {
          return function() {
            return true;
          };
        })(this);
      }
      return this.source.unsubscribe(callback);
    };

    SourceListItem.prototype.render = function() {
      var bigErrorTime, lastErrorDate, self, smallErrorTime, style, url;
      this.renderData.name = this.source.name;
      this.renderData.guid = this.source.guid;
      this.renderData.unreadCount = (parseInt(this.source.unreadCount) >= 0) && parseInt(this.source.unreadCount).toString() || "?";
      style = "no-update";
      if (parseInt(this.source.unreadCount) > 0) {
        style = "has-update";
      }
      if (parseInt(this.source.unreadCount) >= 20) {
        style = "many-update";
      }
      this.renderData.statusStyle = style;
      this.renderData.state = "ok";
      smallErrorTime = 1000 * 60 * 60;
      bigErrorTime = 1000 * 60 * 60 * 24 * 2;
      if (this.source.lastError) {
        if (this.source.lastErrorDate) {
          lastErrorDate = (Date.now() - new Date(this.source.lastErrorDate).getTime()) || 0;
        } else {
          lastErrorDate = -1;
        }
        console.debug(lastErrorDate);
        if (lastErrorDate < 0) {
          this.renderData.state = "warn";
        } else if (lastErrorDate < smallErrorTime) {
          this.renderData.state = "unhealthy";
        } else if (lastErrorDate < bigErrorTime) {
          this.renderData.state = "warn";
        } else {
          this.renderData.state = "error";
        }
      }
      if (this.source.requireLocalAuth) {
        this.renderData.state = "error";
      }
      if (!this.iconLoaded) {
        url = "//www.google.com/s2/favicons?domain=" + this.source.uri + "&alt=feed";
        this.renderData.sourceIcon = url;
        this.UI.sourceIcon.onerror = function() {
          return this.src = "/image/favicon-default.png";
        };
        self = this;
        return this.UI.sourceIcon.onload = function() {
          this.style.display = "inline";
          return self.iconLoaded = true;
        };
      }
    };

    SourceListItem.prototype.onClickNode = function(e) {
      e.capture();
      return this.select();
    };

    SourceListItem.prototype.remove = function() {
      return this.emit("remove", this);
    };

    SourceListItem.prototype.select = function() {
      if (this.source.requireLocalAuth) {
        if (this.source.authorizeTerminal) {
          this.source.authorizeTerminal.hide();
        }
        this.source.authorizeTerminal = new SourceAuthorizeTerminal(this.source);
      }
      return this.emit("select", this);
    };

    SourceListItem.prototype.destroy = function() {
      return this.emit("remove");
    };

    SourceListItem.prototype.toJSON = function() {
      var json;
      json = this.source.toJSON({
        fields: ["name", "guid", "uri", "type"]
      });
      json.type = "source";
      return json;
    };

    return SourceListItem;

  })(SourceListItemBase);

  tm.use("sourceView/sourceList");

  SourceList = (function(_super) {
    __extends(SourceList, _super);

    function SourceList() {
      SourceList.__super__.constructor.call(this, App.templates.sourceView.sourceList);
      this.children = Leaf.Widget.makeList(this.UI.container);
      this.dragController = new SourceListDragController(this);
      this.children.on("child/add", this._attach.bind(this));
      this.children.on("child/remove", this._detach.bind(this));
      this.initialLoader = new SourceListInitializer(this);
      this.syncManager = new SourceListSyncManager(this);
    }

    SourceList.prototype.loadFolder = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (this.folderStore) {
        this.folderStore.load((function(_this) {
          return function(err) {
            if (err) {
              callback(err);
              return;
            }
            _this.buildFolderData(_this.folderStore.get("folders") || []);
            return callback();
          };
        })(this));
        return;
      }
      Model.SourceFolder.loadFolderStore((function(_this) {
        return function(err, store) {
          if (err) {
            callback(err);
            return;
          }
          _this.folderStore = store;
          return _this.loadFolder(callback);
        };
      })(this));
    };

    SourceList.prototype.mergeFolder = function(folderModel) {
      var child, folder, guids, index, item, _i, _len, _ref, _ref1, _ref2;
      folderModel.children = folderModel.children.map(function(source) {
        if (source instanceof Model.Source) {
          return source;
        } else {
          return Model.Source.sources.findOne({
            guid: source.guid
          });
        }
      });
      folderModel.children = folderModel.children.filter(function(item) {
        return item;
      });
      folder = new SourceListFolder(folderModel);
      guids = folder.children.map(function(item) {
        return item.source.guid;
      });
      index = 0;
      while (index < this.children.length) {
        child = this.children[index];
        if (child instanceof SourceListItem) {
          if (_ref = child.source.guid, __indexOf.call(guids, _ref) >= 0) {
            child.remove();
            continue;
          }
        } else if (child instanceof SourceListFolder) {
          _ref1 = child.children;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (_ref2 = item.source.guid, __indexOf.call(guids, _ref2) >= 0) {
              console.debug("conflict source in folder", child.model.name, "and", folder.model.name, item.source.name);
              item.remove();
              child.updateModel();
            }
          }
        }
        index++;
      }
      return this.children.push(folder);
    };

    SourceList.prototype.mergeSource = function(sourceModel, top) {
      var child, item, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item instanceof SourceListItem) {
          if (item.source.guid === sourceModel.guid) {
            this.children.removeItem(item);
            if (top) {
              this.children.unshift(item);
            } else {
              this.children.push(item);
            }
            return;
          }
          continue;
        }
        _ref1 = item.children;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          if (child.source.guid === sourceModel.guid) {
            return;
          }
        }
      }
      if (top) {
        return this.children.unshift(new SourceListItem(sourceModel));
      } else {
        return this.children.push(new SourceListItem(sourceModel));
      }
    };

    SourceList.prototype.buildFolderData = function(folders) {
      var coherency;
      this.currentFolderData = folders;
      coherency = 100;
      return async.eachLimit(folders, coherency, ((function(_this) {
        return function(item, done) {
          var folder, source;
          setTimeout((function() {
            return done();
          }), 0);
          if (item.type === "folder") {
            folder = new Model.SourceFolder(item);
            return _this.mergeFolder(folder);
          } else if (item.type === "source") {
            source = new Model.Source(item);
            return _this.mergeSource(source);
          }
        };
      })(this)), (function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
          }
        };
      })(this));
    };

    SourceList.prototype._attach = function(item) {
      var child, childrenHandler, _i, _len, _ref, _results;
      if (item.hasAttach) {
        throw new Error("Programmer Error");
      }
      item.hasAttach = true;
      item.list = this;
      item.listenBy(this, "select", this.select);
      item.listenBy(this, "change/collapse", this.save);
      item.listenBy(this, "change/name", this.save);
      item.listenBy(this, "destroy", this.save);
      item.listenBy(this, "child/destroy", this.save);
      item.listenBy(this, "remove", (function(_this) {
        return function() {
          var args, index, sources;
          if (item instanceof SourceListFolder) {
            sources = item.children.toArray();
          } else {
            sources = [];
          }
          index = _this.children.indexOf(item);
          if (index < 0) {
            return;
          }
          args = [].concat(index, 1, sources);
          _this.children.splice.apply(_this.children, args);
          return _this.save();
        };
      })(this));
      this.dragController.add(item);
      childrenHandler = (function(_this) {
        return function(child) {
          _this.dragController.add(child);
          return child.listenBy(_this, "remove", function() {
            return _this.dragController.remove(child);
          });
        };
      })(this);
      item.listenBy(this, "child", childrenHandler);
      if (item.children) {
        _ref = item.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(childrenHandler(child));
        }
        return _results;
      }
    };

    SourceList.prototype._detach = function(item) {
      item.hasAttach = false;
      item.stopListenBy(this);
      if (item.list === this) {
        item.list = null;
      }
      return this.dragController.remove(item);
    };

    SourceList.prototype.save = function(callback) {
      var _save;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      clearTimeout(this._saveTimer);
      _save = (function(_this) {
        return function() {
          var child, folders;
          folders = (function() {
            var _i, _len, _ref, _results;
            _ref = this.children;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              _results.push(child.toJSON());
            }
            return _results;
          }).call(_this);
          if (Leaf.Util.compare(folders, _this.currentFolderData)) {
            console.debug("no need to save");
            return;
          }
          console.debug("save folders", folders, JSON.stringify(folders).length);
          if (_this.folderStore) {
            _this.folderStore.set("folders", folders);
          }
          return _this.currentFolderData = folders;
        };
      })(this);
      return this._saveTimer = setTimeout(_save.bind(this), this._saveDelay || 100);
    };

    SourceList.prototype.select = function(who) {
      var child, info;
      if (this.currentItem) {
        this.currentItem.deactive();
      }
      this.currentItem = who;
      who.active();
      info = {};
      if (who instanceof SourceListFolder) {
        if (who.children.length === 0) {
          return;
        }
        info.type = "folder";
        info.sourceGuids = (function() {
          var _i, _len, _ref, _results;
          _ref = who.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.source.guid);
          }
          return _results;
        })();
        info.name = who.model.name;
      } else {
        info.type = "source";
        info.sourceGuids = [who.source.guid];
        info.name = who.source.name;
      }
      return this.emit("select", info);
    };

    SourceList.prototype.onClickAddSourceButton = function() {
      return App.addSourcePopup.show();
    };

    SourceList.prototype.onClickAddFolderButton = function() {
      var child, name;
      name = (prompt("name", "untitled") || "").trim();
      if (!name) {
        return;
      }
      child = new SourceListFolder(new Model.SourceFolder({
        name: name,
        children: []
      }));
      this.children.unshift(child);
      return this.save();
    };

    return SourceList;

  })(Leaf.Widget);

  SourceListDragController = (function(_super) {
    __extends(SourceListDragController, _super);

    function SourceListDragController(list) {
      this.list = list;
      this.dragContext = new DragContext();
      this.cursor$ = $('<div data-id="cursor" class="cursor">');
      this.dragContext.on("start", (function(_this) {
        return function(e) {
          var shadow;
          shadow = document.createElement("span");
          shadow.style.color = "white";
          shadow.classList.add("no-interaction");
          shadow.innerHTML = e.draggable.innerText.trim().substring(0, 30);
          return _this.dragContext.addDraggingShadow(shadow);
        };
      })(this));
      this.dragContext.on("drop", (function(_this) {
        return function(e) {
          _this.move(e.draggable.widget, e.droppable.widget, e);
          _this.list.save();
          return _this.cursor$.hide();
        };
      })(this));
      this.dragContext.on("hover", (function(_this) {
        return function(e) {
          return _this.hint(e.draggable.widget, e.droppable.widget, e);
        };
      })(this));
      this.dragContext.on("release", (function(_this) {
        return function(e) {
          return _this.cursor$.hide();
        };
      })(this));
      this.dragContext.on("move", (function(_this) {
        return function(e) {
          if (!e.dragHover) {
            return _this.cursor$.hide();
          }
        };
      })(this));
    }

    SourceListDragController.prototype.add = function(item) {
      if (item instanceof SourceListItem) {
        return this.dragContext.addContext(item.node);
      } else if (item instanceof SourceListFolder) {
        return this.dragContext.addContext(item.UI.title);
      } else {
        throw new Error("add invalid drag item");
      }
    };

    SourceListDragController.prototype.remove = function(item) {
      if (item instanceof SourceListItem) {
        return this.dragContext.addContext(item.node);
      } else if (item instanceof SourceListFolder) {
        return this.dragContext.addContext(item.UI.title);
      }
    };

    SourceListDragController.prototype.move = function(from, to, event) {
      var index, move, offset, parent;
      console.debug("moveing at", from, to, event);
      move = this.getMovePosition(from, to, event);
      if (move.position === "inside") {
        if (this.hintFolder) {
          if (this.hintFolder !== this.list.currentItem) {
            this.hintFolder.deactive();
          }
          this.hintFolder = null;
        }
        console.assert(from instanceof SourceListItem);
        from.remove();
        move.target.children.splice(0, 0, from);
        move.target.updateModel();
        this.list.save();
        this.cursor$.hide();
        return;
      }
      if (move.position === "after") {
        offset = 1;
      } else {
        offset = 0;
      }
      parent = move.target.folder || move.target.list;
      if (!parent) {
        console.debug(move.target);
        throw new Error("can move to orphan item");
      }
      from.remove();
      console.assert(!from.list);
      console.assert(!from.folder);
      index = parent.children.indexOf(move.target);
      parent.children.splice(index + offset, 0, from);
      if (parent.updateModel) {
        parent.updateModel();
      }
      this.list.save();
      return this.cursor$.hide();
    };

    SourceListDragController.prototype.hint = function(from, to, event) {
      var move;
      move = this.getMovePosition(from, to, event);
      this.cursor$.show();
      if (this.hintFolder) {
        this.hintFolder.deactive();
        this.hintFolder = null;
      }
      if (move.position === "inside") {
        console.assert(move.target instanceof SourceListFolder, "can only move inside folders");
        this.hintFolder = move.target;
        this.hintFolder.active();
      }
      if (move.position === "after") {
        return this.cursor$.insertAfter(move.target.node);
      } else if (move.position === "before") {
        return this.cursor$.insertBefore(move.target.node);
      } else {
        return this.cursor$.remove();
      }
    };

    SourceListDragController.prototype.getMovePosition = function(from, to, e) {
      if (from instanceof SourceListFolder && to instanceof SourceListItem) {
        if (!(to.folder instanceof SourceListFolder)) {
          if (e.offsetY > to.node$.height() / 2) {
            return {
              target: to,
              position: "after"
            };
          } else {
            return {
              target: to,
              position: "before"
            };
          }
        } else {
          return {
            target: to.folder,
            position: "after"
          };
        }
      }
      if (from instanceof SourceListFolder && to instanceof SourceListFolder) {
        if (e.offsetY > to.node$.height() / 2) {
          return {
            target: to,
            position: "after"
          };
        } else {
          return {
            target: to,
            position: "before"
          };
        }
      }
      if (to instanceof SourceListFolder && from instanceof SourceListItem) {
        if ((to.node$.height() * 3 / 4) > e.offsetY && e.offsetY > (to.node$.height() / 3)) {
          return {
            target: to,
            position: "inside"
          };
        }
      }
      if (e.offsetY > to.node$.height() / 2) {
        return {
          target: to,
          position: "after"
        };
      } else {
        return {
          target: to,
          position: "before"
        };
      }
    };

    return SourceListDragController;

  })(Leaf.EventEmitter);

  SourceListInitializer = (function(_super) {
    __extends(SourceListInitializer, _super);

    function SourceListInitializer(list) {
      this.list = list;
      SourceListInitializer.__super__.constructor.call(this);
      App.afterInitialLoad((function(_this) {
        return function() {
          return _this.loadSources(function() {
            return _this.loadFolder();
          });
        };
      })(this));
    }

    SourceListInitializer.prototype.loadSources = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return Model.Source.sources.sync((function(_this) {
        return function() {
          var source, _i, _len, _ref;
          _ref = Model.Source.sources.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            source = _ref[_i];
            _this.list.mergeSource(source);
          }
          return callback();
        };
      })(this));
    };

    SourceListInitializer.prototype.loadFolder = function() {
      return this.list.loadFolder((function(_this) {
        return function() {
          return _this.emit("done");
        };
      })(this));
    };

    return SourceListInitializer;

  })(Leaf.EventEmitter);

  SourceListSyncManager = (function(_super) {
    __extends(SourceListSyncManager, _super);

    function SourceListSyncManager(list) {
      this.list = list;
      SourceListSyncManager.__super__.constructor.call(this);
      App.afterInitialLoad((function(_this) {
        return function() {
          return App.modelSyncManager.on("source", function(sourceModel) {
            return _this.list.mergeSource(sourceModel, true);
          });
        };
      })(this));
    }

    return SourceListSyncManager;

  })(Leaf.EventEmitter);

  module.exports = SourceList;

}).call(this);
