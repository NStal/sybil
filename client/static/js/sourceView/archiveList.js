// Generated by CoffeeScript 1.8.0
(function() {
  var App, ArchiveDisplayer, ArchiveList, ArchiveListController, ArchiveListFormatter, ArchiveListItem, BufferedEndlessArchiveLoader, CubeLoadingHint, Flag, Model, ScrollChecker, SourceUpdateChecker, SwipeChecker, async, tm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Model = require("/model");

  App = require("/app");

  ScrollChecker = require("/util/scrollChecker");

  SwipeChecker = require("/util/swipeChecker");

  async = require("/lib/async");

  BufferedEndlessArchiveLoader = require("/procedure/bufferedEndlessArchiveLoader");

  CubeLoadingHint = require("/widget/cubeLoadingHint");

  ArchiveDisplayer = require("/baseView/archiveDisplayer");

  Flag = require("/util/flag");

  tm = require("/templateManager");

  tm.use("sourceView/archiveList");

  ArchiveList = (function(_super) {
    __extends(ArchiveList, _super);

    function ArchiveList(template) {
      this.applyPreviewMode = __bind(this.applyPreviewMode, this);
      this.include(CubeLoadingHint);
      ArchiveList.__super__.constructor.call(this, template || App.templates.sourceView.archiveList);
      this.sort = "latest";
      this.viewRead = false;
      this.loadCount = 10;
      this.scrollChecker = new ScrollChecker(this.UI.containerWrapper);
      this.archiveListItems = Leaf.Widget.makeList(this.UI.container);
      this.archiveListController = new ArchiveListController(this);
      this.sourceUpdateChecker = new SourceUpdateChecker(this);
      this.initSubWidgets();
      App.userConfig.on("change/previewMode", this.applyPreviewMode.bind(this));
      App.userConfig.init("useResourceProxyByDefault", false);
      App.userConfig.init("enableResourceProxy", true);
    }

    ArchiveList.prototype.applyPreviewMode = function() {
      var globalPreviewMode, infoPreviewMode;
      if (!this.archiveInfo) {
        return;
      }
      globalPreviewMode = App.userConfig.get("previewMode", false);
      infoPreviewMode = App.userConfig.get("previewModeFor" + this.archiveInfo.name, globalPreviewMode);
      this.disableMarkAsRead = true;
      if (infoPreviewMode) {
        this.node$.addClass("preview-mode");
      } else {
        this.node$.removeClass("preview-mode");
      }
      return this.disableMarkAsRead = false;
    };

    ArchiveList.prototype.load = function(info) {
      this.clear();
      this.archiveInfo = info;
      this.UI.emptyHint$.hide();
      this.UI.loadingHint.hide();
      this.render();
      this.archiveListController.load(info);
      return this.emit("load");
    };

    ArchiveList.prototype.render = function() {
      this.UI.title$.show();
      this.UI.sourceName$.text(this.archiveInfo.name);
      this.applyPreviewMode();
      if (this.viewRead) {
        return this.UI.toggleViewAll$.text("view unread");
      } else {
        return this.UI.toggleViewAll$.text("view all");
      }
    };

    ArchiveList.prototype.clear = function() {
      if (this.archiveLoader) {
        this.archiveLoader.stopListenBy(this);
      }
      this.archiveLoader = null;
      this.UI.containerWrapper.scrollTop = 0;
      this.UI.emptyHint$.show();
      return this.UI.title$.hide();
    };

    ArchiveList.prototype.onNoMore = function() {
      return this.UI.emptyHint$.show();
    };

    ArchiveList.prototype.onClickMarkAllAsRead = function() {
      return async.eachLimit(this.archiveInfo.sourceGuids, 3, ((function(_this) {
        return function(guid, done) {
          var source;
          source = Model.Source.sources.get(guid);
          if (!source) {
            console.error(source, guid);
            done();
            return;
          }
          return source.markAllAsRead(function(err) {
            if (err) {
              console.error(err);
              done();
              return;
            }
            source.unreadCount = 0;
            return done();
          });
        };
      })(this)), (function(_this) {
        return function(err) {
          console.log("complete mark all as read");
          return _this.load(_this.archiveInfo);
        };
      })(this));
    };

    ArchiveList.prototype.onClickToggleViewAll = function() {
      if (this.viewRead) {
        this.viewRead = false;
        this.load(this.archiveInfo);
      } else {
        this.viewRead = true;
        this.load(this.archiveInfo);
      }
      return this.render();
    };

    ArchiveList.prototype.onClickPreviewMode = function() {
      var previewMode;
      if (!this.archiveInfo) {
        return;
      }
      previewMode = App.userConfig.get("previewModeFor" + this.archiveInfo.name, false);
      App.userConfig.set("previewModeFor" + this.archiveInfo.name, !previewMode);
      return this.applyPreviewMode();
    };

    return ArchiveList;

  })(Leaf.Widget);

  tm.use("sourceView/archiveListItem");

  ArchiveListItem = (function(_super) {
    __extends(ArchiveListItem, _super);

    function ArchiveListItem(archive) {
      ArchiveListItem.__super__.constructor.call(this, App.templates.sourceView.archiveListItem);
      this.setArchive(archive);
      this.isShown = true;
      this.node$.find("img").on("load", (function(_this) {
        return function() {
          _this.sizeDirty = true;
          return _this.emit("resize");
        };
      })(this));
    }

    ArchiveListItem.prototype.onClickContent = function() {
      if (this.lockRead) {
        return;
      }
      this.markAsRead();
      return true;
    };

    ArchiveListItem.prototype.onClickTitle = function(e) {
      window.open(this.archive.originalLink);
      e.stopPropagation();
      e.preventDefault();
      e.stopImmediatePropagation();
      return false;
    };

    ArchiveListItem.prototype.onClickHeader = function(e) {
      this.node$.toggleClass("collapse");
      this.resize();
      return this.markAsRead();
    };

    ArchiveListItem.prototype.resize = function() {
      this.size = {
        width: this.node$.outerWidth(),
        height: this.node$.outerHeight()
      };
      this.sizeDirty = false;
      return this.node.setAttribute("size-info", JSON.stringify(this.size));
    };

    ArchiveListItem.prototype.setPosition = function(pos) {
      this.position = pos;
      return this.node$.css({
        top: pos
      });
    };

    ArchiveListItem.prototype.getPosition = function() {
      return this.position;
    };

    ArchiveListItem.prototype.getNextPosition = function() {
      if (this.size == null) {
        this.size = {};
      }
      return this.position + (this.size.height || 0);
    };

    ArchiveListItem.prototype.show = function() {
      if (this.isShown) {
        return;
      }
      this.isShown = true;
      return this.node$.show();
    };

    ArchiveListItem.prototype.hide = function() {
      if (!this.isShown) {
        return;
      }
      this.isShown = false;
      return this.node$.hide();
    };

    ArchiveListItem.prototype.markAsRead = function() {
      if (this.lockRead) {
        return;
      }
      if (this.isMarking) {
        return;
      }
      if (this.archive.hasRead) {
        return;
      }
      this.isMarking = true;
      return this.archive.markAsRead((function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
            return;
          }
          return _this.isMarking = false;
        };
      })(this));
    };

    ArchiveListItem.prototype.onClickKeepUnread = function(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      return this.onClickMarkAsUnread();
    };

    ArchiveListItem.prototype.render = function() {
      ArchiveListItem.__super__.render.call(this);
      if (this.lockRead) {
        this.node$.addClass("lock-read");
      } else {
        this.node$.removeClass("lock-read");
      }
      if (this.archive.hasRead) {
        return this.node$.addClass("read");
      } else {
        return this.node$.removeClass("read");
      }
    };

    ArchiveListItem.prototype.onClickMarkAsUnread = function() {
      this.lockRead = true;
      this.emit("change");
      if (this.archive.hasRead === false) {
        this.render();
        return;
      }
      console.debug("mark as unread");
      return this.archive.markAsUnread((function(_this) {
        return function(err) {
          if (err) {
            console.error(err);
            return;
          }
          console.debug("mark as unread done->render");
          console.debug(_this.lockRead, _this.archive.hasRead, "is the state");
          return _this.render();
        };
      })(this));
    };

    return ArchiveListItem;

  })(ArchiveDisplayer);

  tm.use("sourceView/archiveListController");

  ArchiveListController = (function(_super) {
    __extends(ArchiveListController, _super);

    function ArchiveListController(archiveList) {
      ArchiveListController.__super__.constructor.call(this, App.templates.sourceView.archiveListController);
      this.archiveList = archiveList;
      this.formatter = new ArchiveListFormatter(this.archiveList, this);
      this.swipeChecker = new SwipeChecker(this.node);
      this.swipeChecker.on("swipeleft", (function(_this) {
        return function(e) {
          return _this.node$.addClass("left-mode");
        };
      })(this));
      this.swipeChecker.on("swiperight", (function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return _this.node$.removeClass("left-mode");
        };
      })(this));
      this.archiveList.scrollChecker.listenBy(this, "scroll", (function(_this) {
        return function() {
          _this.formatter.updateFocus();
          _this.formatter.reflowAfter(_this.formatter.getFirstVisible());
          _this.checkLoadMore();
          if (!_this.archiveList.disableMarkAsRead) {
            return _this.markAsReadBeforeFocus();
          }
        };
      })(this));
      this.archiveBuffer = new BufferedEndlessArchiveLoader();
      this.formatter.on("focus", (function(_this) {
        return function(focus) {
          if (focus === _this.currentFocus) {
            return;
          }
          if (_this.currentFocus) {
            _this.currentFocus.blur();
            _this.currentFocus.stopListenBy(_this);
          }
          _this.currentFocus = focus;
          _this.currentFocus.listenBy(_this, "change", function() {
            return _this.render();
          });
          _this.currentFocus.focus();
          return _this.render();
        };
      })(this));
    }

    ArchiveListController.prototype.load = function(info) {
      this.isLoading = false;
      this.archiveInfo = info;
      this.archiveBuffer.reset();
      this.archiveBuffer.init({
        query: {
          sourceGuids: this.archiveInfo.sourceGuids
        },
        sort: this.archiveList.sort,
        viewRead: this.archiveList.viewRead
      });
      this.archiveList.archiveListItems.length = 0;
      return this.checkLoadMore();
    };

    ArchiveListController.prototype.checkLoadMore = function() {
      var last;
      if (this.isLoading) {
        return;
      }
      if (this.archiveBuffer.isDrain()) {
        return;
      }
      last = this.formatter.getLastVisible();
      if (last && this.formatter.length() - last.index > 2) {
        this.formatter.updateFocus();
        return;
      }
      this.isLoading = true;
      return this.archiveBuffer.oneMore((function(_this) {
        return function(err, item) {
          console.log("one more");
          _this.isLoading = false;
          if (err) {
            console.error(err);
            return;
          }
          if (!item) {
            _this.archiveBuffer.isDrain();
            return;
          }
          _this.formatter.appendArchive(item);
          return _this.checkLoadMore();
        };
      })(this));
    };

    ArchiveListController.prototype.markAsReadBeforeFocus = function() {
      var index, item, _i, _ref, _results;
      if (!this.currentFocus) {
        return;
      }
      _results = [];
      for (index = _i = 0, _ref = this.currentFocus.index; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        item = this.formatter.at(index);
        if (item && !item.archive.hasRead) {
          _results.push(item.markAsRead());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ArchiveListController.prototype.scrollToItem = function(item) {
      var bottom, fix, fixLine, padding, top, _ref;
      if (!item) {
        return;
      }
      _ref = this.formatter.getViewPort(), top = _ref[0], bottom = _ref[1];
      fixLine = this.formatter.getFixLine();
      padding = 5;
      if (item.size.height > fixLine - top) {
        return this.archiveList.UI.containerWrapper.scrollTop = item.position - padding;
      } else {
        console.log("fix");
        fix = (fixLine - top) - item.size.height / 2;
        return this.archiveList.UI.containerWrapper.scrollTop = item.position - fix - padding;
      }
    };

    ArchiveListController.prototype.scrollTo = function(top) {
      return this.archiveList.UI.containerWrapper.scrollTop = top;
    };

    ArchiveListController.prototype.getScrollTop = function() {
      return this.archiveList.UI.containerWrapper.scrollTop;
    };

    ArchiveListController.prototype.onClickExpandOption = function() {
      if (this.showOptionFlag == null) {
        this.showOptionFlag = new Flag().attach(this.VM, "showOption").unset();
      }
      return this.showOptionFlag.toggle();
    };

    ArchiveListController.prototype.render = function() {
      var archive;
      if (!this.currentFocus) {
        return;
      }
      archive = this.currentFocus.archive;
      this.Data.keepUnread = this.currentFocus.lockRead;
      this.Data.liked = archive.like;
      return this.Data.shared = archive.share;
    };

    ArchiveListController.prototype.onClickPrevious = function() {
      var adjust, bottom, focus, target, top, _ref;
      focus = this.currentFocus;
      adjust = 5;
      _ref = this.formatter.getViewPort(), top = _ref[0], bottom = _ref[1];
      if (focus.getPosition() > top) {
        target = this.formatter.at(focus.index - 1);
      } else {
        target = focus;
      }
      if (target) {
        return this.scrollToItem(target);
      }
    };

    ArchiveListController.prototype.onClickNext = function() {
      var next;
      if (this.currentFocus === this.formatter.last()) {
        this.archiveList.UI.containerWrapper.scrollTop = this.currentFocus.node.offsetTop + this.getFocus().node.offsetHeight;
        return;
      }
      next = this.formatter.at(this.currentFocus.index + 1);
      if (next) {
        console.log("scroll to", next.index, "from", this.currentFocus.index);
        return this.scrollToItem(next);
      }
    };

    ArchiveListController.prototype.onClickGoBottom = function() {
      var bottom, forward, height, top;
      if (!this.currentFocus) {
        return;
      }
      this.scrollToItem(this.currentFocus);
      bottom = this.currentFocus.node.offsetTop + this.currentFocus.node.offsetHeight;
      top = this.archiveList.UI.containerWrapper.scrollTop;
      height = this.archiveList.UI.containerWrapper$.height();
      if (bottom > top + height) {
        forward = bottom - (top + height);
        return this.archiveList.UI.containerWrapper.scrollTop += forward;
      }
    };

    ArchiveListController.prototype.onClickLike = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickLike();
      }
    };

    ArchiveListController.prototype.onClickShare = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickShare();
      }
    };

    ArchiveListController.prototype.onClickKeepUnread = function() {
      if (this.currentFocus) {
        return this.currentFocus.onClickKeepUnread();
      }
    };

    return ArchiveListController;

  })(Leaf.Widget);

  ArchiveListFormatter = (function(_super) {
    __extends(ArchiveListFormatter, _super);

    function ArchiveListFormatter(context, controller) {
      this.context = context;
      this.controller = controller;
      ArchiveListFormatter.__super__.constructor.call(this);
      this.context.archiveListItems.listenBy(this, "child/add", (function(_this) {
        return function(child) {
          return child.listenBy(_this, "resize", function() {
            if (child.isShown) {
              child.resize();
              return _this.reflowAfter(child.index - 1);
            }
          });
        };
      })(this));
      this.context.archiveListItems.listenBy(this, "child/remove", (function(_this) {
        return function(child) {
          return child.stopListenBy(_this);
        };
      })(this));
    }

    ArchiveListFormatter.prototype.appendArchive = function(archive) {
      var bottom, item, prev, top, viewPort, _ref;
      item = new ArchiveListItem(archive);
      viewPort = this.getViewPort();
      item.index = this.context.archiveListItems.length;
      item.node$.css({
        width: "100%",
        position: "absolute",
        zIndex: item.index
      });
      prev = this.context.archiveListItems[item.index - 1];
      if (prev) {
        item.setPosition(prev.getNextPosition());
      } else {
        item.setPosition(0);
      }
      this.context.archiveListItems.push(item);
      item.resize();
      _ref = this.getViewPort(), top = _ref[0], bottom = _ref[1];
      if (item.getPosition() > bottom) {
        return item.hide();
      }
    };

    ArchiveListFormatter.prototype.length = function() {
      return this.context.archiveListItems.length;
    };

    ArchiveListFormatter.prototype.at = function(index) {
      return this.context.archiveListItems[index] || null;
    };

    ArchiveListFormatter.prototype.last = function() {
      return this.context.archiveListItems[this.context.archiveListItems.length - 1] || null;
    };

    ArchiveListFormatter.prototype.getFirstVisible = function() {
      var bottom, item, top, _i, _len, _ref, _ref1;
      _ref = this.getViewPort(), top = _ref[0], bottom = _ref[1];
      _ref1 = this.context.archiveListItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item.getPosition() + item.size.height > top) {
          return item;
        }
      }
      return null;
    };

    ArchiveListFormatter.prototype.getLastVisible = function() {
      var bottom, hasVisible, item, top, visible, _i, _len, _ref, _ref1;
      _ref = this.getViewPort(), top = _ref[0], bottom = _ref[1];
      hasVisible = false;
      _ref1 = this.context.archiveListItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item.getPosition() < bottom) {
          visible = item;
          hasVisible = true;
        } else if (hasVisible) {
          return item;
        }
      }
      return null;
    };

    ArchiveListFormatter.prototype.updateFocus = function() {
      var foot, head, index, item, _i, _len, _ref;
      this.currentFocus = null;
      _ref = this.context.archiveListItems;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        head = item.getPosition();
        foot = head + item.size.height;
        if (foot > this.getFixLine()) {
          this.currentFocus = item;
          break;
        }
      }
      if (this.currentFocus == null) {
        this.currentFocus = this.last();
      }
      this.emit("focus", this.currentFocus);
      return this.currentFocus;
    };

    ArchiveListFormatter.prototype.getFixLine = function() {
      var bottom, fix, fixMax, half, top, _ref;
      _ref = this.getViewPort(), top = _ref[0], bottom = _ref[1];
      half = (bottom - top) / 2;
      top = this.controller.getScrollTop();
      fix = top * 0.7;
      fixMax = half - 100;
      return top + Math.min(fixMax, fix);
    };

    ArchiveListFormatter.prototype.getPreviousItem = function() {
      return this.at(this.currentFocus.index - 1);
    };

    ArchiveListFormatter.prototype.getNextItem = function() {
      return this.at(this.currentFocus.index + 1);
    };

    ArchiveListFormatter.prototype.reflowAfter = function(item) {
      var after, bottom, current, dim, firstVisible, height, index, max, prev, top, _i, _ref, _ref1;
      this.saveRelativeLocation();
      firstVisible = null;
      if (item instanceof ArchiveListItem) {
        after = item.index;
      } else if (typeof item === "number") {
        after = item;
      } else {
        after = 0;
      }
      if (after < 0) {
        after = 0;
      }
      _ref = this.getViewPort(), top = _ref[0], bottom = _ref[1];
      height = bottom - top;
      for (index = _i = after, _ref1 = this.context.archiveListItems.length; after <= _ref1 ? _i < _ref1 : _i > _ref1; index = after <= _ref1 ? ++_i : --_i) {
        prev = this.at(index - 1);
        current = this.at(index);
        if (prev) {
          current.setPosition(prev.getNextPosition());
        } else {
          current.setPosition(0);
        }
        if (current.sizeDirty) {
          if (current.isShown) {
            current.resize();
          } else {
            current.show();
            current.resize();
            current.hide();
          }
        }
        dim = [current.getPosition, current.getPosition() + current.size.height];
        if (this.inViewPort(current, {
          expand: height
        })) {
          if (!current.isShown) {
            current.show();
            if (firstVisible == null) {
              firstVisible = current;
            }
          }
        } else if (current.isShown) {
          current.hide();
        }
      }
      if (this.last()) {
        max = this.last().size.height + this.last().getPosition() + 200;
        this.context.UI.container$.css({
          minHeight: max
        });
      }
      this.restoreRelativeLocation();
      if (firstVisible) {
        return this.reflowAfter(firstVisible);
      }
    };

    ArchiveListFormatter.prototype.saveRelativeLocation = function() {
      var item, offset;
      item = this.updateFocus();
      offset = this.controller.getScrollTop() - item.getPosition();
      return this._relativeLocation = {
        offset: offset,
        item: item
      };
    };

    ArchiveListFormatter.prototype.restoreRelativeLocation = function() {
      var dest;
      if (!this._relativeLocation) {
        return;
      }
      dest = this._relativeLocation.item.getPosition() + this._relativeLocation.offset;
      return this.controller.scrollTo(dest);
    };

    ArchiveListFormatter.prototype.getViewPort = function() {
      var height, top;
      height = this.context.UI.containerWrapper$.height();
      top = this.context.UI.containerWrapper.scrollTop;
      return [top, top + height];
    };

    ArchiveListFormatter.prototype.inViewPort = function(item, option) {
      var bottom, expand, foot, head, top, _ref, _ref1;
      if (option == null) {
        option = {};
      }
      _ref = [item.getPosition(), item.getPosition() + item.size.height], head = _ref[0], foot = _ref[1];
      _ref1 = this.getViewPort(), top = _ref1[0], bottom = _ref1[1];
      if (option.expand > 0) {
        expand = option.expand;
        top -= expand;
        bottom += expand;
      }
      return head < bottom && foot > top;
    };

    return ArchiveListFormatter;

  })(Leaf.EventEmitter);

  SourceUpdateChecker = (function(_super) {
    __extends(SourceUpdateChecker, _super);

    function SourceUpdateChecker(archiveList) {
      this.archiveList = archiveList;
      SourceUpdateChecker.__super__.constructor.call(this, this.archiveList.UI.refreshHint);
      this.init();
    }

    SourceUpdateChecker.prototype.onClickRefreshHint = function() {
      return this.load(this.archiveInfo);
    };

    SourceUpdateChecker.prototype.onClickHideRefreshHint = function(e) {
      if (e) {
        e.capture();
      }
      return this.hideUpdateHint();
    };

    SourceUpdateChecker.prototype.init = function() {
      this.archiveList.on("load", (function(_this) {
        return function() {
          return _this.hideUpdateHint();
        };
      })(this));
      return App.modelSyncManager.on("archive", (function(_this) {
        return function(archive) {
          var _ref;
          if (_this.archiveList.archiveInfo && (_ref = archive.sourceGuid, __indexOf.call(_this.archiveList.archiveInfo.sourceGuids, _ref) >= 0)) {
            return _this.showUpdateHint();
          }
        };
      })(this));
    };

    SourceUpdateChecker.prototype.showUpdateHint = function() {
      if (this.refreshHintShowInterval == null) {
        this.refreshHintShowInterval = 1000 * 15;
      }
      this.archiveList.UI.refreshHint$.addClass("show");
      if (this._updateHintTimer) {
        this._updateHintTimer = null;
        clearTimeout(this._updateHintTimer);
      }
      return this._updateHintTimer = setTimeout(this.hideUpdateHint.bind(this), this.refreshHintShowInterval);
    };

    SourceUpdateChecker.prototype.hideUpdateHint = function() {
      clearTimeout(this._updateHintTimer);
      this._updateHintTimer = null;
      return this.UI.refreshHint$.removeClass("show");
    };

    return SourceUpdateChecker;

  })(Leaf.Widget);

  module.exports = ArchiveList;

}).call(this);
