// Generated by CoffeeScript 1.7.1
(function() {
  var SourceDetail, SourceStatistic,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SourceDetail = (function(_super) {
    __extends(SourceDetail, _super);

    function SourceDetail() {
      this.sourceStatistic = new SourceStatistic();
      SourceDetail.__super__.constructor.call(this, App.templates["source-detail"]);
      this.render = this.render.bind(this);
      this.appendTo(document.body);
    }

    SourceDetail.prototype.setSource = function(source) {
      if (this.source) {
        this.source.removeListener("change", this.render);
      }
      this.source = source;
      this.source.on("change", this.render);
      this.render();
      return this.source.queryStatisticInfo();
    };

    SourceDetail.prototype.render = function() {
      var item, perweek, result, _i, _len, _ref;
      this.UI.name$.text(this.source.name);
      this.UI.uri$.text(this.source.uri);
      this.UI.type$.text(this.source.collectorName);
      this.UI.archives$.text("" + this.source.unreadCount + "/" + (this.source.totalArchive || '?'));
      this.onClickCancelDescriptionButton();
      if (this.source.statistic) {
        this.sourceStatistic.load(this.source.statistic);
        result = 0;
        _ref = this.source.statistic;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          result += item;
        }
        perweek = result / this.source.statistic.length * 7;
        if (perweek < 1) {
          perweek = perweek.toPrecision(2);
        } else {
          perweek = parseInt(Math.ceil(perweek));
        }
        console.debug("???");
        return this.UI.frequency$.text("" + perweek + " post per week");
      }
    };

    SourceDetail.prototype.show = function() {
      if (SourceDetail.currentDetail) {
        SourceDetail.currentDetail.hide();
      }
      SourceDetail.currentDetail = this;
      this.left = ($(document.body).width() - this.node$.width()) / 2;
      this.top = ($(document.body).height() - this.node$.height()) / 2;
      this.node$.css({
        top: this.top,
        left: this.left
      });
      this.node$.show();
      this.sourceStatistic.resize();
      return this.render();
    };

    SourceDetail.prototype.hide = function() {
      return this.node$.hide();
    };

    SourceDetail.prototype.onClickClose = function() {
      return this.hide();
    };

    SourceDetail.prototype.onClickNameEditButton = function() {
      var name;
      name = prompt("would you like to rename " + this.source.title, this.source.title).trim();
      if (!name) {
        return;
      }
      return this.source.rename(name);
    };

    SourceDetail.prototype.onClickDescriptionEditButton = function() {
      this.UI.description$.hide();
      this.UI.descriptionEditor$.show();
      return this.UI.descriptionInput$.val(this.source.description || "");
    };

    SourceDetail.prototype.onClickSubmitDescriptionButton = function() {
      var value;
      value = this.UI.descriptionInput$.val();
      return this.source.describe(value, function() {
        this.onClickCancelDescriptionButton();
        this.UI.descriptionEditor$.hide();
        return this.UI.description$.show();
      });
    };

    SourceDetail.prototype.onClickCancelDescriptionButton = function() {
      this.UI.descriptionEditor$.hide();
      return this.UI.description$.show();
    };

    return SourceDetail;

  })(Leaf.Widget);

  SourceStatistic = (function(_super) {
    __extends(SourceStatistic, _super);

    function SourceStatistic() {
      SourceStatistic.__super__.constructor.call(this, "<canvas></canvas>");
      this.context = this.node.getContext("2d");
    }

    SourceStatistic.prototype.resize = function() {
      this.node.width = this.node$.width();
      this.node.height = this.node$.height();
      this.width = this.node.width;
      return this.height = this.node.height;
    };

    SourceStatistic.prototype.load = function(info) {
      this.info = info;
      return this.render();
    };

    SourceStatistic.prototype.render = function() {
      var count, max, maxHeight, offset, step, _i, _len, _ref, _results;
      if (!this.info) {
        return;
      }
      console.log("start render", this.info, this.width, this.height);
      max = Math.max.apply(Math, this.info);
      maxHeight = this.height * (max / (max + 5));
      this.context.clearRect(0, 0, this.width, this.height);
      this.color = "rgba(0,0,0,0.5)";
      step = this.width / (this.info.length + 1);
      offset = parseInt(step / 2);
      this.context.fillStyle = this.color;
      _ref = this.info;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        count = _ref[_i];
        console.log("render with info", count);
        this.context.beginPath();
        this.context.rect(parseInt(offset), this.height - parseInt(count * maxHeight / max), parseInt(step / 2), parseInt(count * maxHeight / max));
        this.context.fill();
        this.context.closePath();
        _results.push(offset += step);
      }
      return _results;
    };

    return SourceStatistic;

  })(Leaf.Widget);

  window.SourceDetail = SourceDetail;

}).call(this);
