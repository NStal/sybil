// Generated by CoffeeScript 1.8.0
(function() {
  var App, Popup, SourceDetail, SourceStatistic, moment,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("app");

  Popup = require("widget/popup");

  moment = require("/lib/moment");

  SourceDetail = (function(_super) {
    __extends(SourceDetail, _super);

    function SourceDetail() {
      this.sourceStatistic = new SourceStatistic();
      SourceDetail.__super__.constructor.call(this, App.templates["source-detail"]);
    }

    SourceDetail.prototype.setSource = function(source) {
      if (this.source) {
        this.source.stopListenBy(this);
      }
      this.source = source;
      this.source.listenBy(this, "change", this.render);
      this.reset();
      this.render();
      return this.source.queryStatisticInfo();
    };

    SourceDetail.prototype.reset = function() {
      return this.renderData.refreshStyle = "";
    };

    SourceDetail.prototype.render = function() {
      var item, perweek, result, _i, _len, _ref;
      this.renderData = {
        "errorDescription": this.source.lastError && JSON.stringify(this.source.lastError) || this.source.lastErrorDescription || "None",
        "lastUpdate": this.source.lastUpdate && moment(this.source.lastUpdate).fromNow() || "Never",
        "lastFetch": this.source.lastFetch && moment(this.source.lastFetch).fromNow() || "Never",
        "fetchInterval": this.source.nextFetchInterval && moment.duration(this.source.nextFetchInterval).humanize() || "Never"
      };
      this.UI.name$.text(this.source.name);
      this.UI.uri$.text(this.source.uri);
      this.UI.uri$.attr("href", this.source.uri);
      this.UI.type$.text(this.source.collectorName);
      this.UI.archives$.text("" + this.source.unreadCount + "/" + (this.source.totalArchive || '?'));
      this.UI.descriptionContent$.text(this.source.description || "none");
      this.onClickCancelDescriptionButton();
      if (App.userConfig.get("enableResourceProxy/" + this.source.guid)) {
        this.UI.enableResourceProxy.checked = true;
      } else {
        this.UI.enableResourceProxy.checked = false;
      }
      if (this.source.statistic) {
        this.sourceStatistic.load(this.source.statistic);
        result = 0;
        _ref = this.source.statistic;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          result += item;
        }
        perweek = result / this.source.statistic.length * 7;
        if (perweek < 1) {
          perweek = perweek.toPrecision(2);
        } else {
          perweek = parseInt(Math.ceil(perweek));
        }
        return this.UI.frequency$.text("" + perweek + " post per week");
      }
    };

    SourceDetail.prototype.onClickEnableResourceProxy = function() {
      if (App.userConfig.get("enableResourceProxy/" + this.source.guid)) {
        this.UI.enableResourceProxy.checked = false;
        return App.userConfig.set("enableResourceProxy/" + this.source.guid, false);
      } else {
        this.UI.enableResourceProxy.checked = true;
        return App.userConfig.set("enableResourceProxy/" + this.source.guid, true);
      }
    };

    SourceDetail.prototype.show = function() {
      if (SourceDetail.currentDetail) {
        SourceDetail.currentDetail.hide();
      }
      SourceDetail.__super__.show.call(this);
      SourceDetail.currentDetail = this;
      this.left = ($(document.body).width() - this.node$.width()) / 2;
      this.top = ($(document.body).height() - this.node$.height()) / 2;
      this.node$.css({
        top: this.top,
        left: this.left
      });
      this.node$.show();
      this.sourceStatistic.resize();
      return this.render();
    };

    SourceDetail.prototype.hide = function() {
      SourceDetail.__super__.hide.call(this);
      return this.node$.hide();
    };

    SourceDetail.prototype.onClickClose = function() {
      return this.hide();
    };

    SourceDetail.prototype.onClickForceUpdateButton = function() {
      var source;
      source = this.source;
      console.debug("source update");
      this.renderData.refreshStyle = "fa-spin";
      return source.forceUpdate((function(_this) {
        return function(err) {
          console.debug("source update done hehe?", err, "??");
          _this.renderData.refreshStyle = "";
          if (source !== _this.source) {
            return;
          }
          if (err) {
            _this.source.lastError = err;
            return _this.source.lastErrorDescription = err.message;
          } else {
            App.toast("refreshed");
          }
        };
      })(this));
    };

    SourceDetail.prototype.onClickNameEditButton = function() {
      var name;
      name = prompt("would you like to rename " + this.source.name, this.source.name).trim();
      if (!name) {
        return;
      }
      return this.source.rename(name);
    };

    SourceDetail.prototype.onClickDescriptionEditButton = function() {
      this.UI.description$.hide();
      this.UI.descriptionEditor$.show();
      return this.UI.descriptionInput$.val(this.source.description || "");
    };

    SourceDetail.prototype.onClickSubmitDescriptionButton = function() {
      var value;
      value = this.UI.descriptionInput$.val();
      return this.source.describe(value, (function(_this) {
        return function() {
          _this.onClickCancelDescriptionButton();
          _this.UI.descriptionEditor$.hide();
          return _this.UI.description$.show();
        };
      })(this));
    };

    SourceDetail.prototype.onClickCancelDescriptionButton = function() {
      this.UI.descriptionEditor$.hide();
      return this.UI.description$.show();
    };

    return SourceDetail;

  })(Popup);

  SourceStatistic = (function(_super) {
    __extends(SourceStatistic, _super);

    function SourceStatistic() {
      SourceStatistic.__super__.constructor.call(this, "<canvas></canvas>");
      this.context = this.node.getContext("2d");
    }

    SourceStatistic.prototype.resize = function() {
      this.node.width = this.node$.width();
      this.node.height = this.node$.height();
      this.width = this.node.width;
      return this.height = this.node.height;
    };

    SourceStatistic.prototype.load = function(info) {
      this.info = info;
      return this.render();
    };

    SourceStatistic.prototype.render = function() {
      var count, max, maxHeight, offset, step, _i, _len, _ref, _results;
      if (!this.info) {
        return;
      }
      max = Math.max.apply(Math, this.info);
      maxHeight = this.height * (max / (max + 5));
      this.context.clearRect(0, 0, this.width, this.height);
      this.color = "rgba(255,255,255,0.8)";
      step = this.width / (this.info.length + 1);
      offset = parseInt(step / 2);
      this.context.fillStyle = "#d9d9d9";
      _ref = this.info;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        count = _ref[_i];
        this.context.beginPath();
        this.context.rect(parseInt(offset), this.height - parseInt(count * maxHeight / max), parseInt(step / 2), parseInt(count * maxHeight / max));
        this.context.fill();
        this.context.closePath();
        _results.push(offset += step);
      }
      return _results;
    };

    return SourceStatistic;

  })(Leaf.Widget);

  module.exports = SourceDetail;

}).call(this);
