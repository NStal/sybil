// Generated by CoffeeScript 1.6.3
(function() {
  var MessageCenter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MessageCenter = (function(_super) {
    __extends(MessageCenter, _super);

    function MessageCenter() {
      MessageCenter.__super__.constructor.call(this);
      this.idPool = 1000;
      this.invokeWaiters = [];
      this.apis = [];
    }

    MessageCenter.prototype.getInvokeId = function() {
      return this.idPool++;
    };

    MessageCenter.prototype.registerApi = function(name, handler) {
      var api, _i, _len, _ref;
      if (!handler) {
        throw "need handler to work";
      }
      _ref = this.apis;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        api = _ref[_i];
        if (api.name === name) {
          throw new Eror("duplicated api name " + name);
        }
      }
      return this.apis.push({
        name: name,
        handler: handler
      });
    };

    MessageCenter.prototype.setConnection = function(connection) {
      var _this = this;
      this.connection = connection;
      return this.connection.on("message", function(message) {
        if (_this.connection !== connection) {
          return;
        }
        return _this.handleMessage(message);
      });
    };

    MessageCenter.prototype.unsetConnection = function() {
      return this.connection = null;
    };

    MessageCenter.prototype.response = function(id, err, data) {
      if (!this.connection) {
        return;
      }
      return this.connection.send(JSON.stringify({
        id: id,
        type: "response",
        data: data,
        error: err
      }));
    };

    MessageCenter.prototype.invoke = function(name, data, callback) {
      var req;
      callback = callback || function() {
        return true;
      };
      if (!this.connection) {
        callback(new Error("connect fail"));
        return;
      }
      req = {
        type: "invoke",
        id: this.getInvokeId(),
        name: name,
        data: data
      };
      this.connection.send(JSON.stringify(req));
      return this.invokeWaiters.push({
        request: req,
        id: req.id,
        callback: callback,
        date: new Date
      });
    };

    MessageCenter.prototype.fireEvent = function(name, data) {
      if (!this.connection) {
        return false;
      }
      return this.connection.send(JSON.stringify({
        type: "event",
        name: name,
        data: data
      }));
    };

    MessageCenter.prototype.handleMessage = function(message) {
      var e, info, _ref;
      try {
        info = JSON.parse(message);
      } catch (_error) {
        e = _error;
        throw "invalid message " + message;
      }
      if (!info.type || ((_ref = info.type) !== "invoke" && _ref !== "event" && _ref !== "response")) {
        throw "invalid message " + message;
        return;
      }
      if (info.type === "response") {
        return this.handleResponse(info);
      } else if (info.type === "invoke") {
        return this.handleInvoke(info);
      } else {
        return this.handleEvent(info);
      }
    };

    MessageCenter.prototype.handleEvent = function(info) {
      if (!info.name) {
        throw "invalid message " + (JSON.stringify(message));
      }
      return this.emit("event/" + info.name, info.data);
    };

    MessageCenter.prototype.handleResponse = function(info) {
        console.log("handle resp",info)
      var target, waiter, _i, _len, _ref;
      if (!info.id) {
        throw "invalid message " + (JSON.stringify(info));
      }
      target = null;
      _ref = this.invokeWaiters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        waiter = _ref[_i];
        if (waiter.id === info.id) {
          target = waiter;
          break;
        }
      }
      if (!target) {
        throw "unmatched response " + (JSON.stringify(message));
      }
      return target.callback(info.error, info.data);
    };

    MessageCenter.prototype.handleInvoke = function(info) {
      var api, target, _i, _len, _ref;
      if (!info.id || !info.name) {
        throw "invalid message " + (JSON.stringify(message));
      }
      target = null;
      _ref = this.apis;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        api = _ref[_i];
        if (api.name === info.name) {
          target = api;
          break;
        }
      }
      if (!target) {
        this.response(info.id, "not found");
        return;
      }
      return target.handler(info.data, function(err, data) {
        return this.response(info.id, err, data);
      });
    };

    return MessageCenter;

  })(Leaf.EventEmitter);

  window.MessageCenter = MessageCenter;

}).call(this);
