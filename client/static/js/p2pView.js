// Generated by CoffeeScript 1.7.1
(function() {
  var InfoDisplayer, P2pArchiveListItem, P2pFriendInfoDisplayer, P2pFriendListItem, P2pList, P2pNodeInfoDisplayer, P2pNodeListItem, P2pView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  P2pView = (function(_super) {
    __extends(P2pView, _super);

    function P2pView() {
      console.debug("@#");
      this.p2pList = new P2pList();
      this.p2pNodeInfoDisplayer = new P2pNodeInfoDisplayer();
      this.p2pFriendInfoDisplayer = new P2pFriendInfoDisplayer();
      this.p2pNodeInfoDisplayer.hide();
      this.p2pFriendInfoDisplayer.hide();
      P2pView.__super__.constructor.call(this, $(".p2p-view")[0], "p2p view");
      this.p2pList.on("select", (function(_this) {
        return function(node) {
          if (node instanceof Model.P2pNode) {
            _this.p2pNodeInfoDisplayer.setNode(node);
            _this.p2pNodeInfoDisplayer.show();
            return _this.p2pFriendInfoDisplayer.hide();
          } else if (node instanceof Model.Friend) {
            _this.p2pFriendInfoDisplayer.setNode(node);
            _this.p2pNodeInfoDisplayer.hide();
            return _this.p2pFriendInfoDisplayer.show();
          }
        };
      })(this));
    }

    return P2pView;

  })(View);

  P2pList = (function(_super) {
    __extends(P2pList, _super);

    function P2pList() {
      P2pList.__super__.constructor.call(this, App.templates["p2p-list"]);
      this.friendList = Leaf.Widget.makeList(this.UI.friendList);
      this.nodeList = Leaf.Widget.makeList(this.UI.nodeList);
      Model.on("node/add", (function(_this) {
        return function(node) {
          return _this.nodeList.push(new P2pNodeListItem(node));
        };
      })(this));
      Model.on("friend/add", (function(_this) {
        return function(friend) {
          return _this.friendList.push(new P2pFriendListItem(friend));
        };
      })(this));
      this.friendList.on("child/add", (function(_this) {
        return function(friend) {
          return _this.attachFriend(friend);
        };
      })(this));
      this.nodeList.on("child/add", (function(_this) {
        return function(node) {
          return _this.attachNode(node);
        };
      })(this));
    }

    P2pList.prototype.attachFriend = function(friend) {
      friend.on("select", (function(_this) {
        return function() {
          if (_this.currentSelect) {
            _this.currentSelect.node$.removeClass("select");
          }
          _this.currentSelect = friend;
          _this.currentSelect.node$.addClass("select");
          return _this.emit("select", friend.friend);
        };
      })(this));
      return friend.on("remove", (function(_this) {
        return function() {
          return _this.friendList.removeItem(friend);
        };
      })(this));
    };

    P2pList.prototype.attachNode = function(node) {
      node.on("select", (function(_this) {
        return function() {
          if (_this.currentSelect) {
            _this.currentSelect.node$.removeClass("select");
          }
          _this.currentSelect = node;
          _this.currentSelect.node$.addClass("select");
          return _this.emit("select", node.p2pNode);
        };
      })(this));
      return node.on("remove", (function(_this) {
        return function() {
          return _this.nodeList.removeItem(node);
        };
      })(this));
    };

    return P2pList;

  })(Leaf.Widget);

  P2pNodeListItem = (function(_super) {
    __extends(P2pNodeListItem, _super);

    function P2pNodeListItem(p2pNode) {
      this.p2pNode = p2pNode;
      P2pNodeListItem.__super__.constructor.call(this, App.templates["p2p-node-list-item"]);
      this.render();
      this.contextSelections = [
        {
          name: "add friend",
          callback: (function(_this) {
            return function() {
              if (!confirm("add as friend")) {
                return;
              }
              return Model.Friend.addFriendFromNode(_this.p2pNode);
            };
          })(this)
        }
      ];
      this.node.oncontextmenu = (function(_this) {
        return function(e) {
          e.preventDefault();
          return ContextMenu.showByEvent(e, _this.contextSelections);
        };
      })(this);
      this.p2pNode.on("delete", (function(_this) {
        return function() {
          return _this.emit("remove");
        };
      })(this));
    }

    P2pNodeListItem.prototype.onClickNode = function() {
      return this.emit("select", this.p2pNode);
    };

    P2pNodeListItem.prototype.render = function() {
      var avatar;
      avatar = "http://www.gravatar.com/avatar/" + this.p2pNode.profile.emailHash + "?s=18";
      if (this.UI.avatar$.attr("src") !== avatar) {
        this.UI.avatar$.attr("src", avatar);
      }
      return this.UI.nickname$.text(this.p2pNode.profile.nickname || "Unknown");
    };

    return P2pNodeListItem;

  })(Leaf.Widget);

  P2pFriendListItem = (function(_super) {
    __extends(P2pFriendListItem, _super);

    function P2pFriendListItem(friend) {
      this.friend = friend;
      P2pFriendListItem.__super__.constructor.call(this, App.templates["p2p-node-list-item"]);
      this.render();
      this.contextSelections = [
        {
          name: "remove friend",
          callback: (function(_this) {
            return function() {
              if (!confirm("remove the friend")) {
                return;
              }
              return _this.friend.remove(function(err) {
                if (err) {
                  console.error(err);
                  return;
                }
                return _this.emit("remove");
              });
            };
          })(this)
        }
      ];
      this.friend.on("online", this.render.bind(this));
      this.friend.on("offline", this.render.bind(this));
      this.node.oncontextmenu = (function(_this) {
        return function(e) {
          e.preventDefault();
          return ContextMenu.showByEvent(e, _this.contextSelections);
        };
      })(this);
    }

    P2pFriendListItem.prototype.onClickNode = function() {
      return this.emit("select", this.friend);
    };

    P2pFriendListItem.prototype.render = function() {
      var avatar;
      avatar = "http://www.gravatar.com/avatar/" + this.friend.emailHash + "?s=18";
      if (this.UI.avatar$.attr("src") !== avatar) {
        this.UI.avatar$.attr("src", avatar);
      }
      return this.UI.nickname$.text(this.friend.nickname || "Unknown");
    };

    return P2pFriendListItem;

  })(Leaf.Widget);

  InfoDisplayer = (function(_super) {
    __extends(InfoDisplayer, _super);

    function InfoDisplayer() {
      InfoDisplayer.__super__.constructor.call(this, App.templates["p2p-node-info-displayer"]);
      this.archiveList = Leaf.Widget.makeList(this.UI.archiveList);
      this.archiveOffset = 0;
      this.archiveCount = 0;
    }

    InfoDisplayer.prototype.setNode = function(node) {
      this.p2pNode = node;
      this.hash = node.keyHash || node.hash;
      this.render();
      this.archiveOffset = 0;
      this.archiveCount = 0;
      this.clearArchive();
      return this.updateNodeArchive();
    };

    InfoDisplayer.prototype.clearArchive = function() {
      return this.archiveList.length = 0;
    };

    InfoDisplayer.prototype.updateNodeArchive = function() {
      return Model.Archive.getByShareHashes({
        hashes: [this.hash],
        count: this.archiveCount,
        offset: this.archiveOffset
      }, (function(_this) {
        return function(err, archives) {
          var archive, _i, _len, _results;
          console.debug(err, archives);
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            console.debug(archive);
            _results.push(_this.archiveList.push(new P2pArchiveListItem(archive)));
          }
          return _results;
        };
      })(this));
    };

    InfoDisplayer.prototype.show = function() {
      return this.node$.show();
    };

    InfoDisplayer.prototype.hide = function() {
      return this.node$.hide();
    };

    return InfoDisplayer;

  })(Leaf.Widget);

  P2pNodeInfoDisplayer = (function(_super) {
    __extends(P2pNodeInfoDisplayer, _super);

    function P2pNodeInfoDisplayer() {
      P2pNodeInfoDisplayer.__super__.constructor.call(this);
    }

    P2pNodeInfoDisplayer.prototype.render = function() {
      return this.UI.publicKey$.text("public key:" + this.p2pNode.publicKey.replace(/---.*---/ig, ""));
    };

    return P2pNodeInfoDisplayer;

  })(InfoDisplayer);

  P2pFriendInfoDisplayer = (function(_super) {
    __extends(P2pFriendInfoDisplayer, _super);

    function P2pFriendInfoDisplayer() {
      P2pFriendInfoDisplayer.__super__.constructor.call(this);
    }

    P2pFriendInfoDisplayer.prototype.setNode = function(node) {
      P2pFriendInfoDisplayer.__super__.setNode.call(this, node);
      node.on("online", this.render.bind(this));
      return node.on("offline", this.render.bind(this));
    };

    P2pFriendInfoDisplayer.prototype.render = function() {
      var avatar;
      avatar = "http://www.gravatar.com/avatar/" + this.p2pNode.emailHash + "?s=72";
      if (this.UI.avatar$.attr("src") !== avatar) {
        this.UI.avatar$.attr("src", avatar);
      }
      this.UI.publicKey$.text("public key: " + this.p2pNode.publicKey.replace(/---.*---/ig, ""));
      this.UI.email$.text("email: " + this.p2pNode.email);
      this.UI.nickname$.text("nickname: " + this.p2pNode.nickname);
      console.log("rendering!");
      return this.UI.status$.text("status: " + (this.p2pNode.status || "offline"));
    };

    return P2pFriendInfoDisplayer;

  })(InfoDisplayer);

  P2pArchiveListItem = (function(_super) {
    __extends(P2pArchiveListItem, _super);

    function P2pArchiveListItem(archive) {
      this.archive = archive;
      P2pArchiveListItem.__super__.constructor.call(this, this.archive);
      this.setArchive(this.archive);
    }

    return P2pArchiveListItem;

  })(ArchiveListItem);

  window.P2pView = P2pView;

}).call(this);
