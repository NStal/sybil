// Generated by CoffeeScript 1.7.1
(function() {
  var CustomArchiveList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CustomArchiveList = (function(_super) {
    __extends(CustomArchiveList, _super);

    function CustomArchiveList() {
      CustomArchiveList.__super__.constructor.call(this, App.templates["custom-archive-list"]);
    }

    CustomArchiveList.prototype.setSelector = function(selector) {
      var item, _i, _len, _ref;
      this.node.scrollTop = 0;
      this.noMore = false;
      this.currentSelector = selector;
      this.UI.emptyHint$.show();
      this.UI.currentArchiveTitle$.text(selector.name);
      _ref = this.archiveListItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.remove();
      }
      this.archiveListItems.length = 0;
      return this.moreArchive();
    };

    CustomArchiveList.prototype.moreArchive = function() {
      var last;
      if (this.noMore) {
        return;
      }
      if (this.isLoadingMore) {
        return;
      }
      if (!this.currentSelector) {
        return;
      }
      this.isLoadingMore = true;
      last = this.archiveListItems[this.archiveListItems.length - 1];
      if (last) {
        this.offset = last.archive.guid;
      } else {
        this.offset = null;
      }
      console.log({
        query: this.currentSelector.toQuery(),
        viewRead: this.viewRead,
        sort: this.sort,
        offset: this.offset,
        count: this.count
      });
      return Archive.getByCustom({
        query: this.currentSelector.toQuery(),
        viewRead: this.viewRead,
        sort: this.sort,
        offset: this.offset,
        count: this.count
      }, (function(_this) {
        return function(err, archives) {
          var archive, archiveListItem, _i, _len, _results;
          console.log("here");
          _this.isLoadingMore = false;
          if (err || !(archives instanceof Array)) {
            console.error(err, archives, _this.currentSelector);
            console.error(err || "no archive!");
            console.trace();
            return;
          }
          if (archives.length === 0) {
            _this.onNoMore();
            return;
          }
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            archiveListItem = new ArchiveListItem(archive);
            _results.push(_this.appendQueue.push(archiveListItem));
          }
          return _results;
        };
      })(this));
    };

    return CustomArchiveList;

  })(ArchiveList);

  window.CustomArchiveList = CustomArchiveList;

}).call(this);
