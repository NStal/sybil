// Generated by CoffeeScript 1.7.1
(function() {
  var SearchList, SearchListItem, SearchView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SearchView = (function(_super) {
    __extends(SearchView, _super);

    function SearchView() {
      var checker;
      this.searchList = new SearchList();
      this.archiveDisplayer = new ArchiveDisplayer(App.templates["archive-displayer"]);
      this.archiveDisplayer.node$.hide();
      this.searchList.on("select", (function(_this) {
        return function(archive) {
          console.log("select", archive);
          _this.archiveDisplayer.setArchive(archive);
          _this.archiveDisplayer.node$.show();
          return _this.node$.addClass("show-displayer");
        };
      })(this));
      SearchView.__super__.constructor.call(this, $(".search-view")[0], "search view");
      checker = new SwipeChecker(this.node);
      checker.on("swiperight", (function(_this) {
        return function(ev) {
          return _this.node$.removeClass("show-displayer");
        };
      })(this));
      checker.on("swipeleft", (function(_this) {
        return function(ev) {
          return _this.node$.addClass("show-displayer");
        };
      })(this));
    }

    SearchView.prototype.show = function() {
      SearchView.__super__.show.call(this);
      return this.node$.removeClass("show-displayer");
    };

    return SearchView;

  })(View);

  SearchList = (function(_super) {
    __extends(SearchList, _super);

    function SearchList() {
      SearchList.__super__.constructor.call(this, App.templates["search-list"]);
      this.resultList = Leaf.Widget.makeList(this.UI.resultList);
      this.count = 30;
      this.offset = 0;
      this._queueTaskId = 0;
      this.UI.searchKeywordInput$.keydown((function(_this) {
        return function(e) {
          if (e.which === Leaf.Key.enter) {
            _this.onClickSearchButton();
            return false;
          }
        };
      })(this));
      this._searchId = 0;
      this._pushInterval = 10;
      this.appendQueue = async.queue(((function(_this) {
        return function(item, done) {
          var listItem;
          if (item.id !== _this._searchId) {
            done();
            return;
          }
          listItem = new SearchListItem(item.archive);
          listItem.onClickNode = function() {
            return _this.emit("select", listItem.archive);
          };
          listItem.onMouseoverNode = function() {
            return _this.emit("select", listItem.archive);
          };
          _this.resultList.push(listItem);
          return setTimeout(done, _this._pushInterval);
        };
      })(this)), 1);
      this.node.onscroll = (function(_this) {
        return function() {
          return _this.onScroll();
        };
      })(this);
      this._noMore = true;
      this.__defineSetter__("noMore", (function(_this) {
        return function(value) {
          if (value && value !== _this._noMore) {
            _this.UI.noMoreHint$.show();
          } else {
            _this.UI.noMoreHint$.hide();
          }
          return _this._noMore = value;
        };
      })(this));
      this.__defineGetter__("noMore", (function(_this) {
        return function() {
          return _this._noMore;
        };
      })(this));
      this._isLoading = false;
      this.__defineSetter__("isLoading", (function(_this) {
        return function(value) {
          if (value && value !== _this._isLoading) {
            _this.UI.loadingHint$.show();
          } else {
            _this.UI.loadingHint$.hide();
          }
          _this._isLoading = value;
          return console.debug("change loading", value);
        };
      })(this));
      this.__defineGetter__("isLoading", (function(_this) {
        return function(value) {
          return _this._isLoading;
        };
      })(this));
      this.isLoading = false;
      this.scrollTarget = this.node;
    }

    SearchList.prototype.onScroll = function() {
      console.log(this.scrollTarget.scrollHeight - this.scrollTarget.scrollTop - this.scrollTarget.clientHeight, this.scrollTarget.clientHeight / 2);
      if (this.scrollTarget.scrollHeight - this.scrollTarget.scrollTop - this.scrollTarget.clientHeight < this.scrollTarget.clientHeight / 2) {
        return this.more();
      }
    };

    SearchList.prototype.applySearch = function(query) {
      this.query = query;
      this.offset = 0;
      this.noMore = false;
      this.isLoading = false;
      this._queueTaskId++;
      this.resultList.length = 0;
      return this.more();
    };

    SearchList.prototype.more = function() {
      if (!this.query) {
        return;
      }
      if (this.noMore) {
        return;
      }
      if (this.isLoading) {
        return;
      }
      this.isLoading = true;
      return App.messageCenter.invoke("search", {
        input: this.query,
        count: this.count || 10,
        offset: this.offset || 0
      }, (function(_this) {
        return function(err, archives) {
          var archive, item, _i, _len, _results;
          console.debug(archives.length, _this.count, _this.offset, _this.query);
          _this.isLoading = false;
          if (err) {
            App.showError(err);
            return;
          }
          if (archives.length === 0) {
            _this.noMore = true;
            return;
          }
          _this.offset += archives.length;
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            item = new Model.Archive(archive);
            _results.push(_this.appendQueue.push({
              archive: item,
              id: _this._searchId
            }));
          }
          return _results;
        };
      })(this));
    };

    SearchList.prototype.onClickSearchButton = function() {
      var query;
      query = this.UI.searchKeywordInput.value.trim();
      return this.applySearch(query);
    };

    return SearchList;

  })(Leaf.Widget);

  SearchListItem = (function(_super) {
    __extends(SearchListItem, _super);

    function SearchListItem(archive) {
      this.archive = archive;
      SearchListItem.__super__.constructor.call(this, App.templates["search-list-item"]);
      this.archive.on("change", (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.render();
    }

    SearchListItem.prototype.render = function() {
      var day, hour, minute, month, now, text, tilNow, time, year;
      this.UI.title$.text(this.archive.title);
      this.UI.preview$.text(this._htmlToPreview(this.archive.content));
      if (!this.archive.createDate) {
        time = (new Date(0)).getTime();
      } else {
        time = this.archive.createDate.getTime();
      }
      now = Date.now();
      tilNow = now - time;
      minute = 1000 * 60;
      hour = minute * 60;
      day = hour * 24;
      month = day * 30;
      year = day * 365;
      text = "";
      if (tilNow < minute) {
        text = "seconds ago";
      } else if (tilNow < hour) {
        text = "minutes ago";
      } else if (tilNow < day) {
        text = "hours ago";
      } else if (tilNow < month) {
        text = "days ago";
      } else if (tilNow < month * 2) {
        text = "weeks ago";
      } else if (tilNow < year) {
        text = "months ago";
      } else {
        text = "years ago";
      }
      this.UI.time$.text(text);
      if (!this.archive.like) {
        return this.UI.like$.hide();
      } else {
        return this.UI.like$.show();
      }
    };

    SearchListItem.prototype._htmlToPreview = function(html, count) {
      this._tempDiv = this._tempDiv || document.createElement("div");
      this._tempDiv.innerHTML = html;
      return $(this._tempDiv).text().substring(0, count || 200) + "...";
    };

    return SearchListItem;

  })(Leaf.Widget);

  window.SearchView = SearchView;

}).call(this);
