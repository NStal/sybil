// Generated by CoffeeScript 1.7.1
(function() {
  var Buffer, MessageCenter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Buffer = Buffer || Array;

  MessageCenter = (function(_super) {
    __extends(MessageCenter, _super);

    MessageCenter.stringify = function(obj) {
      return JSON.stringify(this.normalize(obj));
    };

    MessageCenter.normalize = function(obj) {
      var item, prop, _;
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj instanceof Array) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            item = obj[_i];
            _results.push(this.normalize(item));
          }
          return _results;
        }).call(this);
      }
      if (obj === null) {
        return null;
      } else if (obj instanceof Buffer) {
        return {
          __mc_type: "buffer",
          value: obj.toString("base64")
        };
      } else if (obj instanceof Date) {
        return {
          __mc_type: "date",
          value: obj.getTime()
        };
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.normalize(obj[prop]);
        }
        return _;
      }
    };

    MessageCenter.denormalize = function(obj) {
      var item, prop, _;
      if (typeof obj !== "object") {
        return obj;
      }
      if (obj === null) {
        return null;
      }
      if (obj instanceof Array) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            item = obj[_i];
            _results.push(this.denormalize(item));
          }
          return _results;
        }).call(this);
      } else if (obj.__mc_type === "buffer") {
        return new Buffer(obj.value, "base64");
      } else if (obj.__mc_type === "date") {
        return new Date(obj.value);
      } else {
        _ = {};
        for (prop in obj) {
          _[prop] = this.denormalize(obj[prop]);
        }
        return _;
      }
    };

    MessageCenter.parse = function(str) {
      var json, _;
      json = JSON.parse(str);
      _ = this.denormalize(json);
      return _;
    };

    function MessageCenter() {
      this.idPool = 1000;
      this.invokeWaiters = [];
      this.apis = [];
      this.timeout = 1000 * 60;
      MessageCenter.__super__.constructor.call(this);
    }

    MessageCenter.prototype.getInvokeId = function() {
      return this.idPool++;
    };

    MessageCenter.prototype.registerApi = function(name, handler, overwrite) {
      var api, index, _i, _len, _ref;
      name = name.trim();
      if (!handler) {
        throw new Error("need handler to work");
      }
      _ref = this.apis;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        api = _ref[index];
        if (api.name === name) {
          if (!overwrite) {
            throw new Eror("duplicated api name " + name);
          } else {
            this.apis[index] = null;
          }
        }
      }
      this.apis = this.apis.filter(function(api) {
        return api;
      });
      return this.apis.push({
        name: name,
        handler: handler
      });
    };

    MessageCenter.prototype.setConnection = function(connection) {
      this.connection = connection;
      this._handler = (function(_this) {
        return function(message) {
          var e;
          if (_this.connection !== connection) {
            return;
          }
          try {
            return _this.handleMessage(message);
          } catch (_error) {
            e = _error;
            return _this.emit("error", e);
          }
        };
      })(this);
      return this.connection.on("message", this._handler);
    };

    MessageCenter.prototype.unsetConnection = function() {
      if (this.connection) {
        this.connection.removeListener("message", this._handler);
      }
      this._handler = null;
      this.connection = null;
      return this.clearAll();
    };

    MessageCenter.prototype.response = function(id, err, data) {
      var e, message;
      message = MessageCenter.stringify({
        id: id,
        type: "response",
        data: data,
        error: err
      });
      if (!this.connection) {
        this.emit("message", message);
        return;
      }
      try {
        return this.connection.send(message);
      } catch (_error) {
        e = _error;
      }
    };

    MessageCenter.prototype.invoke = function(name, data, callback) {
      var controller, e, message, req, waiter;
      callback = callback || function() {
        return true;
      };
      req = {
        type: "invoke",
        id: this.getInvokeId(),
        name: name,
        data: data
      };
      waiter = {
        request: req,
        id: req.id,
        callback: callback,
        date: new Date
      };
      this.invokeWaiters.push(waiter);
      message = MessageCenter.stringify(req);
      controller = {
        _timer: null,
        waiter: waiter,
        timeout: function(value) {
          if (this._timer) {
            clearTimeout(this._timer);
          }
          return this._timer = setTimeout(controller.clear, value);
        },
        clear: (function(_this) {
          return function(error) {
            return _this.clearInvokeWaiter(waiter.id, error || "timeout");
          };
        })(this)
      };
      waiter.controller = controller;
      controller.timeout(this.timeout);
      if (this.connection) {
        try {
          this.connection.send(message);
        } catch (_error) {
          e = _error;
          controller.clear("connection not opened");
          return;
        }
      }
      return controller;
    };

    MessageCenter.prototype.fireEvent = function(name, data) {
      var e, message;
      message = MessageCenter.stringify({
        type: "event",
        name: name,
        data: data
      });
      if (this.connection) {
        try {
          this.connection.send(message);
        } catch (_error) {
          e = _error;
          return message;
        }
      }
      return message;
    };

    MessageCenter.prototype.handleMessage = function(message) {
      var e, info, _ref;
      try {
        info = MessageCenter.parse(message);
      } catch (_error) {
        e = _error;
        throw new Error("invalid message " + message);
      }
      if (!info.type || ((_ref = info.type) !== "invoke" && _ref !== "event" && _ref !== "response")) {
        throw new Error("invalid message " + message + " invalid info type");
      }
      if (info.type === "response") {
        return this.handleResponse(info);
      } else if (info.type === "invoke") {
        return this.handleInvoke(info);
      } else if (info.type === "event") {
        return this.handleEvent(info);
      } else {
        throw new Error("invalid message");
      }
    };

    MessageCenter.prototype.handleEvent = function(info) {
      if (!info.name) {
        throw new Error("invalid message " + (JSON.stringify(info)));
      }
      return this.emit("event/" + info.name, info.data);
    };

    MessageCenter.prototype.handleResponse = function(info) {
      var found;
      if (!info.id) {
        throw new Error("invalid message " + (JSON.stringify(info)));
      }
      found = this.invokeWaiters.some((function(_this) {
        return function(waiter, index) {
          if (waiter.id === info.id) {
            _this.clearInvokeWaiter(info.id, null);
            waiter.callback(info.error, info.data);
            return true;
          }
          return false;
        };
      })(this));
      return found;
    };

    MessageCenter.prototype.clearInvokeWaiter = function(id, error) {
      return this.invokeWaiters = this.invokeWaiters.filter(function(waiter) {
        if (waiter.id === id) {
          if (waiter.controller && waiter.controller._timer) {
            clearTimeout(waiter.controller._timer);
          }
          if (error) {
            waiter.callback(error);
          }
          return false;
        }
        return true;
      });
    };

    MessageCenter.prototype.handleInvoke = function(info) {
      var api, target, _i, _len, _ref;
      if (!info.id || !info.name) {
        throw new Error("invalid message " + (JSON.stringify(info)));
      }
      target = null;
      _ref = this.apis;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        api = _ref[_i];
        if (api.name === info.name) {
          target = api;
          break;
        }
      }
      if (!target) {
        return this.response(info.id, "" + info.name + " api not found");
      }
      return target.handler(info.data, (function(_this) {
        return function(err, data) {
          return _this.response(info.id, err, data);
        };
      })(this));
    };

    MessageCenter.prototype.clearAll = function() {
      var waiter, _results;
      _results = [];
      while (this.invokeWaiters[0]) {
        waiter = this.invokeWaiters[0];
        _results.push(this.clearInvokeWaiter(waiter.id, "abort"));
      }
      return _results;
    };

    return MessageCenter;

  })(Leaf.EventEmitter);

  window.MessageCenter = MessageCenter;

}).call(this);
