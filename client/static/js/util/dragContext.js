// Generated by CoffeeScript 1.7.1
(function() {
  var DragContext, DraggableState, DroppableState,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DragContext = (function(_super) {
    __extends(DragContext, _super);

    function DragContext() {
      DragContext.__super__.constructor.call(this);
      this.droppables = [];
      this.draggables = [];
      this.mouseupListener = this.mouseupListener.bind(this);
      this.mousemoveListener = this.mousemoveListener.bind(this);
      window.addEventListener("mouseup", this.mouseupListener);
      window.addEventListener("mousemove", this.mousemoveListener);
    }

    DragContext.prototype.addContext = function(node) {
      this.addDraggable(node);
      return this.addDroppable(node);
    };

    DragContext.prototype.addDraggable = function(node) {
      var draggable, item, _i, _len, _ref;
      _ref = this.draggables;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.node === node) {
          return;
        }
      }
      draggable = new DraggableState(node, this);
      this.draggables.push(draggable);
      return draggable.on("start", (function(_this) {
        return function(e) {
          if (_this.currentDraggableState) {
            throw new Error("already dragging");
          }
          _this.currentDraggableState = draggable;
          return _this.emit("start", e);
        };
      })(this));
    };

    DragContext.prototype.addDroppable = function(node) {
      var droppable, item, _i, _len, _ref;
      _ref = this.droppables;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.node === node) {
          return;
        }
      }
      droppable = new DroppableState(node, this);
      this.droppables.push(droppable);
      droppable.on("drop", (function(_this) {
        return function(e) {
          if (!_this.currentDraggableState) {
            throw new Error("drop with no draggable");
          }
          if (_this.draggingShadow && _this.draggingShadow.parentElement) {
            _this.draggingShadow.parentElement.removeChild(_this.draggingShadow);
          }
          _this.draggingShadow = null;
          e.draggable = _this.currentDraggableState.node;
          e.droppable = droppable.node;
          e.stopPropagation();
          _this.currentDraggableState = null;
          return _this.emit("drop", e);
        };
      })(this));
      return droppable.on("hover", (function(_this) {
        return function(e) {
          if (!_this.currentDraggableState) {
            throw "drop on no draggable";
          }
          e.draggable = _this.currentDraggableState.node;
          e.droppable = droppable.node;
          _this.hasHover = true;
          return _this.emit("hover", e);
        };
      })(this));
    };

    DragContext.prototype.removeDraggable = function(node) {
      return this.draggables = this.draggables.filter(function(item) {
        if (item.node === node) {
          item.destroy();
          return false;
        }
        return true;
      });
    };

    DragContext.prototype.removeDroppable = function(node) {
      return this.droppables = this.droppables.filter(function(item) {
        if (item.node === node) {
          item.destroy();
          return false;
        }
        return true;
      });
    };

    DragContext.prototype.clearContext = function(node) {
      this.removeDraggable(node);
      return this.removeDroppable(node);
    };

    DragContext.prototype.mouseupListener = function(e) {
      if (!this.currentDraggableState) {
        return;
      }
      document.body.classList.remove("no-select");
      e.draggable = this.currentDraggableState.node;
      this.currentDraggableState = null;
      if (this.draggingShadow && this.draggingShadow.parentElement) {
        this.draggingShadow.parentElement.removeChild(this.draggingShadow);
      }
      this.draggingShadow = null;
      return this.emit("release", e);
    };

    DragContext.prototype.mousemoveListener = function(e) {
      if (!this.currentDraggableState) {
        return;
      }
      document.body.classList.add("no-select");
      e.draggable = this.currentDraggableState.node;
      e.preventDefault();
      if (this.hasHover) {
        this.hasHover = false;
        e.dragHover = true;
      } else {
        e.dragHover = false;
      }
      this.emit("move", e);
      if (this.draggingShadow) {
        this.draggingShadow.style.top = e.clientY + "px";
        return this.draggingShadow.style.left = e.clientX + "px";
      }
    };

    DragContext.prototype.addDraggingShadow = function(node) {
      this.draggingShadow = node;
      if (DragContext.draggingShadow && DragContext.draggingShadow.parentElement) {
        DragContext.draggingShadow.parentElement.removeChild(DragContext.draggingShadow);
      }
      DragContext.draggingShadow = node;
      document.body.appendChild(node);
      node.style.position = "absolute";
      return node.style.pointerEvents = "none";
    };

    return DragContext;

  })(Leaf.EventEmitter);

  DroppableState = (function(_super) {
    __extends(DroppableState, _super);

    function DroppableState(node, parent) {
      this.node = node;
      this.parent = parent;
      DroppableState.__super__.constructor.call(this);
      this.onMove = this._onMove.bind(this);
      this.onUp = this._onUp.bind(this);
      this.node.addEventListener("mousemove", this.onMove);
      this.node.addEventListener("mouseup", this.onUp);
    }

    DroppableState.prototype._onMove = function(e) {
      if (this.parent.currentDraggableState) {
        e.preventDefault();
        this.emit("hover", e);
        return false;
      }
    };

    DroppableState.prototype._onUp = function(e) {
      if (this.parent.currentDraggableState && this.parent.currentDraggableState.node !== this.node) {
        this.emit("drop", e);
        return false;
      }
    };

    DroppableState.prototype.destroy = function() {
      this.node.removeEventListener("mousemove", this.onMove);
      this.node.removeEventListener("mouseup", this.onUp);
      this.node = null;
      return this.parent = null;
    };

    return DroppableState;

  })(Leaf.EventEmitter);

  DraggableState = (function(_super) {
    __extends(DraggableState, _super);

    function DraggableState(node, parent) {
      this.node = node;
      this.parent = parent;
      DraggableState.__super__.constructor.call(this);
      this.onMove = this._onMove.bind(this);
      this.onDown = this._onDown.bind(this);
      this.node.onmousemove = this.onMove;
      this.node.onmousedown = this.onDown;
      this.node.addEventListener("mousemove", this.onMove);
      this.node.addEventListener("mousedown", this.onDown);
    }

    DraggableState.prototype._onMove = function(e) {
      if (this.parent.currentDraggableState) {
        return true;
      }
      return this.emit("move", e);
    };

    DraggableState.prototype._onDown = function(e) {
      if (e.which !== 1) {
        return;
      }
      e.draggable = this.node;
      if (this.parent.currentDraggableState) {
        return;
      }
      e.stopImmediatePropagation();
      e.preventDefault();
      return this.emit("start", e);
    };

    DraggableState.prototype.destroy = function() {
      this.node.removeEventListener("mousemove", this.onMove);
      this.node.removeEventListener("mousedown", this.onDown);
      this.node = null;
      return this.parent = null;
    };

    return DraggableState;

  })(Leaf.EventEmitter);

  module.exports = DragContext;

}).call(this);
