// Generated by CoffeeScript 1.7.1
(function() {
  var ServerConnection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ServerConnection = (function(_super) {
    __extends(ServerConnection, _super);

    function ServerConnection() {
      ServerConnection.__super__.constructor.call(this);
      this.connectState = "close";
    }

    ServerConnection.prototype.connect = function(address) {
      if (this.connectState === "connecting") {
        return false;
      }
      this.address = address || this.address;
      this.connectState = "connecting";
      this.websocket = new WebSocket(this.address);
      this.websocket.onopen = (function(_this) {
        return function() {
          _this.connectState = "connected";
          _this.emit("connect");
          return _this.emit("ready");
        };
      })(this);
      this.websocket.onclose = (function(_this) {
        return function() {
          return _this.close();
        };
      })(this);
      this.websocket.onerror = (function(_this) {
        return function() {
          return _this.close();
        };
      })(this);
      return this.websocket.onmessage = (function(_this) {
        return function(message) {
          return _this.emit("message", message.data);
        };
      })(this);
    };

    ServerConnection.prototype.reconnect = function() {
      return this.connect(this.address);
    };

    ServerConnection.prototype.send = function(msg) {
      return this.websocket.send(msg);
    };

    ServerConnection.prototype.ready = function(callback) {
      if (this.connectState === "connected") {
        callback();
      }
      return this.once("ready", callback);
    };

    ServerConnection.prototype.close = function() {
      if (this.connectState === "close") {
        return;
      }
      this.connectState = "close";
      if (this.websocket) {
        this.websocket.close();
      }
      this.websocket = null;
      return this.emit("disconnect");
    };

    return ServerConnection;

  })(Leaf.EventEmitter);

  module.exports = ServerConnection;

}).call(this);
