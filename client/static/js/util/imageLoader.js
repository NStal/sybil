// Generated by CoffeeScript 1.8.0
(function() {
  var ImageLoader,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ImageLoader = (function(_super) {
    var ImageLoaderWorker;

    __extends(ImageLoader, _super);

    ImageLoaderWorker = (function(_super1) {
      __extends(ImageLoaderWorker, _super1);

      function ImageLoaderWorker() {
        ImageLoaderWorker.__super__.constructor.call(this);
        this.timeout = 1000 * 20;
      }

      ImageLoaderWorker.prototype.load = function(src) {
        this.src = src;
        this.isReserved = false;
        if (this.state !== "void") {
          return;
        }
        return this.setState("loading");
      };

      ImageLoaderWorker.prototype.reserve = function() {
        return this.isReserved = true;
      };

      ImageLoaderWorker.prototype.reset = function() {
        if (this.data.img) {
          this.data.img.removeAttribute("src");
        }
        this.removeAllListeners();
        return ImageLoaderWorker.__super__.reset.call(this);
      };

      ImageLoaderWorker.prototype.atLoading = function() {
        var img, onerror, onload;
        this.data.timeStart = Date.now();
        img = document.createElement("img");
        img.src = this.src;
        this.clear((function(_this) {
          return function() {
            img.removeEventListener("load", onload);
            img.removeEventListener("error", onerror);
            if (_this.isWaitingFor("giveup")) {
              _this.stopWaiting("giveup");
            }
            _this.data.isPending = false;
            return clearTimeout(_this.data.timer);
          };
        })(this));
        onload = (function(_this) {
          return function() {
            _this.clear();
            return _this.setState("ready");
          };
        })(this);
        onerror = (function(_this) {
          return function() {
            _this.clear();
            return _this.setState("fail");
          };
        })(this);
        this.data.timer = setTimeout((function(_this) {
          return function() {
            _this.data.isPending = true;
            _this.waitFor("giveup", function() {
              _this.clear();
              _this.data.failError = new Error("give up due to timeup to " + _this.timeout + " and someone else is waiting to load");
              return _this.setState("abort");
            });
            return _this.emit("pending");
          };
        })(this), this.timeout);
        img.addEventListener("load", onload);
        img.addEventListener("error", onerror);
        return this.data.img = img;
      };

      ImageLoaderWorker.prototype.atReady = function() {
        var result;
        result = this.data.img;
        this.data.img = null;
        return this.emit("finish", null, result);
      };

      ImageLoaderWorker.prototype.atFail = function() {
        return this.emit("finish", this.data.failError || new Error("fail to load image"));
      };

      ImageLoaderWorker.prototype.atAbort = function() {
        return this.setState("fail");
      };

      ImageLoaderWorker.prototype.isPending = function() {
        return this.data.isPending;
      };

      ImageLoaderWorker.prototype.isAvailable = function() {
        var _ref;
        return (_ref = this.state) === "ready" || _ref === "fail" || _ref === "void";
      };

      ImageLoaderWorker.prototype.isIdle = function() {
        return this.isAvailable() || this.isPending();
      };

      return ImageLoaderWorker;

    })(Leaf.States);

    function ImageLoader() {
      ImageLoader.__super__.constructor.call(this);
      this.queue = [];
      this.workers = [];
      this.caches = {};
      this.fails = {};
      this.coherency = 0;
      this.setCoherency(5);
    }

    ImageLoader.prototype.setCoherency = function(count) {
      if (count == null) {
        count = 5;
      }
      return this._initWorkers(5);
    };

    ImageLoader.prototype._initWorkers = function(count) {
      if (count === this.coherency) {
        return;
      }
      this.coherency = count;
      while (this.coherency > this.workers.length) {
        this.workers.push(new ImageLoaderWorker());
      }
      return this._next();
    };

    ImageLoader.prototype._onWorkerIdle = function(worker) {
      if (this.workers.length > this.coherency) {
        this.workers = this.workers.filter(function(item) {
          return item !== worker;
        });
      }
      return this._next();
    };

    ImageLoader.prototype._next = function() {
      var info, worker, _i, _j, _len, _len1, _ref, _ref1;
      if (this.queue.length === 0) {
        return;
      }
      _ref = this.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        worker = _ref[_i];
        if (worker.isAvailable() && !worker.isReserved) {
          info = this.queue.shift();
          this._load(worker, info);
          this._next();
          return;
        }
      }
      _ref1 = this.workers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        worker = _ref1[_j];
        if (worker.isPending() && !worker.isReserved) {
          worker.reserve();
          worker.give("giveup");
          info = this.queue.shift();
          this._load(worker, info);
          this._next();
          return;
        }
      }
    };

    ImageLoader.prototype._load = function(worker, info) {
      worker.reserve();
      if (worker.isPending()) {
        worker.give("giveup");
      }
      worker.reset();
      worker.once("pending", (function(_this) {
        return function() {
          return _this._onWorkerIdle(worker);
        };
      })(this));
      worker.once("finish", (function(_this) {
        return function(err, img) {
          if (!err) {
            _this.caches[info.src] = true;
          } else {
            _this.fails[info.src] = err;
          }
          info.callback(err, img);
          return _this._onWorkerIdle(worker);
        };
      })(this));
      if (info.option) {
        if (info.option.giveup) {
          worker.timeout = info.option.giveup;
        }
      }
      worker.info = info;
      return worker.load(info.src);
    };

    ImageLoader.prototype.isBusy = function() {
      var item, _i, _len, _ref;
      _ref = this.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.isAvailable() || item.isPending()) {
          return false;
        }
      }
      return true;
    };

    ImageLoader.prototype.hasCache = function(src) {
      return this.caches[src];
    };

    ImageLoader.prototype.hasFail = function(src) {
      return this.fails[src];
    };

    ImageLoader.prototype.hurry = function(src) {
      var index, info, _i, _len, _ref;
      _ref = this.queue;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        info = _ref[index];
        if (info.src === src) {
          this.queue.splice(index, 1);
          this.queue.unshift(info);
          return;
        }
      }
    };

    ImageLoader.prototype.now = function(src) {
      var delayInfo, index, info, justStartWorker, latest, worker, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.queue;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        info = _ref[index];
        if (info.src === src) {
          this.queue.splice(index, 1);
          latest = 0;
          justStartWorker = null;
          _ref1 = this.workers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            worker = _ref1[_j];
            if (worker.data && worker.data.timeStart > latest) {
              justStartWorker = worker;
              latest = worker.data.timeStart;
            }
          }
          delayInfo = worker.info;
          this.queue.unshift(delayInfo);
          worker.reset();
          this._load(worker, info);
          return;
        }
      }
    };

    ImageLoader.prototype.load = function(option, callback) {
      var info, src;
      src = option.src || option;
      info = {
        src: src,
        option: option,
        callback: callback,
        type: "load"
      };
      if (option.hurry) {
        this.queue.unshift(info);
      } else {
        this.queue.push(info);
      }
      return this._next();
    };

    ImageLoader.prototype.cache = function(option, callback) {
      var src;
      src = option.src || option;
      if (this.caches[src]) {
        callback();
      }
      return this.load(option, function(err, img) {
        return callback(err);
      });
    };

    ImageLoader.prototype.clear = function() {
      var item, worker, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.workers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        worker = _ref[_i];
        worker.reset();
        if (worker.info && worker.info.callback) {
          worker.info.callback(new Error("clear"));
        }
      }
      _ref1 = this.queue;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.callback(new Error("clear"));
      }
      return this.queue = [];
    };

    return ImageLoader;

  })(Leaf.EventEmitter);

  module.exports = ImageLoader;

}).call(this);
