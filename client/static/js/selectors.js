// Generated by CoffeeScript 1.8.0
(function() {
  var SourceItem, SourceSelector, TagItem, TagSelector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TagItem = (function(_super) {
    __extends(TagItem, _super);

    function TagItem(tag) {
      this.tag = tag;
      TagItem.__super__.constructor.call(this, "<span></span>");
      this.node$.text(this.tag.name);
    }

    TagItem.prototype.onClickNode = function() {
      if (this.isSelect) {
        return this.unselect();
      } else {
        return this.select();
      }
    };

    TagItem.prototype.select = function() {
      this.isSelect = true;
      this.emit("select");
      return this.node$.addClass("select");
    };

    TagItem.prototype.unselect = function() {
      this.isSelect = false;
      this.emit("unselect");
      return this.node$.removeClass("select");
    };

    return TagItem;

  })(Leaf.Widget);

  TagSelector = (function(_super) {
    __extends(TagSelector, _super);

    function TagSelector() {
      TagSelector.__super__.constructor.call(this, App.templates["tag-selector"]);
      this.tags = [];
    }

    TagSelector.prototype.select = function(callback) {
      if (this._callback) {
        callback("previous select not done");
        return;
      }
      this.selectedTags = [];
      this._callback = callback;
      return this.show();
    };

    TagSelector.prototype.onClickConfirm = function() {
      this.hide();
      this._callback(null, this.selectedTags);
      return this._callback = null;
    };

    TagSelector.prototype.onClickCancel = function() {
      this.hide();
      this._callback("cancel");
      return this._callback = null;
    };

    TagSelector.prototype.onClickClearAll = function() {
      var tag, _i, _len, _ref;
      _ref = this.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tag.unselect();
      }
      return this.selectedTags.length = 0;
    };

    TagSelector.prototype.buildTags = function() {
      var tag, tagItem, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tag.remove();
      }
      this.tags.length = 0;
      _ref1 = Tag.tags;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tag = _ref1[_j];
        tagItem = new TagItem(tag);
        this.tags.push(tagItem);
        _results.push(this.addTagItem(tagItem));
      }
      return _results;
    };

    TagSelector.prototype.addTagItem = function(item) {
      item.on("select", (function(_this) {
        return function() {
          var tag, _i, _len, _ref;
          _ref = _this.selectedTags;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            if (tag === item.tag) {
              return;
            }
          }
          return _this.selectedTags.push(item.tag);
        };
      })(this));
      item.on("unselect", (function(_this) {
        return function() {
          var index, tag, _i, _len, _ref;
          _ref = _this.selectedTags;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            tag = _ref[index];
            if (tag === item.tag) {
              _this.selectedTags.splice(index, 1);
              return;
            }
          }
        };
      })(this));
      console.log("append tag item", item);
      return item.appendTo(this.UI.tags);
    };

    TagSelector.prototype.show = function() {
      this.buildTags();
      return this.node$.show();
    };

    TagSelector.prototype.hide = function() {
      return this.node$.hide();
    };

    return TagSelector;

  })(Leaf.Widget);

  SourceItem = (function(_super) {
    __extends(SourceItem, _super);

    function SourceItem(source) {
      this.source = source;
      SourceItem.__super__.constructor.call(this, "<span></span>");
      this.node$.text(this.source.name || this.source.guid);
    }

    SourceItem.prototype.onClickNode = function() {
      if (this.isSelect) {
        return this.unselect();
      } else {
        return this.select();
      }
    };

    SourceItem.prototype.select = function() {
      this.isSelect = true;
      this.emit("select");
      return this.node$.addClass("select");
    };

    SourceItem.prototype.unselect = function() {
      this.isSelect = false;
      this.emit("unselect");
      return this.node$.removeClass("select");
    };

    return SourceItem;

  })(Leaf.Widget);

  SourceSelector = (function(_super) {
    __extends(SourceSelector, _super);

    function SourceSelector() {
      SourceSelector.__super__.constructor.call(this, App.templates["source-selector"]);
      this.sources = [];
    }

    SourceSelector.prototype.select = function(callback) {
      if (this._callback) {
        callback("previous select not done");
        return;
      }
      this.selectedSources = [];
      this.show();
      return this._callback = callback;
    };

    SourceSelector.prototype.onClickConfirm = function() {
      this.hide();
      this._callback(null, this.selectedSources);
      return this._callback = null;
    };

    SourceSelector.prototype.onClickCancel = function() {
      this.hide();
      this._callback("cancel");
      return this._callback = null;
    };

    SourceSelector.prototype.onClickClearAll = function() {
      var source, _i, _len, _ref;
      _ref = this.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        source.unselect();
      }
      return this.selectedSources.length = 0;
    };

    SourceSelector.prototype.buildSources = function() {
      var source, sourceItem, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        source.remove();
      }
      this.sources.length = 0;
      _ref1 = Source.sources;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        source = _ref1[_j];
        sourceItem = new SourceItem(source);
        this.sources.push(sourceItem);
        _results.push(this.addSourceItem(sourceItem));
      }
      return _results;
    };

    SourceSelector.prototype.addSourceItem = function(item) {
      item.on("select", (function(_this) {
        return function() {
          var source, _i, _len, _ref;
          _ref = _this.selectedSources;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            source = _ref[_i];
            if (source === item.source) {
              return;
            }
          }
          return _this.selectedSources.push(item.source);
        };
      })(this));
      item.on("unselect", (function(_this) {
        return function() {
          var index, source, _i, _len, _ref;
          _ref = _this.selectedSources;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            source = _ref[index];
            if (source === item.source) {
              _this.selectedSources.splice(index, 1);
              return;
            }
          }
        };
      })(this));
      return item.appendTo(this.UI.sources);
    };

    SourceSelector.prototype.show = function() {
      this.buildSources();
      return this.node$.show();
    };

    SourceSelector.prototype.hide = function() {
      return this.node$.hide();
    };

    return SourceSelector;

  })(Leaf.Widget);

  window.TagSelector = TagSelector;

  window.SourceSelector = SourceSelector;

}).call(this);
