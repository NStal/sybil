// Generated by CoffeeScript 1.8.0
(function() {
  var App, ContextMenu, ContextMenuItem, Mask,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("../app");

  ContextMenu = (function(_super) {
    __extends(ContextMenu, _super);

    function ContextMenu(selections) {
      var item, _i, _len, _ref;
      ContextMenu.__super__.constructor.call(this, App.templates["context-menu"]);
      this.selections = selections;
      this.children = Leaf.Widget.makeList(this.UI.container);
      this.node.oncontextmenu = function() {
        return false;
      };
      _ref = this.selections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.addSelection(item);
      }
    }

    ContextMenu.prototype.addSelection = function(selection) {
      var child;
      child = new ContextMenuItem(selection.name);
      child.onClickNode = (function(_this) {
        return function() {
          _this.hide();
          return setTimeout(selection.callback, 0);
        };
      })(this);
      return this.children.push(child);
    };

    ContextMenu.prototype.show = function(e) {
      e.stopImmediatePropagation();
      e.preventDefault();
      ContextMenu.show(this);
      this.node$.show();
      return this.node$.css({
        top: e.clientY - 15,
        left: e.clientX - 10
      });
    };

    ContextMenu.prototype.hide = function() {
      this.node$.hide();
      return this.emit("hide");
    };

    return ContextMenu;

  })(Leaf.Widget);

  ContextMenu.show = function(who) {
    if (this.menu) {
      this.menu.remove();
    }
    this.mask.show();
    this.mask.once("hide", (function(_this) {
      return function() {
        _this.mask.hide();
        return _this.menu.hide();
      };
    })(this));
    this.menu = who;
    this.menu.appendTo(document.body);
    return this.menu.once("hide", (function(_this) {
      return function() {
        return _this.mask.hide();
      };
    })(this));
  };

  ContextMenu.showByEvent = function(e, selections) {
    var menu;
    if (this.menu) {
      this.menu.remove();
    }
    this.mask.show();
    this.mask.on("hide", (function(_this) {
      return function() {
        _this.mask.hide();
        return menu.hide();
      };
    })(this));
    menu = new ContextMenu(selections);
    menu.show(e);
    menu.appendTo(document.body);
    menu.on("hide", (function(_this) {
      return function() {
        return _this.mask.hide();
      };
    })(this));
    return this.menu = menu;
  };

  Mask = (function(_super) {
    __extends(Mask, _super);

    function Mask() {
      Mask.__super__.constructor.call(this, "<div></div>");
      this.node$.css({
        "position": "absolute",
        height: "100%",
        width: "100%",
        top: 0,
        left: "0",
        "background-color": "rgba(0,0,0,0)",
        "z-index": "1"
      });
      this.node.oncontextmenu = (function(_this) {
        return function(e) {
          _this.emit("hide");
          e.preventDefault();
          e.stopPropagation();
          return false;
        };
      })(this);
    }

    Mask.prototype.onClickNode = function() {
      return this.emit("hide");
    };

    Mask.prototype.show = function() {
      return this.appendTo(document.body);
    };

    Mask.prototype.hide = function() {
      return this.remove();
    };

    return Mask;

  })(Leaf.Widget);

  ContextMenu.mask = new Mask();

  ContextMenuItem = (function(_super) {
    __extends(ContextMenuItem, _super);

    function ContextMenuItem(word) {
      ContextMenuItem.__super__.constructor.call(this, App.templates["context-menu-item"]);
      this.node$.text(word);
    }

    ContextMenuItem.prototype.onClickNode = function() {
      return this.emit("fire", this);
    };

    return ContextMenuItem;

  })(Leaf.Widget);

  module.exports = ContextMenu;

}).call(this);
