// Generated by CoffeeScript 1.7.1
(function() {
  var App, SubscribeAdapterTerminal,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  SubscribeAdapterTerminal = (function(_super) {
    __extends(SubscribeAdapterTerminal, _super);

    function SubscribeAdapterTerminal(candidate) {
      SubscribeAdapterTerminal.__super__.constructor.call(this, App.templates["subscribe-adapter-terminal"]);
      console.debug(candidate, "from termional");
      document.body.appendChild(this.node);
      App.hintStack.push(this);
      this.candidate = candidate;
      this.Data.mode = "accepter";
      this.register();
      this.Data.subscribeHint = this.candidate.subscribeHint || ("Would you like to subscribe " + this.candidate.uri);
      if (this.candidate.needAuth) {
        this.requireAuth();
      }
    }

    SubscribeAdapterTerminal.prototype.register = function() {
      console.debug("register " + this.candidate.cid);
      App.messageCenter.listenBy(this, "event/candidate/requireAuth", this.handlePossibleCandidateAuth);
      return App.messageCenter.listenBy(this, "event/source", this.handlePossibleSourceArrive);
    };

    SubscribeAdapterTerminal.prototype.requireAuth = function() {
      this.Data.mode = "authenticator";
      return this.Data.authHint = this.candidate.authHint || ("Please enter you authorization info for " + this.candidate.uri);
    };

    SubscribeAdapterTerminal.prototype.handlePossibleCandidateAuth = function(candidate) {
      console.debug("possible auth", candidate);
      if (candidate.cid === this.candidate.cid) {
        this.candidate = candidate;
        this.requireAuth();
      }
    };

    SubscribeAdapterTerminal.prototype.handlePossibleCandidatePinCode = function(candidate) {
      console.debug("possible pincode", candidate);
      if (candidate.cid === this.candidate.cid) {
        this.Data.mode = "pin-recognizer";
      }
    };

    SubscribeAdapterTerminal.prototype.handlePossibleSourceArrive = function(source) {
      if (source.uri === this.candidate.uri) {
        this.release();
        return this.hide();
      }
    };

    SubscribeAdapterTerminal.prototype.onKeydownUsername = function(e) {
      if (e.which === Leaf.Key.enter) {
        return this.UI.secret$.focus();
      }
    };

    SubscribeAdapterTerminal.prototype.onKeydownSecret = function(e) {
      if (e.which === Leaf.Key.enter) {
        return this.onClickAuthorize();
      }
    };

    SubscribeAdapterTerminal.prototype.onClickAccept = function() {
      return this.accept();
    };

    SubscribeAdapterTerminal.prototype.onClickDecline = function() {
      return this.decline((function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));
    };

    SubscribeAdapterTerminal.prototype.onClickAuthorize = function() {
      var secret, username;
      username = this.UI.username.value;
      secret = this.UI.secret.value;
      return this.auth(username, secret, (function(_this) {
        return function() {
          return _this.hint("authorizing");
        };
      })(this));
    };

    SubscribeAdapterTerminal.prototype.onClickRefuse = function() {
      return this.decline((function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));
    };

    SubscribeAdapterTerminal.prototype.hint = function(word) {
      this.Data.mode = "hinter";
      return this.Data.hint = word;
    };

    SubscribeAdapterTerminal.prototype.hide = function() {
      return this.emit("hide", this);
    };

    SubscribeAdapterTerminal.prototype.release = function() {
      return App.messageCenter.stopListenBy(this);
    };

    SubscribeAdapterTerminal.prototype.auth = function(username, secret, callback) {
      if (callback == null) {
        callback = function() {};
      }
      console.log("authCandidate", {
        cid: this.candidate.cid,
        username: username,
        secret: secret
      });
      return this.accept((function(_this) {
        return function() {
          return App.messageCenter.invoke("authCandidate", {
            cid: _this.candidate.cid,
            username: username,
            secret: secret
          }, function(err) {
            return callback(err);
          });
        };
      })(this));
    };

    SubscribeAdapterTerminal.prototype.accept = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return App.messageCenter.invoke("acceptCandidate", this.candidate.cid, (function(_this) {
        return function(err) {
          _this.accepted = true;
          return callback(err);
        };
      })(this));
    };

    SubscribeAdapterTerminal.prototype.decline = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return App.messageCenter.invoke("declineCandidate", this.candidate.cid, (function(_this) {
        return function(err) {
          return callback(err);
        };
      })(this));
    };

    return SubscribeAdapterTerminal;

  })(Leaf.Widget);

  module.exports = SubscribeAdapterTerminal;

}).call(this);
