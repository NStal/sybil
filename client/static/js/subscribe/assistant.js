// Generated by CoffeeScript 1.7.1
(function() {
  var AdapterTerminal, App, SubscribeAssistant,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("/app");

  AdapterTerminal = require("./adapterTerminal");

  SubscribeAssistant = (function(_super) {
    __extends(SubscribeAssistant, _super);

    function SubscribeAssistant(uri) {
      this.uri = uri;
      SubscribeAssistant.__super__.constructor.call(this);
      this.terminals = [];
      App.messageCenter.invoke("detectStream", this.uri, (function(_this) {
        return function(err, stream) {
          console.debug("get stream", err, stream);
          if (err) {
            _this.emit("error", err);
            return;
          }
          stream.on("data", function(candidate) {
            console.debug("get candidate", candidate);
            return _this.spawnAdapterTerminal(candidate);
          });
          return stream.on("end", function() {
            console.debug("end stream");
            console.debug(_this.terminals.length, _this.terminals.map(function(item) {
              return item.candidate;
            }));
            if (_this.terminals.length === 0) {
              return _this.emit("none");
            } else if (_this.terminals.length === 1) {
              return _this.terminals[0].accept();
            }
          });
        };
      })(this));
    }

    SubscribeAssistant.prototype.spawnAdapterTerminal = function(candidate) {
      var terminal;
      terminal = new AdapterTerminal(candidate);
      this.terminals.push(terminal);
      return terminal.once("complete", (function(_this) {
        return function() {
          var _i, _len, _ref;
          _ref = _this.terminals;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            terminal = _ref[_i];
            if (!terminal.isDone) {
              return;
            }
          }
          return _this.emit("done");
        };
      })(this));
    };

    return SubscribeAssistant;

  })(Leaf.EventEmitter);

  module.exports = SubscribeAssistant;

}).call(this);
