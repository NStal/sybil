// Generated by CoffeeScript 1.7.1
(function() {
  var AddSourcePopup, App, ListView, OfflineHinter, SearchView, SettingPanel, SourceView, View, ViewSwitcher;

  View = require("view");

  ViewSwitcher = View.ViewSwitcher;

  AddSourcePopup = require("addSourcePopup");

  SourceView = require("sourceView");

  ListView = require("listView");

  SearchView = require("searchView");

  OfflineHinter = require("offlineHinter");

  SettingPanel = require("settingPanel");

  App = require("./app");

  require("enhancement");

  App.connect = function() {
    this.messageCenter.on("error", (function(_this) {
      return function(e) {
        console.error(e);
        return console.error(e.stack);
      };
    })(this));
    this.connectionManager.start();
    this.connectionManager.ready((function(_this) {
      return function() {
        App.initialLoaded = true;
        _this.emit("connect");
        $(".loading").addClass("hide");
        return setTimeout((function() {
          return $(".loading").hide();
        }), 500);
      };
    })(this));
    this.connectionManager.on("connect", (function(_this) {
      return function() {
        return _this.messageCenter.setConnection(_this.connectionManager.connection);
      };
    })(this));
    return this.connectionManager.on("disconnect", (function(_this) {
      return function() {
        return _this.messageCenter.unsetConnection();
      };
    })(this));
  };

  App.initialLoad = function(callback) {
    if (this.initialLoaded) {
      return callback();
    } else {
      return this.once("connect", callback);
    }
  };

  App.init = function() {
    var view, _i, _len, _ref;
    App.viewSwitcher = new ViewSwitcher();
    App.addSourcePopup = new AddSourcePopup();
    App.addSourcePopup.appendTo(document.body);
    App.offlineHinter = new OfflineHinter();
    App.settingPanel = new SettingPanel();
    App.sourceView = new SourceView();
    App.listView = new ListView();
    App.searchView = new SearchView();
    _ref = View.views;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      view.hide();
    }
    App.viewSwitcher.switchTo("source view");
    App.emit("structureReady");
    return App.connect();
  };

  App.showHint = function(str) {
    console.log("HINT:", str);
    return alert(str);
  };

  App.showError = function(str) {
    console.error(str);
    return;
    return alert(str);
  };

  App.confirm = function(str, callback) {
    if (confirm(str)) {
      return callback(true);
    } else {
      return callback(false);
    }
  };

  App.templateManager = require("templateManager");

  App.messageCenter = new (require("util/messageCenter"));

  App.connectionManager = new (require("connectionManager"));

  App.persistentDataStoreManager = new (require("persistentDataStore")).Manager();

  App.userConfig = new (require("userConfig"));

  App.modelSyncManager = new (require("modelSyncManager"));

  $(function() {
    App.templateManager.start();
    App.templateManager.on("ready", function(templates) {
      App.templates = templates;
      return App.init();
    });
    return require("test");
  });

}).call(this);
