// Generated by CoffeeScript 1.7.1
(function() {
  var ConnectManager, UserConfig,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  window.App = new Leaf.EventEmitter();

  App.messageCenter = new MessageCenter();

  App.templateManager = new Leaf.TemplateManager();

  App.templateManager.use("archive-list", "archive-list-item", "source-list", "source-list-folder", "source-list-item", "add-source-popup", "source-detail-panel", "read-later-list", "read-later-list-item", "tag-list", "tag-list-item", "tag-archive-list", "custom-source-list", "custom-archive-list", "custom-group-item", "custom-source-item", "custom-tag-item", "tag-selector", "source-selector", "context-menu", "context-menu-item", "archive-filter", "archive-filter-condition", "search-list", "search-list-item", "archive-displayer", "list-view-list", "list-view-list-item", "list-view-archive-list", "list-view-archive-list-item", "p2p-node-item", "p2p-node-list-item", "p2p-list", "p2p-node-info-displayer");

  $(function() {
    App.templateManager.start();
    return App.templateManager.on("ready", function(templates) {
      App.templates = templates;
      return App.init();
    });
  });

  App.connect = function() {
    this.connectManager.start();
    this.connectManager.ready((function(_this) {
      return function() {
        _this.emit("connect");
        return console.debug("!!!!!!!!!!!!!!!!!!!!!!", "connect");
      };
    })(this));
    this.connectManager.on("connect", (function(_this) {
      return function() {
        console.log("...");
        return _this.messageCenter.setConnection(_this.connectManager.connection);
      };
    })(this));
    return this.connectManager.on("disconnect", (function(_this) {
      return function() {
        return _this.messageCenter.unsetConnection();
      };
    })(this));
  };

  App.init = function() {
    var view, _i, _len, _ref;
    App.userConfig = new UserConfig();
    App.connectManager = new ConnectManager();
    App.addSourcePopup = new AddSourcePopup();
    App.addSourcePopup.appendTo(document.body);
    App.sourceView = new SourceView();
    App.searchView = new SearchView();
    App.listView = new ListView();
    App.p2pView = new P2pView();
    App.viewSwitcher = new ViewSwitcher();
    App.offlineHinter = new OfflineHinter();
    Model.initEventListener();
    _ref = View.views;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      console.debug("view:::", view, View.views);
      view.hide();
    }
    App.viewSwitcher.switchTo("source view");
    App.emit("structureReady");
    return App.connect();
  };

  App.showHint = function(str) {
    return alert(str);
  };

  App.showError = function(str) {
    return alert(str);
  };

  App.confirm = function(str, callback) {
    if (confirm(str)) {
      return callback(true);
    } else {
      return callback(false);
    }
  };

  ConnectManager = (function(_super) {
    __extends(ConnectManager, _super);

    function ConnectManager(address) {
      ConnectManager.__super__.constructor.call(this);
      this.connectInterval = 1000;
      this.connection = new ServerConnection();
      this.connection.on("connect", (function(_this) {
        return function() {
          return _this.emit("connect");
        };
      })(this));
      this.connection.on("disconnect", (function(_this) {
        return function() {
          _this.emit("disconnect");
          console.debug("reconnect");
          return setTimeout(_this.connection.reconnect.bind(_this.connection), 500);
        };
      })(this));
    }

    ConnectManager.prototype.ready = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.connection.ready.apply(this.connection, args);
    };

    ConnectManager.prototype.start = function() {
      var wsProtocol;
      if (window.location.protocol === "https:") {
        wsProtocol = "wss:";
      } else {
        wsProtocol = "ws:";
      }
      return this.connection.connect("" + wsProtocol + "//" + window.location.hostname + ":" + window.location.port + window.location.pathname);
    };

    return ConnectManager;

  })(Leaf.EventEmitter);

  UserConfig = (function(_super) {
    __extends(UserConfig, _super);

    function UserConfig(name) {
      if (name == null) {
        name = "userConfig";
      }
      UserConfig.__super__.constructor.call(this);
      this.name = name;
      if (!localStorage) {
        this.data = {};
        return;
      }
      this.data = JSON.parse(localStorage.getItem(this.name) || "{}");
    }

    UserConfig.prototype.get = function(key, value) {
      if (typeof this.data[key] === "undefined") {
        return value;
      }
      return this.data[key];
    };

    UserConfig.prototype.set = function(key, value) {
      this.emit("change/" + key, value);
      this.data[key] = value;
      if (localStorage) {
        return localStorage.setItem(this.name, JSON.stringify(this.data));
      }
    };

    UserConfig.prototype.init = function(key, value) {
      if (typeof this.data[key] !== "undefined") {
        return;
      }
      return this.set(key, value);
    };

    return UserConfig;

  })(Leaf.EventEmitter);

}).call(this);
