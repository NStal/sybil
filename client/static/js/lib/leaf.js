// Generated by CoffeeScript 1.7.1
(function() {
  var Collection, EventEmitter, Key, KeyEventManager, Leaf, List, Model, Mouse, RestApiFactory, TemplateManager, Util, Widget, exports,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Leaf = {};

  if (!exports) {
    exports = Leaf;
    window.Leaf = Leaf;
  } else {
    module.exports = Leaf;
    exports = Leaf;
  }

  EventEmitter = (function() {
    EventEmitter.mixin = function(obj) {
      var em, prop;
      em = new EventEmitter();
      for (prop in em) {
        obj[prop] = em[prop];
      }
      return obj;
    };

    function EventEmitter() {
      this._events = {};
      this._bubbles = [];
      this.trigger = this.emit;
    }

    EventEmitter.prototype.on = function(event, callback, context) {
      var handler, handlers;
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.removeListener = function(event, listener) {
      var handler, handlers, index, _i, _len;
      handlers = this._events[event];
      if (!handlers) {
        return this;
      }
      for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
        handler = handlers[index];
        if (handler.callback === listener) {
          handlers[index] = null;
        }
      }
      this._events[event] = handlers.filter(function(item) {
        return item;
      });
      return this;
    };

    EventEmitter.prototype.removeAllListeners = function(event) {
      if (event) {
        this._events[event] = [];
      } else {
        this._events = {};
      }
      return this;
    };

    EventEmitter.prototype.emit = function() {
      var event, handler, handlers, index, once, params, _i, _len;
      event = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      handlers = this._events[event];
      if (handlers) {
        once = false;
        for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
          handler = handlers[index];
          handler.callback.apply(handler.context || this, params);
          if (handler.once) {
            once = true;
          }
        }
        if (once) {
          this._events[event] = handlers.filter(function(item) {
            return item.once !== true;
          });
        }
      }
      return this;
    };

    EventEmitter.prototype.once = function(event, callback, context) {
      var handler, handlers;
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context,
        once: true
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.bubble = function(emitter, event, processor) {
      var listener;
      listener = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (processor) {
            args = processor.apply(_this, args);
          } else {
            args.unshift(event);
          }
          return _this.emit.apply(_this, args);
        };
      })(this);
      emitter.on(event, listener);
      return this._bubbles.push({
        emitter: emitter,
        event: event,
        listener: listener
      });
    };

    EventEmitter.prototype.stopBubble = function(emitter, event) {
      this._bubbles = this._bubbles.filter(function(item) {
        if (item.emitter === emitter) {
          if (!event || item.event === event) {
            item.emitter.removeListener(item.event, item.listener);
            return false;
          }
        }
        return true;
      });
      return this;
    };

    EventEmitter.prototype.stopAllBubble = function() {
      var item, _i, _len, _ref;
      _ref = this._bubbles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.emitter.removeListener(item.event, item.listener);
      }
      this._bubbles = null;
      return this;
    };

    EventEmitter.prototype.destroy = function() {
      this._events = null;
      this.stopAllBubble();
      this.isDestroy = true;
      return null;
    };

    EventEmitter.prototype.listenBy = function(who, event, callback, context) {
      var handler, handlers;
      this._events[event] = this._events[event] || [];
      handlers = this._events[event];
      handler = {
        callback: callback,
        context: context || who,
        owner: who
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.stopListenBy = function(who) {
      var event, handler, handlers, index, _i, _len;
      for (event in this._events) {
        handlers = this._events[event];
        if (!handlers) {
          continue;
        }
        for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
          handler = handlers[index];
          if (handler.owner && handler.owner === who) {
            handlers[index] = null;
          }
        }
        this._events[event] = handlers.filter(function(item) {
          return item;
        });
      }
      return this;
    };

    return EventEmitter;

  })();

  exports.EventEmitter = EventEmitter;

  Util = {};

  Util.isHTMLElement = function(template) {
    if (typeof HTMLElement === "object" && template instanceof HTMLElement || (template && typeof template === "object" && template.nodeType === 1 && typeof template.nodeName === "string")) {
      return true;
    }
    return false;
  };

  Util.isHTMLNode = function(o) {
    return (typeof Node === "object" && o instanceof Node) || o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
  };

  Util.isMobile = function() {
    if (navigator && navigator.userAgent) {
      return (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) && true;
    } else {
      return false;
    }
  };

  Util.getBrowserInfo = function() {
    var M, N, tem, ua;
    N = navigator.appName;
    ua = navigator.userAgent;
    M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
    tem = ua.match(/version\/([\.\d]+)/i);
    if (M && tem !== null) {
      M[2] = tem[1];
    }
    M = M ? [M[1],M[2]] : [N, navigator.appVersion, '-?'];
    return {
      name: M[0],
      version: M[1],
      mobile: Util.isMobile()
    };
  };

  Util.browser = Util.getBrowserInfo();

  Util.capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  Util.clone = function(x, stack) {
    var item, obj, prop, r, _i, _len;
    if (stack == null) {
      stack = [];
    }
    if (x === null || x === void 0) {
      return x;
    }
    if (typeof x.clone === "function") {
      return x.clone();
    }
    if (__indexOf.call(stack, x) >= 0) {
      throw new Error("clone recursive object");
    }
    stack.push(x);
    if (x instanceof Array) {
      r = [];
      for (_i = 0, _len = x.length; _i < _len; _i++) {
        item = x[_i];
        r.push(Util.clone(item, stack));
      }
      return r;
    }
    if (typeof x === "object") {
      obj = {};
      for (prop in x) {
        obj[prop] = Util.clone(x[prop], stack);
      }
      return obj;
    }
    return x;
  };

  Util.compare = function(x, y) {
    var index, item, p, _i, _j, _len, _len1;
    if (x === y) {
      return true;
    }
    if (x instanceof Array && y instanceof Array) {
      if (x.length !== y.length) {
        return false;
      }
      for (index = _i = 0, _len = x.length; _i < _len; index = ++_i) {
        item = x[index];
        if (!Util.compare(item, y[index])) {
          return false;
        }
      }
      return true;
    }
    for (p in y) {
      if (typeof x[p] === 'undefined') {
        return false;
      }
    }
    for (p in y) {
      if (y[p]) {
        switch (typeof y[p]) {
          case 'object':
            if (!Util.compare(y[p], x[p])) {
              return false;
            }
            break;
          case 'function':
            if (typeof x[p] === 'undefined' || (p !== 'equals' && y[p].toString() !== x[p].toString())) {
              return false;
            }
            break;
          default:
            if (y[p] !== x[p]) {
              return false;
            }
        }
      } else if (x[p]) {
        return false;
      }
    }
    for (_j = 0, _len1 = x.length; _j < _len1; _j++) {
      p = x[_j];
      if (typeof y[p] === 'undefined') {
        return false;
      }
    }
    return true;
  };

  Leaf.Util = Util;

  Leaf.EventEmitter = EventEmitter;

  KeyEventManager = (function(_super) {
    __extends(KeyEventManager, _super);

    KeyEventManager.stack = [];

    KeyEventManager.instances = [];

    KeyEventManager.disable = function() {
      return this.isActive = true;
    };

    KeyEventManager.enable = function() {
      return this.isActive = false;
    };

    KeyEventManager.isActive = true;

    function KeyEventManager(node) {
      KeyEventManager.__super__.constructor.call(this);
      KeyEventManager.instances.push(this);
      this.isActive = false;
      if (node) {
        this.attachTo(node);
      }
    }

    KeyEventManager.prototype.attachTo = function(node) {
      this.attachment = node;
      $(this.attachment).keydown((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keydown", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
      return $(this.attachment).keyup((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keyup", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
    };

    KeyEventManager.prototype.active = function() {
      return this.isActive = true;
    };

    KeyEventManager.prototype.deactive = function() {
      return this.isActive = false;
    };

    KeyEventManager.prototype.master = function() {
      if (KeyEventManager.current === this) {
        console.warn("already mastered");
        console.trace();
        return;
      }
      this.active();
      if (KeyEventManager.current) {
        KeyEventManager.current.deactive();
        KeyEventManager.stack.push(KeyEventManager.current);
      }
      return KeyEventManager.current = this;
    };

    KeyEventManager.prototype.unmaster = function() {
      var prev;
      if (KeyEventManager.current !== this) {
        console.warn("current KeyEventManager are not in master");
        console.trace();
        return false;
      }
      this.deactive();
      prev = null;
      if (KeyEventManager.stack.length > 0) {
        prev = KeyEventManager.stack.pop();
        prev.active();
      }
      KeyEventManager.current = prev;
      return true;
    };

    return KeyEventManager;

  })(EventEmitter);

  Key = {};

  Key["0"] = 48;

  Key["1"] = 49;

  Key["2"] = 50;

  Key["3"] = 51;

  Key["4"] = 52;

  Key["5"] = 53;

  Key["6"] = 54;

  Key["7"] = 55;

  Key["8"] = 56;

  Key["9"] = 57;

  if (Util.browser) {
    if (Util.browser.name === "firefox") {
      Key.cmd = 224;
    } else if (Util.browser.name === "opera") {
      Key.cmd = 17;
    } else {
      Key.cmd = 91;
    }
  } else {
    Key.cmd = 91;
  }

  Key.a = 65;

  Key.b = 66;

  Key.c = 67;

  Key.d = 68;

  Key.e = 69;

  Key.f = 70;

  Key.g = 71;

  Key.h = 72;

  Key.i = 73;

  Key.j = 74;

  Key.k = 75;

  Key.l = 76;

  Key.m = 77;

  Key.n = 78;

  Key.o = 79;

  Key.p = 80;

  Key.q = 81;

  Key.r = 82;

  Key.s = 83;

  Key.t = 84;

  Key.u = 85;

  Key.v = 86;

  Key.w = 87;

  Key.x = 88;

  Key.y = 89;

  Key.z = 90;

  Key.space = 32;

  Key.shift = 16;

  Key.ctrl = 17;

  Key.alt = 18;

  Key.left = 37;

  Key.up = 38;

  Key.right = 39;

  Key.down = 40;

  Key.enter = 13;

  Key.backspace = 8;

  Key.escape = 27;

  Key.del = Key["delete"] = 46;

  Key.esc = 27;

  Key.pageup = 33;

  Key.pagedown = 34;

  Key.tab = 9;

  Mouse = {};

  Mouse.left = 0;

  Mouse.middle = 1;

  Mouse.right = 2;

  Leaf.KeyEventManager = KeyEventManager;

  Leaf.Key = Key;

  Leaf.Mouse = Mouse;

  Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      var data;
      Model.__super__.constructor.call(this);
      data = {};
      this.__defineGetter__("data", (function(_this) {
        return function() {
          return data;
        };
      })(this));
      this.__defineSetter__("data", (function(_this) {
        return function(obj) {
          return _this.sets(obj);
        };
      })(this));
      this._defines = {};
      this._idprop = null;
      this._silent = false;
      this._ref = 0;
    }

    Model.prototype.has = function(name) {
      if (this._defines[name]) {
        return true;
      }
      return false;
    };

    Model.prototype.declare = function(name) {
      var accessor, item, obj, _i, _len;
      if (name instanceof Array) {
        for (_i = 0, _len = name.length; _i < _len; _i++) {
          item = name[_i];
          this.declare(item);
        }
        return;
      }
      if (this._defines[name]) {
        console && console.warn && console.warn("already defines model property " + name);
        return;
      }
      obj = {};
      this._defines[name] = obj;
      accessor = {
        get: (function(_this) {
          return function() {
            return obj.value;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            if (obj.value === value) {
              return value;
            }
            obj.value = value;
            if (_this._silent) {
              return value;
            }
            _this.emit("change", name, value);
            _this.emit("change/" + name, value);
            return value;
          };
        })(this),
        enumerable: true
      };
      Object.defineProperty(this.data, name, accessor);
      if (typeof this[name] === "undefined") {
        return Object.defineProperty(this, name, accessor);
      } else {
        return console && console.warn && console.warn("Model property name '" + name + "' conflict with an existing property of this model instance, and won't be overwritten. You can access it safely via Model.data." + name + " instead of model." + name);
      }
    };

    Model.prototype.defaults = function(kv) {
      var prop, _results;
      _results = [];
      for (prop in kv) {
        if (this.has(prop)) {
          this._defines[prop]["default"] = kv[prop];
          if (typeof this.get(prop) === "undefined") {
            _results.push(this.set(prop, kv[prop]));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.reset = function() {
      var prop, _results;
      _results = [];
      for (prop in this._defines) {
        _results.push(this.data[prop] = this._defines[prop]["default"]);
      }
      return _results;
    };

    Model.prototype.get = function(key, value) {
      var result;
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      result = this.data[key];
      if (typeof result === "undefined") {
        return value;
      } else {
        return result;
      }
    };

    Model.prototype.set = function(key, value) {
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      if (!this._silent && this.data[key] === value) {
        this.emit("change");
        this.emit("change/" + key, value);
      }
      return this.data[key] = value;
    };

    Model.prototype.sets = function(obj) {
      var prop, value;
      if (!obj) {
        return;
      }
      this._silent = true;
      for (prop in this._defines) {
        if (typeof obj[prop] !== "undefined") {
          value = obj[prop];
          if (this.get(prop) !== value) {
            this.set(prop, value);
            this.emit("change/" + prop, value);
          }
        }
      }
      this.emit("change");
      return this._silent = false;
    };

    Model.prototype.preset = function(key, value) {
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      this._defines[key].old = this.data[key];
      this._defines[key].stable = false;
      return this.data[key] = value;
    };

    Model.prototype.presets = function(obj) {
      var prop, _results;
      _results = [];
      for (prop in obj) {
        if (this.has(prop)) {
          _results.push(this.preset(prop, obj[prop]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.undo = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.undo(prop);
        }
        return;
      }
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      if (this._defines[key].stable === false) {
        this.data[key] = this._defines[key].old;
        return this._defines[key].stable = true;
      }
    };

    Model.prototype.confirm = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.confirm(prop);
        }
        return;
      }
      if (this._defines[key].stable === false) {
        this._defines[key].old = this.data[key];
        return this._defines[key].stable = true;
      }
    };

    Model.prototype.destroy = function() {
      if (this.isDestroy) {
        return;
      }
      this.isDestroy = true;
      this.emit("destroy");
      Model.__super__.destroy.call(this);
      return this._defines = null;
    };

    Model.prototype.toJSON = function(option) {
      var complete, filter, prop, result;
      if (option == null) {
        option = {};
      }
      complete = option.complete;
      filter = option.filter;
      result = {};
      for (prop in this._defines) {
        if (typeof this.data[prop] === "undefined" && !complete) {
          continue;
        }
        if (filter instanceof Array && __indexOf.call(filter, prop) < 0) {
          continue;
        }
        result[prop] = this.data[prop];
        if (result[prop] instanceof Array) {
          result[prop] = result[prop].map(function(item) {
            if (item && typeof item.toJSON === "function") {
              return item.toJSON({
                complete: complete
              });
            }
            return item;
          });
        } else if (!result[prop]) {
          continue;
        } else if (typeof result[prop].toJSON === "function") {
          result[prop] = result[prop].toJSON({
            complete: complete
          });
        }
      }
      return result;
    };

    Model.prototype.retain = function() {
      return this._ref++;
    };

    Model.prototype.release = function() {
      this._ref--;
      if (this._ref <= 0) {
        return this.destroy();
      }
    };

    return Model;

  })(EventEmitter);

  Leaf.Model = Model;

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      Collection.__super__.constructor.call(this);
      this.models = [];
      this.id = null;
      this.__defineGetter__("length", (function(_this) {
        return function() {
          return _this.models.length;
        };
      })(this));
    }

    Collection.prototype.exists = function(model) {
      if (this.get(model)) {
        return true;
      }
      return false;
    };

    Collection.prototype.setId = function(id) {
      if (this.models.length !== 0) {
        throw new Error("set id should before collection has any content");
      }
      return this.id = id;
    };

    Collection.prototype.find = function(obj) {
      if (!obj) {
        return this.models.slice();
      }
      return this.models.filter(function(item) {
        var prop;
        for (prop in obj) {
          if (item.data[prop] !== obj[prop]) {
            return false;
          }
        }
        return true;
      });
    };

    Collection.prototype.get = function(model) {
      var id, target;
      target = null;
      if (this.id) {
        if (model instanceof Model) {
          id = model.get(this.id);
        } else {
          id = model;
        }
      }
      this.models.some((function(_this) {
        return function(old) {
          if (_this.id) {
            if (old.get(_this.id) === id) {
              target = old;
              return true;
            }
            return false;
          } else if (model === old) {
            target = old;
            return true;
          }
          return false;
        };
      })(this));
      if (target) {
        return target;
      }
      return null;
    };

    Collection.prototype.add = function(model) {
      var old;
      if (!(model instanceof Model)) {
        throw new Error("add invalid model, not instanceof Leaf.Model");
      }
      old = this.get(model);
      if (old) {
        old.sets(model.data);
        return old;
      }
      this.models.push(model);
      this._attachModel(model);
      this.emit("add", model);
      return model;
    };

    Collection.prototype.empty = function() {
      var model, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        this._detachModel(model);
        this.emit("remove", model);
      }
      return this.models = [];
    };

    Collection.prototype.remove = function(model) {
      var target;
      target = this.get(model);
      if (!target) {
        return false;
      }
      this.models = this.models.filter(function(item) {
        return item !== target;
      });
      this._detachModel(target);
      this.emit("remove", target);
      return true;
    };

    Collection.prototype._attachModel = function(model) {
      model.listenBy(this, "destroy", (function(_this) {
        return function() {
          _this.remove(model);
          return _this.emit("destroy/model", model);
        };
      })(this));
      return model.listenBy(this, "change", (function(_this) {
        return function(key, value) {
          if (_this.id && key === _this.id) {
            throw new Error("shouldn't change id " + key + " for model inside a the collection");
          }
          _this.emit("change/model", model);
          return _this.emit("change/model/" + key, model, key, value);
        };
      })(this));
    };

    Collection.prototype._detachModel = function(model) {
      return model.stopListenBy(this);
    };

    Collection.prototype.destroy = function() {
      this.empty();
      return Collection.__super__.destroy.call(this);
    };

    return Collection;

  })(EventEmitter);

  Leaf.Collection = Collection;

  Widget = (function(_super) {
    __extends(Widget, _super);

    function Widget(template) {
      this.template = template != null ? template : "<div></div>";
      Widget.__super__.constructor.call(this);
      this.node = null;
      this.$node = null;
      this.node$ = null;
      this.nodes = [];
      this.UI = {};
      this.initTemplate(this.template);
      this._models = [];
    }

    Widget.prototype.initTemplate = function(template) {
      var node, oldNode, query, tempNode, _i, _j, _len, _len1, _ref, _ref1;
      if (!template) {
        template = "<div></div>";
      }
      this.nodes = [];
      oldNode = this.node;
      if (typeof template === "string") {
        template = template.trim();
        if ((template.indexOf("<")) !== 0) {
          query = template;
          this.node = document.querySelector(query);
          if (!this.node) {
            console.error("template of query " + query + " not found");
            return;
          }
          this.nodes = [this.node];
          this.node.widget = this;
        } else {
          tempNode = document.createElement("div");
          tempNode.innerHTML = template.trim();
          this.node = tempNode.children[0];
          _ref = tempNode.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            node = _ref[_i];
            this.nodes.push(node);
            node.widget = this;
          }
        }
      } else if (Util.isHTMLNode(template)) {
        this.node = template;
        this.node.widget = this;
        this.nodes.push(template);
      }
      if (!this.node) {
        this.isValid = false;
        return;
      }
      if (typeof $ === "function") {
        this.$node = $(this.node);
        this.node$ = this.$node;
      }
      if (oldNode && oldNode.parentElement) {
        _ref1 = this.nodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          node = _ref1[_j];
          oldNode.parentElement.insertBefore(node, oldNode);
        }
        oldNode.parentElement.removeChild(oldNode);
      }
      this.initUI();
      return this.initSubWidgets();
    };

    Widget.prototype.initSubWidgets = function() {
      var index, item, name, node, widget, widgets, _i, _j, _len, _len1, _ref, _results, _widgets;
      _ref = this.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        widgets = node.getElementsByTagName("widget");
        _widgets = [];
        for (_j = 0, _len1 = widgets.length; _j < _len1; _j++) {
          item = widgets[_j];
          _widgets.push(item);
        }
        widgets = _widgets;
        _results.push((function() {
          var _k, _len2, _results1;
          _results1 = [];
          for (index = _k = 0, _len2 = widgets.length; _k < _len2; index = ++_k) {
            widget = widgets[index];
            name = widget.getAttribute("data-widget");
            if (!name) {
              continue;
            }
            if (this[name] instanceof Widget) {
              _results1.push(this[name].replace(widget));
            } else if (this[name]) {
              console.warn("Widget named " + name + " isnt isn't instanceof Widget");
              _results1.push(console.trace());
            } else {
              console.warn("Widget named", name, "not exists for", widget);
              _results1.push(console.trace());
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Widget.prototype.initUI = function() {
      var elems, id, node, subNode, _i, _j, _len, _len1, _ref;
      if (!this.nodes) {
        throw "invalid root " + this.nodes;
      }
      _ref = this.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        elems = node.querySelectorAll("[data-id]");
        elems = [].slice.call(elems);
        elems.unshift(node);
        for (_j = 0, _len1 = elems.length; _j < _len1; _j++) {
          subNode = elems[_j];
          if (subNode.tagName.toLowerCase() === "widget") {
            continue;
          }
          if (id = subNode.getAttribute("data-id")) {
            this.UI[id] = subNode;
            subNode.widget = this;
            this._delegateEventForControl(id);
            if (typeof $ === "function") {
              this.UI[id + "$"] = this.UI["$" + id] = $(subNode);
            }
          }
        }
      }
      this._delegateEventForControl();
      return true;
    };

    Widget.prototype._delegateEventForControl = function(id) {
      var event, events, node, _i, _len, _results;
      events = ["blur", "click", "focus", "keydown", "keyup", "keypress", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "scroll"];
      node = this.UI[id];
      if (!node) {
        node = this.node;
        id = "node";
      }
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        _results.push((function(_this) {
          return function(event) {
            return node["on" + event] = function(e) {
              if (typeof _this["on" + Util.capitalize(event) + Util.capitalize(id)] === "function") {
                return _this["on" + Util.capitalize(event) + Util.capitalize(id)](e);
              }
              return true;
            };
          };
        })(this)(event));
      }
      return _results;
    };

    Widget.prototype.appendTo = function(target) {
      var node, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (Util.isHTMLElement(target)) {
        _ref = this.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          target.appendChild(node);
        }
        return true;
      }
      if (target instanceof Leaf.Widget) {
        _ref1 = this.nodes;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          node = _ref1[_j];
          _results.push(target.node.appendChild(node));
        }
        return _results;
      }
    };

    Widget.prototype.replace = function(target) {
      this.before(target);
      if (target instanceof Widget) {
        target.remove();
        return;
      }
      if (Util.isHTMLElement(target) && target.parentElement) {
        target.parentElement.removeChild(target);
      }
    };

    Widget.prototype.prependTo = function(target) {
      var first, node, _i, _j, _len, _len1, _ref, _ref1;
      if (Util.isHTMLElement(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        return false;
      }
      if (target.children.length === 0) {
        _ref = this.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          target.appendChild(node);
        }
      } else {
        this.nodes.reverse();
        first = target.children[0];
        _ref1 = this.nodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          node = _ref1[_j];
          target.insertBefore(node, first);
        }
        this.nodes.reverse();
      }
      return true;
    };

    Widget.prototype.remove = function() {
      var node, _i, _len, _ref, _results;
      _ref = this.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node.parentElement) {
          _results.push(node.parentElement.removeChild(node));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Widget.prototype.after = function(target) {
      var node, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
      if (Util.isHTMLElement(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object", target);
        return false;
      }
      if (!target || !target.parentElement) {
        console.log(target, target.parentElement);
        console.error("can't insert befere root element ");
        return false;
      }
      if (target.nextElementSibling) {
        _ref = this.nodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(target.parentElement.insertBefore(node, target.nextElementSibling));
        }
        return _results;
      } else {
        _ref1 = this.nodes;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          node = _ref1[_j];
          _results1.push(target.parentElement.appendChild(node));
        }
        return _results1;
      }
    };

    Widget.prototype.before = function(target) {
      var node, _i, _len, _ref;
      if (Util.isHTMLElement(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object,target");
        return false;
      }
      if (!target || !target.parentElement) {
        console.error("can't insert befere root element ");
        return false;
      }
      _ref = this.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        target.parentElement.insertBefore(node, target);
      }
      this.nodes.reverse();
      return true;
    };

    Widget.prototype.occupy = function(target) {
      if (Util.isHTMLElement(target)) {
        target.innerHTML = "";
      }
      if (target instanceof Leaf.Widget) {
        target.node.innerHTML = "";
      }
      return this.appendTo(target);
    };

    Widget.prototype.use = function(model) {
      this._models.push(model);
      model.listenBy(this, "destroy", (function(_this) {
        return function() {
          return _this._models = _this._models.filter(function(item) {
            return item !== model;
          });
        };
      })(this));
      return model.retain();
    };

    Widget.prototype.destroy = function() {
      var model, _i, _len, _ref;
      if (this.isDestroy) {
        return;
      }
      this.isDestroy = true;
      this.emit("destroy");
      Widget.__super__.destroy.call(this);
      _ref = this._models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        model.release();
        model.stopListenBy(this);
      }
      this.UI = null;
      this.node = null;
      this.node$ = null;
      return this.$node = null;
    };

    return Widget;

  })(Leaf.EventEmitter);

  List = (function(_super) {
    __extends(List, _super);

    function List(template, create) {
      List.__super__.constructor.call(this, template);
      this.init(create);
      Object.defineProperty(this, "length", {
        get: (function(_this) {
          return function() {
            return _this._length;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            var index, item, toRemove, _i, _j, _len, _ref, _results;
            toRemove = [];
            if (value > _this._length) {
              throw "can't asign length larger than the origin";
            }
            if (value < 0) {
              throw "can't asign length lesser than 0";
            }
            if (typeof value !== "number") {
              throw new TypeError();
            }
            for (index = _i = value, _ref = _this.length; value <= _ref ? _i < _ref : _i > _ref; index = value <= _ref ? ++_i : --_i) {
              toRemove.push(_this[index]);
              delete _this[index];
            }
            _this._length = value;
            _results = [];
            for (_j = 0, _len = toRemove.length; _j < _len; _j++) {
              item = toRemove[_j];
              _results.push(_this._detach(item));
            }
            return _results;
          };
        })(this)
      });
    }

    List.prototype.init = function(create) {
      this.create = create || this.create || (function(_this) {
        return function(item) {
          return item;
        };
      })(this);
      this._length = 0;
      return this.node.innerHTML = "";
    };

    List.prototype.map = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].map.apply(this, args);
    };

    List.prototype.some = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].some.apply(this, args);
    };

    List.prototype.forEach = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].forEach.apply(this, args);
    };

    List.prototype.check = function(item) {
      var child, _i, _len, _results;
      if (!(item instanceof Widget)) {
        throw "Leaf List only accept widget as element";
      }
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        child = this[_i];
        if (child === item) {
          throw "already exists";
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    List.prototype.indexOf = function(item) {
      var child, index, _i, _len;
      for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
        child = this[index];
        if (item === child) {
          return index;
        }
      }
      return -1;
    };

    List.prototype.push = function(item) {
      item = this.create(item);
      this.check(item);
      this[this._length] = item;
      this._length++;
      item.appendTo(this.node);
      return this._attach(item);
    };

    List.prototype.pop = function() {
      var item;
      if (this._length === 0) {
        return null;
      }
      this._length -= 1;
      item = this[this._length];
      delete this[this._length];
      this._detach(item);
      return item;
    };

    List.prototype.unshift = function(item) {
      var index, _i, _ref;
      item = this.create(item);
      this.check(item);
      if (this._length === 0) {
        item.appendTo(this.node);
        this[0] = item;
        this._length = 1;
        this._attach(item);
        return;
      }
      for (index = _i = _ref = this._length; _ref <= 1 ? _i <= 1 : _i >= 1; index = _ref <= 1 ? ++_i : --_i) {
        this[index] = this[index - 1];
      }
      this[0] = item;
      this._length += 1;
      item.prependTo(this.node);
      this._attach(item);
      return this._length;
    };

    List.prototype.removeItem = function(item) {
      var index;
      index = this.indexOf(item);
      if (index < 0) {
        return index;
      }
      this.splice(index, 1);
      return item;
    };

    List.prototype.shift = function() {
      var index, result, _i, _ref;
      result = this[0];
      for (index = _i = 0, _ref = this._length - 1; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
        this[index] = this[index + 1];
      }
      this._length -= 1;
      this._detach(result);
      return result;
    };

    List.prototype.splice = function() {
      var achor, count, increase, index, item, offset, origin, result, toAdd, toAddFinal, toRemoves, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
      index = arguments[0], count = arguments[1], toAdd = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      result = [];
      toRemoves = [];
      if (typeof count === "undefined" || index + count > this._length) {
        count = this._length - index;
      }
      for (offset = _i = 0; 0 <= count ? _i < count : _i > count; offset = 0 <= count ? ++_i : --_i) {
        item = this[index + offset];
        toRemoves.push(item);
        result.push(item);
      }
      toAddFinal = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = toAdd.length; _j < _len; _j++) {
          item = toAdd[_j];
          _results.push(this.create(item));
        }
        return _results;
      }).call(this);
      if (index === 0) {
        for (_j = 0, _len = toAddFinal.length; _j < _len; _j++) {
          item = toAddFinal[_j];
          this.check(item);
          item.prependTo(this.node);
          this._attach(item);
        }
      } else {
        achor = this[index - 1];
        for (_k = 0, _len1 = toAddFinal.length; _k < _len1; _k++) {
          item = toAddFinal[_k];
          this.check(item);
          item.after(achor);
          this._attach(item);
        }
      }
      increase = toAddFinal.length - count;
      if (increase < 0) {
        for (origin = _l = _ref = index + count, _ref1 = this._length; _ref <= _ref1 ? _l < _ref1 : _l > _ref1; origin = _ref <= _ref1 ? ++_l : --_l) {
          this[origin + increase] = this[origin];
        }
      } else if (increase > 0) {
        for (origin = _m = _ref2 = this._length - 1, _ref3 = index + count - 1; _ref2 <= _ref3 ? _m < _ref3 : _m > _ref3; origin = _ref2 <= _ref3 ? ++_m : --_m) {
          this[origin + increase] = this[origin];
        }
      }
      for (offset = _n = 0, _len2 = toAddFinal.length; _n < _len2; offset = ++_n) {
        item = toAddFinal[offset];
        this[index + offset] = item;
      }
      this._length += increase;
      for (_o = 0, _len3 = toRemoves.length; _o < _len3; _o++) {
        item = toRemoves[_o];
        this._detach(item);
      }
      return result;
    };

    List.prototype.slice = function(from, to) {
      return this.toArray().slice(from, to);
    };

    List.prototype.forEach = function(handler) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        _results.push(handler(item));
      }
      return _results;
    };

    List.prototype.toArray = function() {
      var item;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          item = this[_i];
          _results.push(item);
        }
        return _results;
      }).call(this);
    };

    List.prototype._attach = function(item) {
      item.parentList = this;
      item.listenBy(this, "destroy", (function(_this) {
        return function() {
          return _this.removeItem(item);
        };
      })(this));
      return this.emit("child/add", item);
    };

    List.prototype._detach = function(item) {
      var node, _i, _len, _ref;
      item.parentList = null;
      _ref = item.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node && node.parentElement === this.node) {
          this.node.removeChild(node);
        }
      }
      item.stopListenBy(this);
      return this.emit("child/remove", item);
    };

    List.prototype.sort = function(judge) {
      return this.sync(this.toArray().sort(judge));
    };

    List.prototype.destroy = function() {
      this.length = 0;
      return List.__super__.destroy.call(this);
    };

    return List;

  })(Widget);

  Widget.List = List;

  Widget.makeList = (function(_this) {
    return function(node, create) {
      return new Widget.List(node, create);
    };
  })(this);

  Leaf.Widget = Widget;

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.attrs = ["text", "html", "class", "value", "attribute", "src"];

    function Widget(template) {
      Widget.__super__.constructor.call(this, template);
      this.__defineGetter__("renderData", (function(_this) {
        return function() {
          if (_this.renderDataModel) {
            return _this.renderDataModel.data;
          } else {
            return null;
          }
        };
      })(this));
      this.__defineGetter__("Data", (function(_this) {
        return function() {
          return _this.renderData;
        };
      })(this));
      this.__defineSetter__("renderData", (function(_this) {
        return function(value) {
          if (_this.renderDataModel) {
            return _this.renderDataModel.data = value;
          }
        };
      })(this));
    }

    Widget.prototype.initTemplate = function(template) {
      var oldModel;
      oldModel = this.renderDataModel;
      this.renderDataModel = new Model();
      this.renderData = this.renderDataModel.data;
      Widget.__super__.initTemplate.call(this, template);
      this.initRenderData();
      if (oldModel) {
        this.renderData = oldModel.data;
        return oldModel.destroy();
      }
    };

    Widget.prototype.initRenderData = function() {
      var attrs, elem, elems, node, selector, _i, _len, _ref, _results;
      attrs = Widget.attrs;
      selector = (attrs.map(function(item) {
        return "[data-" + item + "]";
      })).join(",");
      _ref = this.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        elems = [].slice.call(node.querySelectorAll(selector));
        elems.push(node);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = elems.length; _j < _len1; _j++) {
            elem = elems[_j];
            _results1.push(this.applyRenderRole(elem));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Widget.prototype.applyRenderRole = function(elem) {
      var attr, attrs, info, _i, _len, _results;
      attrs = Widget.attrs;
      _results = [];
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        attr = attrs[_i];
        if (info = elem.getAttribute("data-" + attr)) {
          _results.push(this["_" + attr + "Role"](elem, info));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Widget.prototype.removeRenderRole = function(elem) {
      return this.renderDataModel.stopListenBy(elem);
    };

    Widget.prototype._textRole = function(elem, who) {
      if (!this.renderDataModel.has(who)) {
        this.renderDataModel.declare(who);
      }
      return this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.textContent = value;
        };
      })(this));
    };

    Widget.prototype._htmlRole = function(elem, who) {
      if (!this.renderDataModel.has(who)) {
        this.renderDataModel.declare(who);
      }
      return this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.innerHTML = value;
        };
      })(this));
    };

    Widget.prototype._classRole = function(elem, whos) {
      var oldClass, who, _i, _len, _results;
      whos = whos.split(",").map(function(item) {
        return item.trim();
      }).filter(function(item) {
        return item;
      });
      _results = [];
      for (_i = 0, _len = whos.length; _i < _len; _i++) {
        who = whos[_i];
        if (!this.renderDataModel.has(who)) {
          this.renderDataModel.declare(who);
        }
        oldClass = "";
        _results.push(this.renderDataModel.listenBy(elem, "change/" + who, (function(_this) {
          return function(value) {
            if (value && elem.classList.contains(value)) {
              if (oldClass && elem.classList.contains(oldClass)) {
                elem.classList.remove(oldClass);
              }
              oldClass = value;
              return;
            }
            if (oldClass) {
              elem.classList.remove(oldClass);
            }
            if (value && !elem.classList.contains(value)) {
              elem.classList.add(value);
            }
            return oldClass = value;
          };
        })(this)));
      }
      return _results;
    };

    Widget.prototype._attributeRole = function(elem, whats) {
      var pair, _i, _len, _results;
      if (whats == null) {
        whats = "";
      }
      whats = whats.split(",").map(function(item) {
        return item.trim().split(":");
      }).filter(function(pair) {
        return pair.length === 1 || pair.length === 2;
      });
      _results = [];
      for (_i = 0, _len = whats.length; _i < _len; _i++) {
        pair = whats[_i];
        _results.push((function(_this) {
          return function(pair) {
            var name, who;
            name = pair[0];
            who = pair[1] || name;
            if (!_this.renderDataModel.has(who)) {
              _this.renderDataModel.declare(who);
            }
            return _this.renderDataModel.listenBy(elem, "change/" + who, function(value) {
              return elem.setAttribute(name, value);
            });
          };
        })(this)(pair));
      }
      return _results;
    };

    Widget.prototype._valueRole = function(elem, who) {
      return this._attributeRole(elem, "value:" + who);
    };

    Widget.prototype._srcRole = function(elem, who) {
      return this._attributeRole(elem, "src:" + who);
    };

    Widget.prototype.destroy = function() {
      this.renderDataModel.destroy();
      this.renderDataModel = null;
      this.renderData = null;
      return Widget.__super__.destroy.call(this);
    };

    return Widget;

  })(Widget);

  Leaf.Widget = Widget;

  TemplateManager = (function(_super) {
    __extends(TemplateManager, _super);

    function TemplateManager() {
      TemplateManager.__super__.constructor.call(this);
      this.tids = [];
      this.baseUrl = "template/";
      this.templates = {};
      this.suffix = ".html";
      this.timeout = 10000;
      this.enableCache = false;
      this.cacheName = "templateManagerCache";
    }

    TemplateManager.prototype.use = function() {
      var tids;
      tids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.tids.push.apply(this.tids, tids);
    };

    TemplateManager.prototype.start = function() {
      return setTimeout(this._start.bind(this), 0);
    };

    TemplateManager.prototype.clearCache = function() {
      if (window.localStorage) {
        return window.localStorage.removeItem(this.cacheName);
      }
    };

    TemplateManager.prototype._start = function() {
      var all, caches, remain, remainTemplates, tid, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (this.enableCache) {
        caches = this._fromCacheAll();
        _ref = this.tids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tid = _ref[_i];
          this.templates[tid] = caches[tid];
        }
        if (this._isRequirementComplete()) {
          this._ready();
          return this;
        }
      }
      all = this._fromDomAll();
      _ref1 = this.tids;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tid = _ref1[_j];
        this.templates[tid] = all[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      remainTemplates = this._fromDomForEach(remain);
      for (_k = 0, _len2 = remain.length; _k < _len2; _k++) {
        tid = remain[_k];
        this.templates[tid] = remainTemplates[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      return this._fromXHRForEach(remain, (function(_this) {
        return function(err, tid, template) {
          if (err != null) {
            _this.emit("error", err);
            return;
          }
          _this.templates[tid] = template;
          if (_this._isRequirementComplete()) {
            return _this._ready();
          }
        };
      })(this));
    };

    TemplateManager.prototype._ready = function() {
      if (this.enableCache && window.localStorage) {
        window.localStorage.setItem(this.cacheName, JSON.stringify(this.templates));
      }
      return this.emit("ready", this.templates);
    };

    TemplateManager.prototype._getNotCompleteRequirements = function() {
      var tid, _i, _len, _ref, _results;
      _ref = this.tids;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tid = _ref[_i];
        if (!this.templates[tid]) {
          _results.push(tid);
        }
      }
      return _results;
    };

    TemplateManager.prototype._isRequirementComplete = function() {
      var tid, _i, _len, _ref;
      _ref = this.tids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tid = _ref[_i];
        if (!this.templates[tid]) {
          return false;
        }
      }
      return true;
    };

    TemplateManager.prototype._fromCacheAll = function() {
      var e, info, templates;
      if (!window.localStorage) {
        return {};
      }
      info = window.localStorage.getItem(this.cacheName);
      if (!info) {
        return {};
      }
      try {
        templates = JSON.parse(info);
        return templates;
      } catch (_error) {
        e = _error;
        return {};
      }
    };

    TemplateManager.prototype._fromDomAll = function() {
      var e;
      try {
        return JSON.parse(document.getElementById("leaf-templates").innerHTML);
      } catch (_error) {
        e = _error;
        return {};
      }
    };

    TemplateManager.prototype._fromDomForEach = function(tids) {
      var templateNode, templates, tid, _i, _len;
      templates = {};
      for (_i = 0, _len = tids.length; _i < _len; _i++) {
        tid = tids[_i];
        templateNode = document.getElementById("leaf-templates-" + tid);
        templates[tid] = templateNode ? templateNode.innerHTML : void 0;
      }
      return templates;
    };

    TemplateManager.prototype._fromXHRForEach = function(tids, callback) {
      var targetURI, tid, _fn, _i, _len;
      _fn = (function(_this) {
        return function() {
          var XHR;
          XHR = new XMLHttpRequest();
          XHR.open("GET", targetURI, true);
          XHR.send(null);
          XHR.tid = tid;
          XHR.terminator = setTimeout(function() {
            callback("timeout", XHR.tid, null);
            XHR.done = true;
            return XHR.abort();
          }, _this.timeout);
          return XHR.onreadystatechange = function() {
            var _ref;
            if (this.done) {
              return;
            }
            if (this.readyState === 0) {
              callback(new Error("fail to load template"));
              return;
            }
            if (this.readyState === 4) {
              this.done = true;
              if (!this.status || ((_ref = this.status) === 200 || _ref === 302 || _ref === 304)) {
                return callback(null, this.tid, this.responseText);
              } else {
                return callback(this.status, this.tid, null);
              }
            }
          };
        };
      })(this);
      for (_i = 0, _len = tids.length; _i < _len; _i++) {
        tid = tids[_i];
        if (tid.indexOf(".") >= 1) {
          targetURI = this.baseUrl + tid;
        } else {
          targetURI = this.baseUrl + tid + this.suffix;
        }
        _fn();
      }
      return null;
    };

    return TemplateManager;

  })(Leaf.EventEmitter);

  exports.TemplateManager = TemplateManager;

  RestApiFactory = (function() {
    RestApiFactory.Error = {
      NetworkError: "NetworkError",
      ServerError: "ServerError",
      InvalidDataType: "InvalidDataType"
    };

    function RestApiFactory() {
      this.stateField = "state";
      this.dataField = "data";
      this.errorField = "error";
    }

    RestApiFactory.prototype.prefix = function(prefix) {
      return this._prefix = prefix || "";
    };

    RestApiFactory.prototype.suffix = function(suffix) {
      return this._suffix = suffix || "";
    };

    RestApiFactory.prototype.reset = function() {
      return this._prefix;
    };

    RestApiFactory.prototype.create = function(option) {
      var method, reg, routeParams, _url;
      if (option == null) {
        option = {};
      }
      method = option.method || "GET";
      _url = option.url;
      if (!_url) {
        throw new Error("API require en URL");
      }
      reg = /:[a-z][a-z0-9]*/ig;
      routeParams = (_url.match(reg) || []).map(function(item) {
        return item.substring(1);
      });
      return (function(_this) {
        return function(data, callback) {
          var prop, reqOption, url, xhr;
          if (callback == null) {
            callback = function() {
              return true;
            };
          }
          url = _url;
          for (prop in data) {
            if (__indexOf.call(routeParams, prop) >= 0) {
              url = url.replace(new RegExp(":" + prop, "g"), encodeURI(data[prop]));
              delete data[prop];
            }
          }
          reqOption = {
            url: url,
            method: method,
            data: data,
            option: option.option
          };
          xhr = _this.request(reqOption, callback);
          return xhr;
        };
      })(this);
    };

    RestApiFactory.prototype.parse = function(err, data, callback) {
      if (data == null) {
        data = {};
      }
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (err) {
        callback(err);
        return;
      }
      if (data.state) {
        callback(null, data.data);
      } else {
        callback(data.error || RestApiFactory.Error.ServerError);
      }
    };

    RestApiFactory.prototype.request = function(option, callback) {
      var done, method, url, xhr, _callback;
      method = option.method || "GET";
      if (method.toLowerCase() === "get") {
        url = option.url + "?" + this._encodeDataPayload(option.data);
      } else {
        url = option.url;
      }
      xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      done = false;
      _callback = callback;
      callback = (function(_this) {
        return function(err, response) {
          return (option.parser || _this.parse)(err, response, _callback);
        };
      })(this);
      xhr.onreadystatechange = (function(_this) {
        return function() {
          var data, e;
          if (xhr.readyState === 0 && !done) {
            callback(RestApiFactory.Error.NetworkError, null);
            return;
          }
          if (xhr.readyState === 4) {
            done = true;
            if (xhr.responseText) {
              try {
                data = JSON.parse(xhr.responseText);
              } catch (_error) {
                e = _error;
                callback(RestApiFactory.Error.InvalidDataType, xhr.responseText);
                return;
              }
              return callback(null, data);
            } else {
              return callback(RestApiFactory.Error.InvalidDataType);
            }
          }
        };
      })(this);
      if (method.toLowerCase() !== "get") {
        xhr.send(this._encodeDataPayload(option.data));
      } else {
        xhr.send();
      }
      return xhr;
    };

    RestApiFactory.prototype._encodeDataPayload = function(data) {
      var kv, prop, result;
      if (data == null) {
        data = {};
      }
      result = [];
      for (prop in data) {
        kv = [prop, data[prop]].join("=");
        result.push(kv);
      }
      return result.join("&");
    };

    return RestApiFactory;

  })();

  exports.RestApiFactory = RestApiFactory;

}).call(this);
