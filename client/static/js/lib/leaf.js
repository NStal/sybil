// Generated by CoffeeScript 1.8.0
(function() {
  var Collection, ErrorDoc, Errors, EventEmitter, Key, KeyEventManager, Leaf, List, Model, Mouse, Namespace, RestApiFactory, States, TemplateManager, Util, Widget, WidgetBase, exports,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Leaf = {};

  if (!exports) {
    exports = Leaf;
    window.Leaf = Leaf;
  } else {
    module.exports = Leaf;
    exports = Leaf;
  }

  EventEmitter = (function() {
    EventEmitter.mixin = function(obj) {
      var em, prop;
      em = new EventEmitter();
      for (prop in em) {
        obj[prop] = em[prop];
      }
      return obj;
    };

    function EventEmitter() {
      if (this._events == null) {
        this._events = {};
      }
      if (this._bubbles == null) {
        this._bubbles = [];
      }
    }

    EventEmitter.prototype.addListener = function(event, callback, context) {
      var handler, handlers;
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.on = function() {
      return this.addListener.apply(this, arguments);
    };

    EventEmitter.prototype.removeListener = function(event, listener) {
      var handler, handlers, index, _i, _len;
      handlers = this._events[event];
      if (!listener) {
        return;
      }
      if (!handlers) {
        return this;
      }
      for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
        handler = handlers[index];
        if (handler.callback === listener) {
          handlers[index] = null;
        }
      }
      this._events[event] = handlers.filter(function(item) {
        return item;
      });
      return this;
    };

    EventEmitter.prototype.removeAllListeners = function(event) {
      if (event) {
        this._events[event] = [];
      } else {
        this._events = {};
      }
      return this;
    };

    EventEmitter.prototype.emit = function() {
      var event, handler, handlers, index, once, params, todos, _i, _j, _len, _len1;
      event = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      handlers = this._events[event];
      todos = [];
      if (handlers) {
        once = false;
        for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
          handler = handlers[index];
          todos.push(handler);
          if (handler.once) {
            once = true;
          }
        }
        if (once) {
          this._events[event] = handlers.filter(function(item) {
            return item.once !== true;
          });
        }
      }
      for (_j = 0, _len1 = todos.length; _j < _len1; _j++) {
        handler = todos[_j];
        handler.callback.apply(handler.context || this, params);
      }
      return this;
    };

    EventEmitter.prototype.once = function(event, callback, context) {
      var handler, handlers;
      handlers = this._events[event] = this._events[event] || [];
      handler = {
        callback: callback,
        context: context,
        once: true
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.bubble = function(emitter, event, processor) {
      var listener;
      listener = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (processor) {
            args = processor.apply(_this, args);
          } else {
            args.unshift(event);
          }
          return _this.emit.apply(_this, args);
        };
      })(this);
      emitter.on(event, listener);
      return this._bubbles.push({
        emitter: emitter,
        event: event,
        listener: listener
      });
    };

    EventEmitter.prototype.stopBubble = function(emitter, event) {
      this._bubbles = this._bubbles.filter(function(item) {
        if (item.emitter === emitter) {
          if (!event || item.event === event) {
            item.emitter.removeListener(item.event, item.listener);
            return false;
          }
        }
        return true;
      });
      return this;
    };

    EventEmitter.prototype.stopAllBubbles = function() {
      var item, _i, _len, _ref;
      _ref = this._bubbles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.emitter.removeListener(item.event, item.listener);
      }
      this._bubbles.length = 0;
      return this;
    };

    EventEmitter.prototype.listenBy = function(who, event, callback, context) {
      var handler, handlers;
      this._events[event] = this._events[event] || [];
      handlers = this._events[event];
      handler = {
        callback: callback,
        context: context || who,
        owner: who
      };
      handlers.push(handler);
      return this;
    };

    EventEmitter.prototype.stopListenBy = function(who) {
      var event, handler, handlers, index, _i, _len;
      for (event in this._events) {
        handlers = this._events[event];
        if (!handlers) {
          continue;
        }
        for (index = _i = 0, _len = handlers.length; _i < _len; index = ++_i) {
          handler = handlers[index];
          if (handler.owner && handler.owner === who) {
            handlers[index] = null;
          }
        }
        this._events[event] = handlers.filter(function(item) {
          return item;
        });
      }
      return this;
    };

    return EventEmitter;

  })();

  exports.EventEmitter = EventEmitter;

  Util = {};

  Util.isHTMLElement = function(template) {
    if (typeof HTMLElement === "object" && template instanceof HTMLElement || (template && typeof template === "object" && template.nodeType === 1 && typeof template.nodeName === "string")) {
      return true;
    }
    return false;
  };

  Util.isHTMLNode = function(o) {
    return (typeof Node === "object" && o instanceof Node) || o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
  };

  Util.isMobile = function() {
    if (navigator && navigator.userAgent) {
      return (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) && true;
    } else {
      return false;
    }
  };

  Util.getBrowserInfo = function() {
    var M, N, tem, ua;
    N = navigator.appName;
    ua = navigator.userAgent;
    M = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
    tem = ua.match(/version\/([\.\d]+)/i);
    if (M && tem !== null) {
      M[2] = tem[1];
    }
    M = M ? [M[1],M[2]] : [N, navigator.appVersion, '-?'];
    return {
      name: M[0],
      version: M[1],
      mobile: Util.isMobile()
    };
  };

  Util.browser = Util.getBrowserInfo();

  Util.capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  Util.slugToCamel = function(string) {
    return string.replace(/-[a-z]/ig, function(match) {
      return match.substring(1).toUpperCase();
    });
  };

  Util.camelToSlug = function(string, keepCase) {
    var result;
    if (keepCase == null) {
      keepCase = false;
    }
    result = string.replace(/[a-z][A-Z]/g, function(match) {
      return match[0] + "-" + match[1].toLowerCase();
    });
    if (!keepCase) {
      result = result.toLowerCase();
    }
    return result;
  };

  Util.clone = function(x, stack) {
    var item, obj, prop, r, _i, _len;
    if (stack == null) {
      stack = [];
    }
    if (x === null || x === void 0) {
      return x;
    }
    if (typeof x.clone === "function") {
      return x.clone();
    }
    if (__indexOf.call(stack, x) >= 0) {
      throw new Error("clone recursive object");
    }
    if (x instanceof Array) {
      r = [];
      stack.push(x);
      for (_i = 0, _len = x.length; _i < _len; _i++) {
        item = x[_i];
        r.push(Util.clone(item, stack));
      }
      return r;
    }
    if (typeof x === "object") {
      obj = {};
      stack.push(x);
      for (prop in x) {
        if (x.hasOwnProperty(prop)) {
          obj[prop] = Util.clone(x[prop], stack);
        }
      }
      return obj;
    }
    return x;
  };

  Util.compare = function(x, y) {
    var index, item, p, _i, _j, _len, _len1;
    if (x === y) {
      return true;
    }
    if (x instanceof Array && y instanceof Array) {
      if (x.length !== y.length) {
        return false;
      }
      for (index = _i = 0, _len = x.length; _i < _len; index = ++_i) {
        item = x[index];
        if (!Util.compare(item, y[index])) {
          return false;
        }
      }
      return true;
    }
    for (p in y) {
      if (typeof x[p] === 'undefined') {
        return false;
      }
    }
    for (p in y) {
      if (y[p]) {
        switch (typeof y[p]) {
          case 'object':
            if (!Util.compare(y[p], x[p])) {
              return false;
            }
            break;
          case 'function':
            if (typeof x[p] === 'undefined' || (p !== 'equals' && y[p].toString() !== x[p].toString())) {
              return false;
            }
            break;
          default:
            if (y[p] !== x[p]) {
              return false;
            }
        }
      } else if (x[p]) {
        return false;
      }
    }
    for (_j = 0, _len1 = x.length; _j < _len1; _j++) {
      p = x[_j];
      if (typeof y[p] === 'undefined') {
        return false;
      }
    }
    return true;
  };

  Leaf.Util = Util;

  Leaf.EventEmitter = EventEmitter;

  Util.createError = function() {
    var BaseError, CustomError, args, meta, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    args = args.filter(function(item) {
      return item;
    });
    meta = {};
    BaseError = Error;
    if (args[0] && args[0].prototype && Error.prototype.isPrototypeOf(args[0].prototype)) {
      BaseError = args[0];
      if (typeof args[1] === "object") {
        meta = args[1];
      }
    } else if (args[0] && typeof args[0] === "object") {
      meta = args[0];
    }
    CustomError = (function(_super) {
      __extends(CustomError, _super);

      CustomError.name = name;

      function CustomError(message, props) {
        var prop;
        if (props == null) {
          props = {};
        }
        CustomError.__super__.constructor.call(this, message);
        this.name = name;
        this.message = message || meta.message || props.message || name;
        for (prop in meta) {
          if (meta.hasOwnProperty(prop)) {
            this[prop] = meta[prop];
          }
        }
        for (prop in props) {
          if (props.hasOwnProperty(prop)) {
            this[prop] = props[prop];
          }
        }
      }

      CustomError.prototype.name = name;

      return CustomError;

    })(BaseError);
    return CustomError;
  };

  ErrorDoc = (function() {
    function ErrorDoc() {
      this.errors = {};
    }

    ErrorDoc.prototype.define = function(name, base, meta) {
      if (typeof base === "string") {
        if (!this.errors[base]) {
          throw new Error("base error " + base + " not found");
        } else {
          base = this.errors[base];
        }
      }
      this.errors[name] = Util.createError(name, base, meta);
      return this;
    };

    ErrorDoc.prototype.generate = function() {
      return this.errors;
    };

    ErrorDoc.create = function() {
      return new ErrorDoc();
    };

    return ErrorDoc;

  })();

  Leaf.ErrorDoc = ErrorDoc;

  EventEmitter = Leaf.EventEmitter;

  Errors = Leaf.ErrorDoc.create().define("AlreadyDestroyed").define("InvalidState").generate();

  States = (function(_super) {
    __extends(States, _super);

    States.Errors = Errors;

    function States() {
      this.state = "void";
      this.lastException = null;
      this.states = {};
      this.rescues = [];
      this.data = {};
      if (this._isDebugging) {
        this.debug();
      }
      States.__super__.constructor.call(this);
    }

    States.prototype.declare = function() {
      var state, states, _i, _len, _results;
      states = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        _results.push(this.states[state] = state);
      }
      return _results;
    };

    States.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      this.emit("destroy");
      this.isDestroyed = true;
      this.emit = function() {};
      this.on = function() {};
      this.once = function() {};
      return this.removeAllListeners();
    };

    States.prototype.extract = function() {
      var data, fields, item, _i, _len;
      fields = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      data = {};
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        item = fields[_i];
        data[item] = this.data[item];
      }
      return data;
    };

    States.prototype.setData = function(data) {
      var prop, _results;
      _results = [];
      for (prop in data) {
        if (data.hasOwnProperty(prop)) {
          _results.push(this.data[prop] = data[prop]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    States.prototype.at = function(state, callback) {
      var handlerName;
      handlerName = "at" + state[0].toUpperCase() + state.substring(1);
      this[handlerName] = callback;
      return this;
    };

    States.prototype.setState = function(state) {
      var stateHandler;
      if (!state) {
        throw new Errors.InvalidState("Can't set invalid states " + state);
      }
      if (this.state === "panic" && state !== "void") {
        return;
      }
      if (this.isDestroyed) {
        return;
      }
      this.state = state;
      if (this._waitingGiveName) {
        throw new Errors.InvalidState("Can't change to state " + state + " while waiting for " + this._waitingGiveName);
      }
      if (this._isDebugging && this._debugStateHandler) {
        this._debugStateHandler();
      }
      this.emit("state", state);
      this.emit("state/" + state);
      stateHandler = "at" + state[0].toUpperCase() + state.substring(1);
      if (this[stateHandler]) {
        return this[stateHandler](this._sole);
      }
    };

    States.prototype.error = function(error) {
      var rescue, _i, _len, _ref;
      this.panicError = error;
      this.panicState = this.state;
      _ref = this.rescues;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rescue = _ref[_i];
        if (rescue.state === this.panicState && this.panicError instanceof rescue.error) {
          if (this._debugRescueHandler) {
            this._debugRescueHandler();
          }
          this.recover();
          rescue.callback(error);
          break;
        }
      }
      if (this.panicError) {
        return this.setState("panic");
      }
    };

    States.prototype.recover = function(recoverState) {
      var error, state;
      error = this.panicError;
      state = this.panicState;
      this.respawn();
      if (recoverState) {
        this.setState(recoverState);
      }
      return {
        error: error,
        state: state
      };
    };

    States.prototype.rescue = function(state, error, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (!callback) {
        throw new Error("rescue should provide callbacks");
      }
      return this.rescues.push({
        state: state,
        error: error,
        callback: callback
      });
    };

    States.prototype.give = function() {
      var handler, items, name;
      name = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this._waitingGiveName === name) {
        handler = this._waitingGiveHandler;
        this._waitingGiveName = null;
        this._waitingGiveHandler = null;
        if (this._isDebugging && this._debugRecieveHandler) {
          this._debugRecieveHandler.apply(this, [name].concat(__slice.call(items)));
        }
        handler.apply(this, items);
      }
    };

    States.prototype.stopWaiting = function(name) {
      if (name) {
        if (this._waitingGiveName === name) {
          this._waitingGiveName = null;
          return this._waitingGiveHandler = null;
        } else {
          throw new Error("not waiting for " + name);
        }
      } else {
        this._waitingGiveName = null;
        return this._waitingGiveHandler = null;
      }
    };

    States.prototype.isWaitingFor = function(name) {
      if (!name && this._waitingGiveName) {
        return true;
      }
      if (name === this._waitingGiveName) {
        return true;
      }
      return false;
    };

    States.prototype.waitFor = function(name, handler) {
      if (this._waitingGiveName) {
        throw new Error("already waiting for " + this._waitingGiveName + " and can't wait for " + name + " now");
      }
      this._waitingGiveName = name;
      this._waitingGiveHandler = handler;
      if (this._isDebugging && this._debugWaitHandler) {
        this._debugWaitHandler();
      }
      this.emit("wait", name);
      return this.emit("wait/" + name);
    };

    States.prototype.atPanic = function() {
      if (this._isDebugging && this._debugPanicHandler) {
        this._debugPanicHandler();
      }
      return this.emit("panic", this.panicError, this.panicState);
    };

    States.prototype.reset = function(data) {
      if (data == null) {
        data = {};
      }
      this.data = data;
      return this.respawn();
    };

    States.prototype.getSole = function() {
      return this._sole;
    };

    States.prototype.checkSole = function(sole) {
      return this._sole === sole;
    };

    States.prototype.stale = function(sole) {
      return this._sole !== sole;
    };

    States.prototype.respawn = function() {
      this._sole = this._sole || 0;
      this._sole += 1;
      this._waitingGiveName = null;
      this._waitingGiveHandler = null;
      this.panicError = null;
      this.panicState = null;
      this.setState("void");
      return this.clear();
    };

    States.prototype.debug = function(option) {
      var close, log, _console;
      if (option == null) {
        option = {};
      }
      close = option.close;
      this._debugName = option.name || this.constructor && this.constructor.name || "Anonymouse";
      _console = option.console || console;
      log = function() {
        if (_console.debug) {
          return _console.debug.apply(_console, arguments);
        } else {
          return _console.log.apply(_console, arguments);
        }
      };
      if (close) {
        this._isDebugging = false;
      } else {
        this._isDebugging = true;
      }
      if (this._debugStateHandler == null) {
        this._debugStateHandler = (function(_this) {
          return function() {
            return log("" + (_this._debugName || '') + " state: " + _this.state);
          };
        })(this);
      }
      if (this._debugWaitHandler == null) {
        this._debugWaitHandler = (function(_this) {
          return function() {
            return log("" + (_this._debugName || '') + " waiting: " + _this._waitingGiveName);
          };
        })(this);
      }
      if (this._debugRescueHandler == null) {
        this._debugRescueHandler = (function(_this) {
          return function() {
            return log("" + (_this._debugName || '') + " rescue: " + _this.panicState + " => " + _this.panicError);
          };
        })(this);
      }
      if (this._debugPanicHandler == null) {
        this._debugPanicHandler = (function(_this) {
          return function() {
            return log("" + (_this._debugName || '') + " panic: " + (JSON.stringify(_this.panicError)));
          };
        })(this);
      }
      return this._debugRecieveHandler != null ? this._debugRecieveHandler : this._debugRecieveHandler = (function(_this) {
        return function() {
          var data, name;
          name = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          return log("" + (_this._debugName || '') + " recieve： " + name + " => " + (data.join(" ")));
        };
      })(this);
    };

    States.prototype.clear = function(handler) {
      var _handler;
      if (handler) {
        if (this._clearHandler) {
          throw new Error("already has clear handler");
        }
        return this._clearHandler = handler;
      } else {
        _handler = this._clearHandler;
        this._clearHandler = null;
        if (_handler) {
          return _handler();
        }
      }
    };

    return States;

  })(EventEmitter);

  Leaf.States = States;

  KeyEventManager = (function(_super) {
    __extends(KeyEventManager, _super);

    KeyEventManager.stack = [];

    KeyEventManager.instances = [];

    KeyEventManager.disable = function() {
      return this.isActive = true;
    };

    KeyEventManager.enable = function() {
      return this.isActive = false;
    };

    KeyEventManager.isActive = true;

    function KeyEventManager(node) {
      KeyEventManager.__super__.constructor.call(this);
      KeyEventManager.instances.push(this);
      this.isActive = false;
      if (node) {
        this.attachTo(node);
      }
    }

    KeyEventManager.prototype.attachTo = function(node) {
      this.attachment = node;
      $(this.attachment).keydown((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keydown", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
      return $(this.attachment).keyup((function(_this) {
        return function(e) {
          e.capture = function() {
            this.catchEvent = false;
            this.preventDefault();
            return this.stopImmediatePropagation();
          };
          if (_this.isActive && KeyEventManager.isActive) {
            _this.emit("keyup", e);
            return e.catchEvent;
          }
          return e.catchEvent;
        };
      })(this));
    };

    KeyEventManager.prototype.active = function() {
      return this.isActive = true;
    };

    KeyEventManager.prototype.deactive = function() {
      return this.isActive = false;
    };

    KeyEventManager.prototype.master = function() {
      if (KeyEventManager.current === this) {
        console.warn("already mastered");
        console.trace();
        return;
      }
      this.active();
      if (KeyEventManager.current) {
        KeyEventManager.current.deactive();
        KeyEventManager.stack.push(KeyEventManager.current);
      }
      return KeyEventManager.current = this;
    };

    KeyEventManager.prototype.unmaster = function() {
      var prev;
      if (KeyEventManager.current !== this) {
        console.warn("current KeyEventManager are not in master");
        console.trace();
        return false;
      }
      this.deactive();
      prev = null;
      if (KeyEventManager.stack.length > 0) {
        prev = KeyEventManager.stack.pop();
        prev.active();
      }
      KeyEventManager.current = prev;
      return true;
    };

    return KeyEventManager;

  })(EventEmitter);

  Key = {};

  Key["0"] = 48;

  Key["1"] = 49;

  Key["2"] = 50;

  Key["3"] = 51;

  Key["4"] = 52;

  Key["5"] = 53;

  Key["6"] = 54;

  Key["7"] = 55;

  Key["8"] = 56;

  Key["9"] = 57;

  if (Util.browser) {
    if (Util.browser.name === "firefox") {
      Key.cmd = 224;
    } else if (Util.browser.name === "opera") {
      Key.cmd = 17;
    } else {
      Key.cmd = 91;
    }
  } else {
    Key.cmd = 91;
  }

  Key.a = 65;

  Key.b = 66;

  Key.c = 67;

  Key.d = 68;

  Key.e = 69;

  Key.f = 70;

  Key.g = 71;

  Key.h = 72;

  Key.i = 73;

  Key.j = 74;

  Key.k = 75;

  Key.l = 76;

  Key.m = 77;

  Key.n = 78;

  Key.o = 79;

  Key.p = 80;

  Key.q = 81;

  Key.r = 82;

  Key.s = 83;

  Key.t = 84;

  Key.u = 85;

  Key.v = 86;

  Key.w = 87;

  Key.x = 88;

  Key.y = 89;

  Key.z = 90;

  Key.space = 32;

  Key.shift = 16;

  Key.ctrl = 17;

  Key.alt = 18;

  Key.left = 37;

  Key.up = 38;

  Key.right = 39;

  Key.down = 40;

  Key.enter = 13;

  Key.backspace = 8;

  Key.escape = 27;

  Key.del = Key["delete"] = 46;

  Key.esc = 27;

  Key.pageup = 33;

  Key.pagedown = 34;

  Key.tab = 9;

  Mouse = {};

  Mouse.left = 0;

  Mouse.middle = 1;

  Mouse.right = 2;

  Leaf.KeyEventManager = KeyEventManager;

  Leaf.Key = Key;

  Leaf.Mouse = Mouse;

  Model = (function(_super) {
    __extends(Model, _super);

    function Model(raw) {
      var data, field, _i, _len, _ref;
      if (raw == null) {
        raw = {};
      }
      Model.__super__.constructor.call(this);
      data = {};
      this.__defineGetter__("data", (function(_this) {
        return function() {
          return data;
        };
      })(this));
      this.__defineSetter__("data", (function(_this) {
        return function(obj) {
          return _this.sets(obj);
        };
      })(this));
      this._defines = {};
      this._idprop = null;
      this._silent = false;
      this._ref = 0;
      if (this.fields instanceof Array) {
        _ref = this.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          this.declare(field);
        }
      } else if (this.fields && typeof this.fields === "object") {
        for (field in this.fields) {
          this.declare(field);
        }
        this.defaults(this.fields);
      }
      this.data = raw;
    }

    Model.prototype.has = function(name) {
      if (this._defines[name]) {
        return true;
      }
      return false;
    };

    Model.prototype.declare = function(name) {
      var accessor, item, obj, _i, _len;
      if (name instanceof Array) {
        for (_i = 0, _len = name.length; _i < _len; _i++) {
          item = name[_i];
          this.declare(item);
        }
        return;
      }
      if (this._defines[name]) {
        console && console.warn && console.warn("already defines model property " + name);
        return;
      }
      obj = {};
      this._defines[name] = obj;
      accessor = {
        get: (function(_this) {
          return function() {
            return obj.value;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            if (obj.value === value) {
              return value;
            }
            obj.value = value;
            if (_this._silent) {
              return value;
            }
            _this.emit("change", name, value);
            _this.emit("change/" + name, value);
            return value;
          };
        })(this),
        enumerable: true
      };
      Object.defineProperty(this.data, name, accessor);
      if (typeof this[name] === "undefined") {
        return Object.defineProperty(this, name, accessor);
      } else {
        return console && console.warn && console.warn("Model property name '" + name + "' conflict with an existing property of this model instance, and won't be overwritten. You can access it safely via Model.data." + name + " instead of model." + name);
      }
    };

    Model.prototype.defaults = function(kv) {
      var prop, _results;
      _results = [];
      for (prop in kv) {
        if (this.has(prop)) {
          this._defines[prop]["default"] = kv[prop];
          if (typeof this.get(prop) === "undefined") {
            _results.push(this.set(prop, kv[prop]));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.reset = function() {
      var prop, _results;
      _results = [];
      for (prop in this._defines) {
        _results.push(this.data[prop] = this._defines[prop]["default"]);
      }
      return _results;
    };

    Model.prototype.get = function(key, value) {
      var result;
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      result = this.data[key];
      if (typeof result === "undefined") {
        return value;
      } else {
        return result;
      }
    };

    Model.prototype.set = function(key, value) {
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key);
      }
      if (!this._silent && this.data[key] === value) {
        this.emit("change");
        this.emit("change/" + key, value);
      }
      return this.data[key] = value;
    };

    Model.prototype.sets = function(obj) {
      var prop, value;
      if (!obj) {
        return;
      }
      this._silent = true;
      for (prop in this._defines) {
        if (typeof obj[prop] !== "undefined") {
          value = obj[prop];
          if (this.get(prop) !== value) {
            this.set(prop, value);
            this.emit("change/" + prop, value);
          }
        }
      }
      this.emit("change");
      return this._silent = false;
    };

    Model.prototype.preset = function(key, value) {
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key + " for " + this.constructor.name);
      }
      if (!this._defines[key].unstable) {
        this._defines[key].old = this.data[key];
      }
      this._defines[key].unstable = true;
      return this.data[key] = value;
    };

    Model.prototype.presets = function(obj) {
      var prop, _results;
      _results = [];
      for (prop in obj) {
        if (this.has(prop)) {
          _results.push(this.preset(prop, obj[prop]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.undo = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.undo(prop);
        }
        return;
      }
      if (!this._defines[key]) {
        throw new Error("undefined model property " + key + " for " + this.constructor.name);
      }
      if (this._defines[key].unstable) {
        this.data[key] = this._defines[key].old;
        this._defines[key].unstable = false;
        return delete this._defines[key].old;
      }
    };

    Model.prototype.confirm = function(key) {
      var prop;
      if (!key) {
        for (prop in this._defines) {
          this.confirm(prop);
        }
        return;
      }
      if (this._defines[key].unstable) {
        delete this._defines[key].old;
        return this._defines[key].unstable = false;
      }
    };

    Model.prototype.toJSON = function(option) {
      var complete, fields, prop, result;
      if (option == null) {
        option = {};
      }
      complete = option.complete;
      fields = option.fields;
      result = {};
      for (prop in this._defines) {
        if (typeof this.data[prop] === "undefined" && !complete) {
          continue;
        }
        if (fields instanceof Array && __indexOf.call(fields, prop) < 0) {
          continue;
        }
        result[prop] = this.data[prop];
        if (result[prop] instanceof Array) {
          result[prop] = result[prop].map(function(item) {
            if (item && typeof item.toJSON === "function") {
              return item.toJSON({
                complete: complete
              });
            }
            return item;
          });
        } else if (!result[prop]) {
          continue;
        } else if (typeof result[prop].toJSON === "function") {
          result[prop] = result[prop].toJSON({
            complete: complete
          });
        }
      }
      return result;
    };

    return Model;

  })(EventEmitter);

  Leaf.Model = Model;

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      Collection.__super__.constructor.call(this);
      this.models = [];
      this.id = null;
      this.__defineGetter__("length", (function(_this) {
        return function() {
          return _this.models.length;
        };
      })(this));
    }

    Collection.prototype.contain = function(model) {
      if (this.get(model)) {
        return true;
      }
      return false;
    };

    Collection.prototype.setId = function(id) {
      if (this.models.length !== 0) {
        throw new Error("set id should before collection has any content");
      }
      return this.id = id;
    };

    Collection.prototype.find = function(obj) {
      if (!obj) {
        return this.models.slice();
      }
      return this.models.filter(function(item) {
        var prop;
        for (prop in obj) {
          if (item.data[prop] !== obj[prop]) {
            return false;
          }
        }
        return true;
      });
    };

    Collection.prototype.findOne = function(obj) {
      var result;
      if (!obj) {
        return this.models[0];
      }
      result = null;
      this.models.some(function(item) {
        var prop;
        for (prop in obj) {
          if (item.data[prop] !== obj[prop]) {
            return false;
          }
        }
        result = item;
        return true;
      });
      return result;
    };

    Collection.prototype.get = function(model) {
      var id, target;
      target = null;
      if (this.id) {
        if (model instanceof Model) {
          id = model.get(this.id);
        } else {
          id = model;
        }
      }
      this.models.some((function(_this) {
        return function(old) {
          if (_this.id) {
            if (old.get(_this.id) === id) {
              target = old;
              return true;
            }
            return false;
          } else if (model === old) {
            target = old;
            return true;
          }
          return false;
        };
      })(this));
      if (target) {
        return target;
      }
      return null;
    };

    Collection.prototype.validate = function(model) {
      return true;
    };

    Collection.prototype.add = function(model) {
      var old;
      if (!(model instanceof Model)) {
        throw new Error("add invalid model, not instanceof Leaf.Model");
      }
      old = this.get(model);
      if (old) {
        old.sets(model.data);
        return old;
      }
      this.models.push(model);
      this._attachModel(model);
      this.emit("add", model);
      return model;
    };

    Collection.prototype.empty = function() {
      var model, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        this._detachModel(model);
        this.emit("remove", model);
      }
      return this.models = [];
    };

    Collection.prototype.remove = function(model) {
      var target;
      target = this.get(model);
      if (!target) {
        return false;
      }
      this.models = this.models.filter(function(item) {
        return item !== target;
      });
      this._detachModel(target);
      this.emit("remove", target);
      return true;
    };

    Collection.prototype._attachModel = function(model) {
      return model.listenBy(this, "change", (function(_this) {
        return function(key, value) {
          if (_this.id && key === _this.id) {
            throw new Error("shouldn't change id " + key + " for model inside a the collection");
          }
          _this.emit("change/model", model);
          return _this.emit("change/model/" + key, model, key, value);
        };
      })(this));
    };

    Collection.prototype._detachModel = function(model) {
      return model.stopListenBy(this);
    };

    return Collection;

  })(EventEmitter);

  Leaf.Collection = Collection;

  Namespace = (function(_super) {
    __extends(Namespace, _super);

    function Namespace() {
      Namespace.__super__.constructor.call(this);
      this.scope = {};
      this.widgets = [];
    }

    Namespace.prototype.include = function() {
      return this.register.apply(this, arguments);
    };

    Namespace.prototype.register = function(constructor, name) {
      if (!name) {
        name = constructor.name;
      } else if (!(constructor instanceof Leaf.Widget) || !name) {
        throw new Error("invalid namespace register with " + name);
      }
      if (__indexOf.call(this.widgets, constructor) >= 0) {
        return;
      }
      constructor.scopeName = name;
      this.scope[constructor.scopeName] = constructor;
      this.widgets.push(constructor);
      return this.selectorCache = null;
    };

    Namespace.prototype.getQuerySelector = function() {
      var extra;
      extra = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.selectorCache == null) {
        this.selectorCache = this.widgets.filter(function(item) {
          return item["public"] || true;
        }).map(function(item) {
          return Util.camelToSlug(item.scopeName);
        }).join(",").trim();
      }
      if (this.selectorCache) {
        extra.unshift(this.selectorCache.trim());
      }
      return extra.join(",");
    };

    Namespace.prototype.createWidgetByElement = function(elem, name) {
      var Constructor, attr, param, widget, _i, _j, _len, _len1, _ref, _ref1;
      name = Util.capitalize(Util.slugToCamel(name || elem.tagName.toLowerCase()));
      Constructor = this.scope[name];
      if (!Constructor) {
        return null;
      }
      param = {};
      _ref = elem.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (attr.name.indexOf("data-") !== 0) {
          param[Util.slugToCamel(attr.name)] = attr.value;
        }
      }
      widget = new Constructor(elem, param);
      _ref1 = elem.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        attr = _ref1[_j];
        if (attr.name === "class" && widget.node.className) {
          widget.node.className += " " + attr.value;
          continue;
        }
        widget.node.setAttribute(attr.name, attr.value);
        widget.node[attr.name] = attr.value;
      }
      return widget;
    };

    Namespace.prototype.setTemplates = function(templates) {
      return this.templates = templates;
    };

    return Namespace;

  })(Leaf.EventEmitter);

  Leaf.Namespace = Namespace;

  Widget = (function(_super) {
    __extends(Widget, _super);

    function Widget(option) {
      var template;
      if (option == null) {
        option = null;
      }
      Widget.__super__.constructor.call(this);
      template = null;
      if (!option) {
        template = null;
      } else if (typeof option === "string") {
        template = option;
      } else if (Util.isHTMLNode(option)) {
        template = option;
      } else if (typeof option === "object") {
        template = option.node || option.template || null;
      }
      this.namespace = this.namespace || (this.constructor && this.constructor.namespace) || new Leaf.Namespace();
      this.template = template || this.template || document.createElement("div");
      this.node = null;
      this.$node = null;
      this.node$ = null;
      this.UI = {};
      this.initTemplate(this.template);
      this._models = [];
    }

    Widget.prototype.include = function(widget) {
      this.namespace = this.namespace || (this.constructor && this.constructor.namespace) || Widget.ns || new Leaf.Namespace();
      return this.namespace.include(widget);
    };

    Widget.prototype.initTemplate = function(template) {
      var oldNode, query, tempNode;
      if (!template) {
        template = "<div></div>";
      }
      oldNode = this.node;
      if (typeof template === "string") {
        template = template.trim();
        if ((template.indexOf("<")) !== 0) {
          query = template;
          this.node = document.querySelector(query);
          if (!this.node) {
            console.error("template of query " + query + " not found");
            return;
          }
        } else {
          tempNode = document.createElement("div");
          tempNode.innerHTML = template.trim();
          this.node = tempNode.children[0];
          tempNode.removeChild(this.node);
        }
      } else if (Util.isHTMLNode(template)) {
        this.node = template;
      }
      this.node.widget = this;
      if (!this.node) {
        this.isValid = false;
        return;
      }
      if (typeof $ === "function") {
        this.$node = $(this.node);
        this.node$ = this.$node;
      }
      if (oldNode && oldNode.parentElement && oldNode !== this.node) {
        oldNode.parentElement.insertBefore(this.node, oldNode);
        oldNode.parentElement.removeChild(oldNode);
      }
      if (this.node.nodeType === this.node.TEXT_NODE) {
        return;
      }
      this.initSubTemplate();
      this.initUI();
      this.initSubWidgets();
      return this.initDelegates();
    };

    Widget.prototype.initSubTemplate = function() {
      var name, template, templateNodes, tmpl, _i, _len, _results;
      this.templates = this.templates || {};
      templateNodes = this.node.querySelectorAll("template");
      templateNodes = [].slice.call(templateNodes, 0);
      _results = [];
      for (_i = 0, _len = templateNodes.length; _i < _len; _i++) {
        tmpl = templateNodes[_i];
        template = tmpl.innerHTML;
        name = tmpl.getAttribute("data-name");
        if (tmpl) {
          tmpl.style.display = "none";
        }
        if (name) {
          _results.push(this.templates[name] = template);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Widget.prototype.expose = function(name, remoteName) {
      var capName, getterName, setterName;
      remoteName = remoteName || name;
      if (this[name] && typeof this[name] === "function") {
        return this.node.__defineGetter__(remoteName, (function(_this) {
          return function() {
            return _this[name].bind(_this);
          };
        })(this));
      } else {
        capName = Util.capitalize(name);
        getterName = "onGet" + capName;
        setterName = "onSet" + capName;
        this.node.__defineGetter__(remoteName, (function(_this) {
          return function() {
            if (_this[getterName]) {
              return _this[getterName](value, "property");
            }
            return _this[name];
          };
        })(this));
        return this.node.__defineSetter__(remoteName, (function(_this) {
          return function(value) {
            if (_this[setterName]) {
              return _this[setterName](value, "property");
            } else {
              return _this[name] = value;
            }
          };
        })(this));
      }
    };

    Widget.prototype.initSubWidgets = function() {
      var elem, elems, selector, _i, _len, _results;
      if (this.namespace) {
        selector = this.namespace.getQuerySelector("widget");
      } else {
        selector = "widget";
      }
      elems = this.node.querySelectorAll(selector);
      elems = [].slice.call(elems, 0);
      _results = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        _results.push(this.initSubWidget(elem));
      }
      return _results;
    };

    Widget.prototype.initSubWidget = function(elem) {
      var attr, name, widget, _i, _len, _ref;
      name = elem.dataset.widget;
      widget = (this[name] instanceof Widget) && this[name] || this.namespace.createWidgetByElement(elem);
      if (!widget) {
        console.warn("" + elem.tagName + " has name " + name + " but no widget nor no namespace present for it.");
        return;
      }
      widget.replace(elem);
      if (this[name] === widget) {
        _ref = elem.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          widget.node.setAttribute(attr.name, attr.value);
        }
      }
      if ((name != null) && (this[name] == null)) {
        this[name] = widget;
      }
      if (elem.dataset.id) {
        return this._bindUI(widget.node, elem.dataset.id);
      }
    };

    Widget.prototype.initUI = function() {
      var elems, id, node, subNode, _i, _len;
      node = this.node;
      elems = node.querySelectorAll("[data-id]");
      elems = [].slice.call(elems);
      elems.unshift(node);
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        subNode = elems[_i];
        if (subNode.tagName.toLowerCase() === "widget") {
          continue;
        }
        if (id = subNode.getAttribute("data-id")) {
          this._bindUI(subNode, id);
          this._delegateUnBubbleEvent(id);
        }
      }
      this._delegateUnBubbleEvent();
      return true;
    };

    Widget.prototype._bindUI = function(node, id) {
      this.UI[id] = node;
      node.widget = this;
      node.uiId = id;
      if (typeof $ === "function") {
        return this.UI[id + "$"] = this.UI["$" + id] = $(node);
      }
    };

    Widget.prototype._delegateTo = function(type, name, event) {
      var fnName;
      fnName = "on" + (Util.capitalize(event.type)) + (Util.capitalize(name));
      if (type === "group") {
        fnName += "Groups";
      }
      if (this[fnName]) {
        return this[fnName](event);
      }
      return true;
    };

    Widget.prototype.initDelegates = function() {
      var event, events, _i, _len, _results;
      if (this.disableDelegates) {
        return;
      }
      events = ["click", "mouseup", "mousedown", "mousemove", "mouseleave", "mouseenter", "mouseover", "keydown", "keyup", "keypress"];
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        _results.push((function(_this) {
          return function(event) {
            return _this.node.addEventListener(event, function(e) {
              var result, source, _results1;
              e.capture = function() {
                e.stopImmediatePropagation();
                return e.preventDefault();
              };
              source = e.target || e.srcElement;
              _results1 = [];
              while (source && !e.defaultPrevented) {
                e.currentTarget = source;
                if (source === _this.node) {
                  result = _this._delegateTo("self", "node", e);
                }
                if (source.widget && source.widget !== _this) {
                  break;
                } else if (source.uiId) {
                  result = _this._delegateTo("id", source.uiId, e);
                } else if (source.dataset.group) {
                  result = _this._delegateTo("group", source.dataset.group, e);
                }
                if (result === false) {
                  e.capture();
                  break;
                } else {
                  if (source === _this.node) {
                    break;
                  }
                  _results1.push(source = source.parentElement);
                }
              }
              return _results1;
            });
          };
        })(this)(event));
      }
      return _results;
    };

    Widget.prototype._delegateUnBubbleEvent = function(name) {
      var delegates, event, node, option, _i, _len, _ref, _results;
      if (this.disableDelegates) {
        return;
      }
      if (!name) {
        node = this.node;
        name = "node";
      } else {
        node = this.UI[name];
      }
      if (!node) {
        return;
      }
      delegates = [
        {
          names: ["input", "textarea"],
          events: ["change", "focus", "blur", "scroll"]
        }, {
          names: ["form"],
          events: ["submit"]
        }, {
          events: ["scroll"]
        }
      ];
      _results = [];
      for (_i = 0, _len = delegates.length; _i < _len; _i++) {
        option = delegates[_i];
        if (option.names && (_ref = node.tagName.toLowerCase(), __indexOf.call(option.names, _ref) < 0)) {
          continue;
        }
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = option.events;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            event = _ref1[_j];
            _results1.push((function(_this) {
              return function(event) {
                return node["on" + event] = function(e) {
                  return _this._delegateTo("id", name, e);
                };
              };
            })(this)(event));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Widget.prototype.appendTo = function(target) {
      if (Util.isHTMLNode(target)) {
        target.appendChild(this.node);
        return true;
      }
      if (target instanceof Leaf.Widget) {
        return target.node.appendChild(this.node);
      }
    };

    Widget.prototype.replace = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      this.before(target);
      if (target instanceof Widget) {
        target.remove();
        return;
      }
      if (Util.isHTMLNode(target) && target.parentElement) {
        target.parentElement.removeChild(target);
      }
    };

    Widget.prototype.prependTo = function(target) {
      var first;
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        return false;
      }
      if (target.children.length === 0) {
        target.appendChild(this.node);
      } else {
        first = target.children[0];
        target.insertBefore(this.node, first);
      }
      return true;
    };

    Widget.prototype.remove = function() {
      if (this.node.parentElement) {
        return this.node.parentElement.removeChild(this.node);
      }
    };

    Widget.prototype.after = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object", target);
        return false;
      }
      if (!target || !target.parentElement) {
        console.error("can't insert befere root element ");
        return false;
      }
      if (target.nextSibling) {
        return target.parentElement.insertBefore(this.node, target.nextSibling);
      } else {
        return target.parentElement.appendChild(this.node);
      }
    };

    Widget.prototype.before = function(target) {
      if (target === this || target === this.node) {
        return;
      }
      if (Util.isHTMLNode(target)) {
        target = target;
      } else if (target instanceof Leaf.Widget) {
        target = target.node;
      } else {
        console.error("Insert unknow Object,target");
        return false;
      }
      if (!target || !target.parentElement) {
        console.error("can't insert befere root element ");
        return false;
      }
      target.parentElement.insertBefore(this.node, target);
      return true;
    };

    Widget.prototype.occupy = function(target) {
      if (Util.isHTMLElemen(target)) {
        target.innerHTML = "";
      }
      if (target instanceof Leaf.Widget) {
        target.node.innerHTML = "";
      }
      return this.appendTo(target);
    };

    Widget.prototype.destroy = function() {
      var item, _i, _len, _ref, _results;
      this.emit("beforeDestroy");
      this.isDestroyed = true;
      this.removeAllListeners();
      if (this.node && this.node.querySelectorAll) {
        _ref = this.node.querySelectorAll("img") || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item.removeAttribute("src"));
        }
        return _results;
      }
    };

    return Widget;

  })(Leaf.EventEmitter);

  WidgetBase = Widget;

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.namespace = WidgetBase.namespace;

    Widget.attrs = ["text", "html", "class", "value", "attribute", "src"];

    function Widget(template) {
      this._ViewModel = new Model();
      Widget.__super__.constructor.call(this, template);
      this.__defineGetter__("Data", (function(_this) {
        return function() {
          return _this._ViewModel.data;
        };
      })(this));
      this.__defineGetter__("VM", (function(_this) {
        return function() {
          return _this._ViewModel.data;
        };
      })(this));
      this.__defineSetter__("VM", (function(_this) {
        return function(value) {
          return _this._ViewModel.data = value;
        };
      })(this));
    }

    Widget.prototype.initTemplate = function(template) {
      Widget.__super__.initTemplate.call(this, template);
      return this.initViewModel();
    };

    Widget.prototype.initViewModel = function() {
      var attrs, elem, elems, selector, _i, _len, _results;
      attrs = Widget.attrs;
      selector = (attrs.map(function(item) {
        return "[data-" + item + "]";
      })).join(",");
      if (!this.node.querySelectorAll) {
        return;
      }
      elems = [].slice.call(this.node.querySelectorAll(selector));
      elems.push(this.node);
      _results = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        _results.push(this.applyRenderRole(elem));
      }
      return _results;
    };

    Widget.prototype.applyRenderRole = function(elem) {
      var attr, attrs, info, _i, _len, _results;
      attrs = Widget.attrs;
      _results = [];
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        attr = attrs[_i];
        if (info = elem.getAttribute("data-" + attr)) {
          _results.push(this["_" + attr + "Role"](elem, info));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Widget.prototype.removeRenderRole = function(elem) {
      return this._ViewModel.stopListenBy(elem);
    };

    Widget.prototype._textRole = function(elem, who) {
      if (!this._ViewModel.has(who)) {
        this._ViewModel.declare(who);
      }
      return this._ViewModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.textContent = value;
        };
      })(this));
    };

    Widget.prototype._htmlRole = function(elem, who) {
      if (!this._ViewModel.has(who)) {
        this._ViewModel.declare(who);
      }
      return this._ViewModel.listenBy(elem, "change/" + who, (function(_this) {
        return function(value) {
          return elem.innerHTML = value;
        };
      })(this));
    };

    Widget.prototype._classRole = function(elem, whos) {
      var who, _i, _len, _results;
      whos = whos.split(",").map(function(item) {
        return item.trim();
      }).filter(function(item) {
        return item;
      });
      _results = [];
      for (_i = 0, _len = whos.length; _i < _len; _i++) {
        who = whos[_i];
        _results.push((function(_this) {
          return function(who) {
            var className, oldClass, _ref;
            if (who == null) {
              who = "";
            }
            className = null;
            _ref = who.split(":"), who = _ref[0], className = _ref[1];
            if (!_this._ViewModel.has(who)) {
              _this._ViewModel.declare(who);
            }
            oldClass = "";
            return _this._ViewModel.listenBy(elem, "change/" + who, function(value) {
              var decision;
              if (className) {
                decision = value;
                value = className;
                if (!decision) {
                  value = "";
                }
              }
              if (value && elem.classList.contains(value)) {
                if (oldClass && elem.classList.contains(oldClass)) {
                  elem.classList.remove(oldClass);
                }
                oldClass = value;
                return;
              }
              if (oldClass) {
                elem.classList.remove(oldClass);
              }
              if (value && !elem.classList.contains(value)) {
                elem.classList.add(value);
              }
              return oldClass = value;
            });
          };
        })(this)(who));
      }
      return _results;
    };

    Widget.prototype._attributeRole = function(elem, whats) {
      var pair, _i, _len, _results;
      if (whats == null) {
        whats = "";
      }
      whats = whats.split(",").map(function(item) {
        return item.trim().split(":");
      }).filter(function(pair) {
        return pair.length === 1 || pair.length === 2;
      });
      _results = [];
      for (_i = 0, _len = whats.length; _i < _len; _i++) {
        pair = whats[_i];
        _results.push((function(_this) {
          return function(pair) {
            var name, who;
            name = pair[0];
            who = pair[1] || name;
            if (!_this._ViewModel.has(who)) {
              _this._ViewModel.declare(who);
            }
            return _this._ViewModel.listenBy(elem, "change/" + who, function(value) {
              return elem.setAttribute(name, value);
            });
          };
        })(this)(pair));
      }
      return _results;
    };

    Widget.prototype._valueRole = function(elem, who) {
      return this._attributeRole(elem, "value:" + who);
    };

    Widget.prototype._srcRole = function(elem, who) {
      return this._attributeRole(elem, "src:" + who);
    };

    return Widget;

  })(Widget);

  List = (function(_super) {
    __extends(List, _super);

    function List(template, create) {
      List.__super__.constructor.call(this, template);
      this.init(create);
      Object.defineProperty(this, "length", {
        get: (function(_this) {
          return function() {
            return _this._length;
          };
        })(this),
        set: (function(_this) {
          return function(value) {
            var index, item, toRemove, _i, _j, _len, _ref, _results;
            toRemove = [];
            if (value > _this._length) {
              throw "can't asign length larger than the origin";
            }
            if (value < 0) {
              throw "can't asign length lesser than 0";
            }
            if (typeof value !== "number") {
              throw new TypeError();
            }
            for (index = _i = value, _ref = _this.length; value <= _ref ? _i < _ref : _i > _ref; index = value <= _ref ? ++_i : --_i) {
              toRemove.push(_this[index]);
              delete _this[index];
            }
            _this._length = value;
            _results = [];
            for (_j = 0, _len = toRemove.length; _j < _len; _j++) {
              item = toRemove[_j];
              _results.push(_this._detach(item));
            }
            return _results;
          };
        })(this)
      });
    }

    List.prototype.init = function(create) {
      this.create = create || this.create || (function(_this) {
        return function(item) {
          return item;
        };
      })(this);
      return this._length = 0;
    };

    List.prototype.map = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].map.apply(this, args);
    };

    List.prototype.some = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].some.apply(this, args);
    };

    List.prototype.forEach = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return [].forEach.apply(this, args);
    };

    List.prototype.check = function(item) {
      var child, _i, _len, _results;
      if (!(item instanceof Widget)) {
        throw "Leaf List only accept widget as element";
      }
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        child = this[_i];
        if (child === item) {
          throw "already exists";
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    List.prototype.indexOf = function(item) {
      var child, index, _i, _len;
      for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
        child = this[index];
        if (item === child) {
          return index;
        }
      }
      return -1;
    };

    List.prototype.push = function() {
      var item, items, _i, _len, _results;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        item = this.create(item);
        this.check(item);
        this[this._length] = item;
        if (this._length !== 0) {
          item.after(this[this._length - 1]);
        } else {
          item.appendTo(this.node);
        }
        this._length++;
        _results.push(this._attach(item));
      }
      return _results;
    };

    List.prototype.pop = function() {
      var item;
      if (this._length === 0) {
        return null;
      }
      this._length -= 1;
      item = this[this._length];
      delete this[this._length];
      this._detach(item);
      return item;
    };

    List.prototype.unshift = function(item) {
      var index, _i, _ref;
      item = this.create(item);
      this.check(item);
      if (this._length === 0) {
        item.prependTo(this.node);
        this[0] = item;
        this._length = 1;
        this._attach(item);
        return;
      }
      for (index = _i = _ref = this._length; _ref <= 1 ? _i <= 1 : _i >= 1; index = _ref <= 1 ? ++_i : --_i) {
        this[index] = this[index - 1];
      }
      this[0] = item;
      this._length += 1;
      item.before(this[1]);
      this._attach(item);
      return this._length;
    };

    List.prototype.removeItem = function(item) {
      var index;
      index = this.indexOf(item);
      if (index < 0) {
        return index;
      }
      this.splice(index, 1);
      return item;
    };

    List.prototype.shift = function() {
      var index, result, _i, _ref;
      result = this[0];
      for (index = _i = 0, _ref = this._length - 1; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
        this[index] = this[index + 1];
      }
      this._length -= 1;
      this._detach(result);
      return result;
    };

    List.prototype.splice = function() {
      var count, frag, increase, index, item, offset, origin, result, toAdd, toAddFinal, toRemoves, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
      index = arguments[0], count = arguments[1], toAdd = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      result = [];
      toRemoves = [];
      if (typeof count === "undefined" || index + count > this._length) {
        count = this._length - index;
      }
      for (offset = _i = 0; 0 <= count ? _i < count : _i > count; offset = 0 <= count ? ++_i : --_i) {
        item = this[index + offset];
        toRemoves.push(item);
        result.push(item);
      }
      toAddFinal = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = toAdd.length; _j < _len; _j++) {
          item = toAdd[_j];
          _results.push(this.create(item));
        }
        return _results;
      }).call(this);
      frag = document.createDocumentFragment();
      for (_j = 0, _len = toAddFinal.length; _j < _len; _j++) {
        item = toAddFinal[_j];
        this.check(item);
        frag.appendChild(item.node);
      }
      if (index < this.length && this.length > 0) {
        this.node.insertBefore(frag, this[index].node);
      } else {
        this.node.appendChild(frag);
      }
      increase = toAddFinal.length - count;
      if (increase < 0) {
        for (origin = _k = _ref = index + count, _ref1 = this._length; _ref <= _ref1 ? _k < _ref1 : _k > _ref1; origin = _ref <= _ref1 ? ++_k : --_k) {
          this[origin + increase] = this[origin];
        }
      } else if (increase > 0) {
        for (origin = _l = _ref2 = this._length - 1, _ref3 = index + count - 1; _ref2 <= _ref3 ? _l < _ref3 : _l > _ref3; origin = _ref2 <= _ref3 ? ++_l : --_l) {
          this[origin + increase] = this[origin];
        }
      }
      for (offset = _m = 0, _len1 = toAddFinal.length; _m < _len1; offset = ++_m) {
        item = toAddFinal[offset];
        this[index + offset] = item;
      }
      this._length += increase;
      for (_n = 0, _len2 = toRemoves.length; _n < _len2; _n++) {
        item = toRemoves[_n];
        this._detach(item);
      }
      for (_o = 0, _len3 = toAddFinal.length; _o < _len3; _o++) {
        item = toAddFinal[_o];
        this._attach(item);
      }
      return result;
    };

    List.prototype.slice = function(from, to) {
      return this.toArray().slice(from, to);
    };

    List.prototype.forEach = function(handler) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        _results.push(handler(item));
      }
      return _results;
    };

    List.prototype.toArray = function() {
      var item;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          item = this[_i];
          _results.push(item);
        }
        return _results;
      }).call(this);
    };

    List.prototype._attach = function(item) {
      item.parentList = this;
      this.emit("child/add", item);
      return this.emit("child/change");
    };

    List.prototype._detach = function(item) {
      var node;
      item.parentList = null;
      node = item.node;
      if (node && node.parentElement === this.node) {
        this.node.removeChild(node);
      }
      item.stopListenBy(this);
      this.emit("child/remove", item);
      return this.emit("child/change");
    };

    List.prototype.sort = function(judge) {
      return this.sync(this.toArray().sort(judge));
    };

    return List;

  })(Widget);

  Widget.List = List;

  Widget.makeList = (function(_this) {
    return function(node, create) {
      return new Widget.List(node, create);
    };
  })(this);

  Leaf.Widget = Widget;

  TemplateManager = (function(_super) {
    __extends(TemplateManager, _super);

    function TemplateManager() {
      TemplateManager.__super__.constructor.call(this);
      this.tids = [];
      this.baseUrl = "template/";
      this.templates = {};
      this.suffix = ".html";
      this.timeout = 10000;
      this.enableCache = false;
      this.randomQuery = true;
      this.cacheName = "templateManagerCache";
    }

    TemplateManager.prototype.use = function() {
      var tids;
      tids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.tids.push.apply(this.tids, tids);
    };

    TemplateManager.prototype.start = function() {
      return setTimeout(this._start.bind(this), 0);
    };

    TemplateManager.prototype.clearCache = function() {
      if (window.localStorage) {
        return window.localStorage.removeItem(this.cacheName);
      }
    };

    TemplateManager.prototype._start = function() {
      var all, caches, remain, remainTemplates, tid, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (this.enableCache) {
        caches = this._fromCacheAll();
        _ref = this.tids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tid = _ref[_i];
          this.templates[tid] = caches[tid];
        }
        if (this._isRequirementComplete()) {
          this._ready();
          return this;
        }
      }
      all = this._fromDomAll();
      _ref1 = this.tids;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tid = _ref1[_j];
        this.templates[tid] = all[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      remainTemplates = this._fromDomForEach(remain);
      for (_k = 0, _len2 = remain.length; _k < _len2; _k++) {
        tid = remain[_k];
        this.templates[tid] = remainTemplates[tid];
      }
      if (this._isRequirementComplete()) {
        this._ready();
        return this;
      }
      remain = this._getNotCompleteRequirements();
      return this._fromXHRForEach(remain, (function(_this) {
        return function(err, tid, template) {
          if (err != null) {
            _this.emit("error", err);
            return;
          }
          _this.templates[tid] = template;
          if (_this._isRequirementComplete()) {
            return _this._ready();
          }
        };
      })(this));
    };

    TemplateManager.prototype._ready = function() {
      if (this.isReady) {
        return;
      }
      this.isReady = true;
      if (this.enableCache && window.localStorage) {
        window.localStorage.setItem(this.cacheName, JSON.stringify(this.templates));
      }
      this.templates = this._extendNestedTemplates(this.templates);
      return this.emit("ready", this.templates);
    };

    TemplateManager.prototype._extendNestedTemplates = function(templates) {
      var index, part, pathes, prop, result, root, value, _i, _len;
      result = {};
      for (prop in templates) {
        pathes = prop.split("/");
        result[prop] = templates[prop];
        root = result;
        for (index = _i = 0, _len = pathes.length; _i < _len; index = ++_i) {
          part = pathes[index];
          if (index === pathes.length - 1) {
            if (typeof root[part] === "object") {
              root["root"] = templates[prop];
            } else if (root[part]) {
              root[part] = templates[prop];
            } else {
              root[part] = templates[prop];
            }
          } else {
            if (typeof root[part] === "string") {
              value = root[part];
              root[part] = {};
              root[part].root = value;
            } else if (typeof root[part] === "object") {
              true;
            } else {
              root[part] = {};
            }
          }
          root = root[part];
        }
      }
      return result;
    };

    TemplateManager.prototype._getNotCompleteRequirements = function() {
      var tid, _i, _len, _ref, _results;
      _ref = this.tids;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tid = _ref[_i];
        if (!this.templates[tid]) {
          _results.push(tid);
        }
      }
      return _results;
    };

    TemplateManager.prototype._isRequirementComplete = function() {
      var tid, _i, _len, _ref;
      _ref = this.tids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tid = _ref[_i];
        if (!this.templates[tid]) {
          return false;
        }
      }
      return true;
    };

    TemplateManager.prototype._fromCacheAll = function() {
      var e, info, templates;
      if (!window.localStorage) {
        return {};
      }
      info = window.localStorage.getItem(this.cacheName);
      if (!info) {
        return {};
      }
      try {
        templates = JSON.parse(info);
        return templates;
      } catch (_error) {
        e = _error;
        return {};
      }
    };

    TemplateManager.prototype._fromDomAll = function() {
      var e;
      try {
        return JSON.parse(document.querySelector("[data-json-templates]").innerHTML);
      } catch (_error) {
        e = _error;
        return {};
      }
    };

    TemplateManager.prototype._fromDomForEach = function(tids) {
      var templateNode, templates, tid, _i, _len;
      templates = {};
      for (_i = 0, _len = tids.length; _i < _len; _i++) {
        tid = tids[_i];
        templateNode = document.querySelector("[data-template-name='" + tid + "']");
        templates[tid] = templateNode ? templateNode.innerHTML : void 0;
      }
      return templates;
    };

    TemplateManager.prototype._fromXHRForEach = function(tids, callback) {
      var targetURI, tid, _fn, _i, _len;
      _fn = (function(_this) {
        return function() {
          var XHR;
          XHR = new XMLHttpRequest();
          XHR.open("GET", targetURI, true);
          XHR.send(null);
          XHR.tid = tid;
          XHR.terminator = setTimeout(function() {
            callback("timeout", XHR.tid, null);
            XHR.done = true;
            return XHR.abort();
          }, _this.timeout);
          return XHR.onreadystatechange = function() {
            var _ref;
            if (this.done) {
              return;
            }
            if (this.readyState === 0) {
              callback(new Error("fail to load template"));
              return;
            }
            if (this.readyState === 4) {
              this.done = true;
              if (!this.status || ((_ref = this.status) === 200 || _ref === 302 || _ref === 304)) {
                return callback(null, this.tid, this.responseText);
              } else {
                return callback(this.status, this.tid, null);
              }
            }
          };
        };
      })(this);
      for (_i = 0, _len = tids.length; _i < _len; _i++) {
        tid = tids[_i];
        if (tid.indexOf(".") >= 1) {
          targetURI = this.baseUrl + tid;
        } else {
          targetURI = this.baseUrl + tid + this.suffix;
        }
        if (this.randomQuery && targetURI) {
          if (targetURI.indexOf("?") >= 0) {
            targetURI += "&r=" + (Math.random());
          } else {
            targetURI += "?r=" + (Math.random());
          }
        }
        _fn();
      }
      return null;
    };

    return TemplateManager;

  })(Leaf.EventEmitter);

  exports.TemplateManager = TemplateManager;

  RestApiFactory = (function() {
    RestApiFactory.Error = {
      NetworkError: "NetworkError",
      ServerError: "ServerError",
      InvalidDataType: "InvalidDataType"
    };

    function RestApiFactory() {
      this.stateField = "state";
      this.dataField = "data";
      this.errorField = "error";
      this.defaultMethod = "GET";
    }

    RestApiFactory.prototype.prefix = function(prefix) {
      return this._prefix = prefix || "";
    };

    RestApiFactory.prototype.suffix = function(suffix) {
      return this._suffix = suffix || "";
    };

    RestApiFactory.prototype.reset = function() {
      return this._prefix;
    };

    RestApiFactory.prototype.create = function(option) {
      var method, reg, routeParams, _url;
      if (option == null) {
        option = {};
      }
      method = option.method || this.defaultMethod || "GET";
      _url = this._prefix + option.url;
      if (!_url) {
        throw new Error("API require en URL");
      }
      reg = /:[a-z_][a-z0-9_]*/ig;
      routeParams = (_url.match(reg) || []).map(function(item) {
        return item.substring(1);
      });
      return (function(_this) {
        return function(data, callback) {
          var prop, reqOption, url, xhr;
          if (callback == null) {
            callback = function() {
              return true;
            };
          }
          if (option.data) {
            for (prop in option.data) {
              if (typeof data[prop] === "undefined") {
                data[prop] = option.data[prop];
              }
            }
          }
          url = _url;
          for (prop in data) {
            if (__indexOf.call(routeParams, prop) >= 0) {
              url = url.replace(new RegExp(":" + prop, "g"), _this.escapeRouteParam(data[prop]));
              delete data[prop];
            }
          }
          reqOption = {
            url: url,
            method: method,
            data: data,
            option: option.option
          };
          xhr = _this.request(reqOption, callback);
          return xhr;
        };
      })(this);
    };

    RestApiFactory.prototype.escapeRouteParam = function(data) {
      return encodeURIComponent(data);
    };

    RestApiFactory.prototype.parse = function(err, data, callback) {
      if (data == null) {
        data = {};
      }
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (err) {
        callback(err);
        return;
      }
      if (data.state) {
        callback(null, data.data);
      } else {
        callback(data.error || RestApiFactory.Error.ServerError);
      }
    };

    RestApiFactory.prototype.request = function(option, callback) {
      var done, method, url, xhr, _callback;
      method = option.method || "GET";
      if (method.toLowerCase() === "get") {
        url = option.url + "?" + this._encodeDataPayload(option.data);
      } else {
        url = option.url;
      }
      xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      done = false;
      _callback = callback;
      callback = (function(_this) {
        return function(err, response) {
          return (option.parser || _this.parse)(err, response, _callback);
        };
      })(this);
      xhr.onreadystatechange = (function(_this) {
        return function() {
          var data, e;
          if (xhr.readyState === 0 && !done) {
            callback(RestApiFactory.Error.NetworkError, null);
            return;
          }
          if (xhr.readyState === 4) {
            done = true;
            if (xhr.responseText) {
              try {
                data = JSON.parse(xhr.responseText);
              } catch (_error) {
                e = _error;
                callback(RestApiFactory.Error.InvalidDataType, xhr.responseText);
                return;
              }
              return callback(null, data);
            } else {
              return callback(RestApiFactory.Error.InvalidDataType);
            }
          }
        };
      })(this);
      if (method.toLowerCase() !== "get") {
        xhr.send(this._encodeDataPayload(option.data));
      } else {
        xhr.send();
      }
      return xhr;
    };

    RestApiFactory.prototype._encodeDataPayload = function(data) {
      if (data == null) {
        data = {};
      }
      return this.querify(data);
    };

    RestApiFactory.prototype.querify = function(data) {
      var base, encode, isolate, item, keys, querys, results, value, _i, _len;
      encode = encodeURIComponent;
      isolate = function(data) {
        var index, item, part, prop, result, _i, _j, _len, _len1;
        if (typeof data === "string") {
          return [encode(data)];
        } else if (typeof data === "number") {
          return [encode(data)];
        } else if (typeof data instanceof Date) {
          return data.toString();
        } else if (!data) {
          return [];
        }
        result = [];
        if (data instanceof Array) {
          for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
            item = data[index];
            result.push([index].concat(isolate(item)));
          }
          return result;
        }
        for (prop in data) {
          part = isolate(data[prop]);
          for (_j = 0, _len1 = part.length; _j < _len1; _j++) {
            item = part[_j];
            result.push([encode(prop)].concat(item));
          }
        }
        return result;
      };
      results = isolate(data);
      querys = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        item = results[_i];
        if (item.length < 2) {
          continue;
        }
        value = item.pop();
        base = item.shift();
        keys = item.map(function(key) {
          return "[" + key + "]";
        });
        querys.push(base + keys.join("") + "=" + value);
      }
      return querys.join("&");
    };

    return RestApiFactory;

  })();

  exports.RestApiFactory = RestApiFactory;

}).call(this);
