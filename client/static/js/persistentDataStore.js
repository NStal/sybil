// Generated by CoffeeScript 1.8.0
(function() {
  var App, PersistentDataStore, PersistentDataStoreManager, async, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("app");

  async = require("lib/async");

  _ = require("lib/lodash");

  PersistentDataStoreManager = (function() {
    function PersistentDataStoreManager() {
      this.indexes = [];
    }

    PersistentDataStoreManager.prototype.syncIndex = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("getConfig", "configIndex", (function(_this) {
        return function(err, indexes) {
          var index, _i, _len;
          if (err) {
            callback(err);
            return;
          }
          if (indexes instanceof Array) {
            indexes = indexes.map(function(name) {
              return {
                name: name
              };
            });
            for (_i = 0, _len = indexes.length; _i < _len; _i++) {
              index = indexes[_i];
              if (!(_this.indexes.some(function(old) {
                return old.name === index.name;
              }))) {
                _this.indexes.push(index);
              }
            }
          }
          return callback(null);
        };
      })(this));
    };

    PersistentDataStoreManager.prototype.saveIndex = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("saveConfig", {
        name: "configIndex",
        data: this.indexes.map(function(index) {
          return index.name;
        })
      }, function(err) {
        return callback(err);
      });
    };

    PersistentDataStoreManager.prototype.load = function(name, callback) {
      var found, store;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      if (!this.indexes) {
        throw new Error("can load store before sync indexes");
      }
      store = null;
      found = this.indexes.some(function(index) {
        if (index.name === name) {
          if (index.store) {
            store = index.store;
          }
          return true;
        }
        return false;
      });
      if (!found) {
        store = new PersistentDataStore(name);
        this.indexes.push({
          name: name,
          store: store
        });
        this.saveIndex();
        callback(null, store);
        return;
      }
      store = store || new Store(name);
      return store.load(function(err) {
        return callback(err, store);
      });
    };

    return PersistentDataStoreManager;

  })();

  PersistentDataStore = (function(_super) {
    __extends(PersistentDataStore, _super);

    function PersistentDataStore(name, data) {
      this.name = name;
      this.data = data != null ? data : {};
      this._delaySaveCallbackes = [];
      this.delayTime = 100;
    }

    PersistentDataStore.prototype.load = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("getConfig", this.name, (function(_this) {
        return function(err, data) {
          if (err) {
            callback(err);
            return;
          }
          data = data || {};
          _this.data = data;
          return callback();
        };
      })(this));
    };

    PersistentDataStore.prototype.save = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("saveConfig", {
        name: this.name,
        data: this.data
      }, function(err) {
        return callback(err);
      });
    };

    PersistentDataStore.prototype.delaySave = function(callback) {
      var save;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      this._delaySaveCallbackes.push(callback);
      clearTimeout(this._delayTimer);
      save = (function(_this) {
        return function() {
          return _this.save(function(err) {
            var callbacks, _i, _len, _results;
            callbacks = _this._delaySaveCallbackes.splice(0);
            _results = [];
            for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
              callback = callbacks[_i];
              _results.push(callback(err));
            }
            return _results;
          });
        };
      })(this);
      return this._delayTimer = setTimeout(save, this.delayTime || 100);
    };

    PersistentDataStore.prototype.set = function(key, value) {
      this.data[key] = _.cloneDeep(value);
      return this.delaySave();
    };

    PersistentDataStore.prototype.get = function(key, defaultValue) {
      return (_.cloneDeep(this.data[key])) || defaultValue;
    };

    return PersistentDataStore;

  })(Leaf.EventEmitter);

  exports.Store = PersistentDataStore;

  exports.Manager = PersistentDataStoreManager;

}).call(this);
