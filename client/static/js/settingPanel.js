// Generated by CoffeeScript 1.8.0
(function() {
  var App, IntEntry, SettingEntry, SettingGroup, SettingPanel, StringEntry, async,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = require("app");

  async = require("lib/async");

  SettingPanel = (function(_super) {
    __extends(SettingPanel, _super);

    function SettingPanel() {
      SettingPanel.__super__.constructor.call(this, $(".setting-panel")[0]);
      this.hide();
      this.groups = Leaf.Widget.makeList(this.UI.settingGroups);
      this.adjust();
      App.afterInitialLoad((function(_this) {
        return function() {
          return _this.sync();
        };
      })(this));
    }

    SettingPanel.prototype.show = function() {
      this.node$.show();
      return this.adjust();
    };

    SettingPanel.prototype.adjust = function() {
      this.left = ($(document.body).width() - this.node$.width()) / 2;
      this.top = ($(document.body).height() - this.node$.height()) / 2;
      return this.node$.css({
        top: this.top,
        left: this.left
      });
    };

    SettingPanel.prototype.hide = function() {
      return this.node$.hide();
    };

    SettingPanel.prototype.activeGroup = function(group) {
      var entry, _i, _len, _ref, _results;
      if (this.currentGroup) {
        this.currentGroup.deactive();
      }
      this.currentGroup = group;
      this.currentGroup.active();
      this.UI.settingEntrys$.empty();
      this.UI.groupTitle$.text(group.name);
      _ref = group.entrys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        _results.push(entry.appendTo(this.UI.settingEntrys));
      }
      return _results;
    };

    SettingPanel.prototype.addGroup = function(group) {
      this.groups.push(group);
      return group.on("select", (function(_this) {
        return function() {
          return _this.activeGroup(group);
        };
      })(this));
    };

    SettingPanel.prototype._setOptions = function(options) {
      var group, _results;
      this.groups.length = 0;
      _results = [];
      for (group in options) {
        group = new SettingGroup(group, options[group]);
        _results.push(this.addGroup(group));
      }
      return _results;
    };

    SettingPanel.prototype.sync = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      return App.messageCenter.invoke("getSettings", {}, (function(_this) {
        return function(err, result) {
          if (err) {
            callback(err);
            return;
          }
          _this._setOptions(result);
          return callback(null);
        };
      })(this));
    };

    SettingPanel.prototype.onClickResetButton = function() {
      var entry, _i, _len, _ref, _results;
      if (!this.currentGroup) {
        return;
      }
      _ref = this.currentGroup.entrys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        _results.push(entry.reset());
      }
      return _results;
    };

    SettingPanel.prototype.onClickApplyButton = function() {
      if (!this.currentGroup) {
        return;
      }
      return async.each(this.currentGroup.entrys, ((function(_this) {
        return function(entry, done) {
          return entry.validate(function(err, result) {
            if (err || !result) {
              done(err);
              return;
            }
            return entry.update(function(err) {
              return done(err);
            });
          });
        };
      })(this)), (function(_this) {
        return function(err) {
          if (err) {
            return App.showError(err);
          }
        };
      })(this));
    };

    SettingPanel.prototype.onClickCancelButton = function() {
      this.onClickResetButton();
      return this.hide();
    };

    return SettingPanel;

  })(Leaf.Widget);

  SettingGroup = (function(_super) {
    __extends(SettingGroup, _super);

    function SettingGroup(name, info) {
      var Entry, data, entry;
      this.name = name;
      this.info = info;
      SettingGroup.__super__.constructor.call(this, "<div></div>");
      this.node$.addClass("group");
      this.entrys = [];
      for (name in this.info) {
        data = this.info[name];
        if (data.type === "int") {
          Entry = IntEntry;
        } else {
          Entry = StringEntry;
        }
        entry = new Entry(this, name, data);
        entry.setValue(data.value);
        this.entrys.push(entry);
      }
      this.node$.text(this.name);
    }

    SettingGroup.prototype.active = function() {
      return this.node$.addClass("active");
    };

    SettingGroup.prototype.deactive = function() {
      return this.node$.removeClass("active");
    };

    SettingGroup.prototype.onClickNode = function() {
      return this.emit("select");
    };

    return SettingGroup;

  })(Leaf.Widget);

  SettingEntry = (function(_super) {
    __extends(SettingEntry, _super);

    function SettingEntry(template) {
      SettingEntry.__super__.constructor.call(this, template);
      if (this.name) {
        this.UI.name$.text(this.name);
      }
      if (this.UI.input) {
        this.UI.input$.on("keyup", (function(_this) {
          return function() {
            return _this.delayValidate();
          };
        })(this));
      }
    }

    SettingEntry.prototype.delayValidate = function() {
      if (this.delayValidateTimer) {
        clearTimeout(this.delayValidateTimer);
        this.delayValidateTimer = null;
      }
      return this.delayValidateTimer = setTimeout(this.validate.bind(this), 100);
    };

    SettingEntry.prototype.validate = function(callback) {
      var value;
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      value = this.getValue();
      return App.messageCenter.invoke("validateSettingEntry", {
        setting: this.group.name,
        entry: this.name,
        value: value
      }, (function(_this) {
        return function(err, result) {
          console.debug(err, result);
          if (err) {
            callback(err);
            return;
          }
          if (!result.valid) {
            _this.isValid = true;
            _this.error(result.error || "invalid value");
          } else {
            _this.correct();
          }
          if (result) {
            return callback(null, result);
          } else {
            return callback(null, result);
          }
        };
      })(this));
    };

    SettingEntry.prototype.update = function(callback) {
      if (callback == null) {
        callback = function() {
          return true;
        };
      }
      console.debug("update into validate");
      return this.validate((function(_this) {
        return function(err, result) {
          var validValue;
          console.debug("validate return");
          if (err) {
            console.error(err);
            callback(err);
            return;
          }
          if (!result.valid) {
            console.debug("invalid", result);
            callback("invalid");
            return;
          }
          validValue = result.value;
          console.debug("invoke update");
          return App.messageCenter.invoke("updateSettingEntry", {
            setting: _this.group.name,
            entry: _this.name,
            value: validValue
          }, function(err) {
            if (err) {
              console.error(err);
              callback(err);
              return;
            }
            _this.correct();
            _this.setValue(validValue);
            return callback();
          });
        };
      })(this));
    };

    SettingEntry.prototype.getValue = function() {
      return this.UI.input$.val().trim();
    };

    SettingEntry.prototype.setValue = function(value) {
      this.value = value;
      return this.UI.input$.val(value);
    };

    SettingEntry.prototype.reset = function() {
      var value;
      value = this.value || "";
      this.UI.input$.val(value);
      return this.validate();
    };

    SettingEntry.prototype.error = function(message) {
      return this.UI.errorMessage$.text(message);
    };

    SettingEntry.prototype.correct = function() {
      return this.UI.errorMessage$.text("");
    };

    return SettingEntry;

  })(Leaf.Widget);

  IntEntry = (function(_super) {
    __extends(IntEntry, _super);

    function IntEntry(group, name, info) {
      this.group = group;
      this.name = name;
      this.info = info;
      IntEntry.__super__.constructor.call(this, App.templates["int-entry"]);
    }

    return IntEntry;

  })(SettingEntry);

  StringEntry = (function(_super) {
    __extends(StringEntry, _super);

    function StringEntry(group, name, info) {
      this.group = group;
      this.name = name;
      this.info = info;
      StringEntry.__super__.constructor.call(this, App.templates["int-entry"]);
    }

    return StringEntry;

  })(SettingEntry);

  module.exports = SettingPanel;

}).call(this);
