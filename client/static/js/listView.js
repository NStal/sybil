// Generated by CoffeeScript 1.7.1
(function() {
  var ArchiveList, ArchiveListItem, List, ListArchiveDisplayer, ListItem, ListView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      this.list = new List();
      this.archives = new ArchiveList();
      this.archiveDisplayer = new ListArchiveDisplayer();
      console.debug(this.archiveDisplayer.node, this.archiveDisplayer, "!!!");
      this.list.on("select", (function(_this) {
        return function(archiveList) {
          return _this.archives.load(archiveList.archiveList);
        };
      })(this));
      this.archives.on("select", (function(_this) {
        return function(archiveListItem) {
          _this.archiveDisplayer.display(archiveListItem.archive);
          if (_this.currentArchiveListItem) {
            _this.currentArchiveListItem.deselect();
          }
          return _this.currentArchiveListItem = archiveListItem;
        };
      })(this));
      ListView.__super__.constructor.call(this, $(".list-view")[0], "list view");
      this.list.appendTo(this.node);
      this.archives.appendTo(this.node);
      this.archiveDisplayer.appendTo(this.node);
    }

    return ListView;

  })(View);

  List = (function(_super) {
    __extends(List, _super);

    function List() {
      var list, _i, _len, _ref;
      List.__super__.constructor.call(this, App.templates["list-view-list"]);
      this.lists = Leaf.Widget.makeList(this.UI.container);
      _ref = Model.ArchiveList.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        this.lists.push(new ListItem(list));
      }
      Model.on("archiveList/add", (function(_this) {
        return function(list) {
          return _this.lists.push(new ListItem(list));
        };
      })(this));
      this.lists.on("child/add", (function(_this) {
        return function(list) {
          list.on("select", function() {
            _this.emit("select", list);
            if (_this.current) {
              _this.current.node$.removeClass("select");
            }
            return _this.current = list;
          });
          if (_this.lists.length === 1) {
            return list.onClickNode();
          }
        };
      })(this));
    }

    return List;

  })(Leaf.Widget);

  ListItem = (function(_super) {
    __extends(ListItem, _super);

    function ListItem(archiveList) {
      this.archiveList = archiveList;
      this.onClickNode = __bind(this.onClickNode, this);
      ListItem.__super__.constructor.call(this, App.templates["list-view-list-item"]);
      this.archiveList.on("add", (function(_this) {
        return function(archive) {
          return _this.render();
        };
      })(this));
      this.archiveList.on("remove", (function(_this) {
        return function(archive) {
          return _this.render();
        };
      })(this));
      this.archiveList.on("change", (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.render();
    }

    ListItem.prototype.render = function() {
      this.UI.name$.text(this.archiveList.name);
      console.debug(this.archiveList);
      this.UI.unreadCounter$.text(this.archiveList.count);
      return this.name = this.archiveList.name;
    };

    ListItem.prototype.onClickNode = function() {
      this.emit("select", this);
      return this.node$.addClass("select");
    };

    return ListItem;

  })(Leaf.Widget);

  ArchiveList = (function(_super) {
    __extends(ArchiveList, _super);

    function ArchiveList() {
      ArchiveList.__super__.constructor.call(this, App.templates["list-view-archive-list"]);
      this.addArchive = this.addArchive.bind(this);
      this.removeArchive = this.removeArchive.bind(this);
      this.on("child/add", (function(_this) {
        return function(archiveListItem) {
          archiveListItem.listName = _this.currentList.name;
          return archiveListItem.on("select", function() {
            return _this.emit("select", archiveListItem);
          });
        };
      })(this));
    }

    ArchiveList.prototype.load = function(list) {
      if (this.currentList) {
        this.currentList.removeListener("add", this.addArchive);
        this.currentList.removeListener("remove", this.removeArchive);
      }
      this.currentList = list;
      this.currentList.getArchives((function(_this) {
        return function(err, archives) {
          var archive, _i, _len, _results;
          _this.length = 0;
          _results = [];
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            _results.push(_this.push(new ArchiveListItem(archive)));
          }
          return _results;
        };
      })(this));
      list = this.currentList;
      this.currentList.on("add", this.addArchive);
      return this.currentList.on("remove", this.removeArchive);
    };

    ArchiveList.prototype.addArchive = function(archive) {
      var item, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        if (item.archive.guid === archive.guid) {
          if (item.isDone) {
            item.isDone = false;
            item.render();
          }
          return;
        }
      }
      return this.push(new ArchiveListItem(archive));
    };

    ArchiveList.prototype.removeArchive = function(archive) {
      var index, item, _i, _len;
      for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
        item = this[index];
        if (item.archive.guid === archive.guid) {
          if (!item.isDone) {
            item.isDone = true;
            item.render();
            return;
          }
        }
      }
    };

    return ArchiveList;

  })(Leaf.Widget.List);

  ArchiveListItem = (function(_super) {
    __extends(ArchiveListItem, _super);

    function ArchiveListItem(archive) {
      this.archive = archive;
      ArchiveListItem.__super__.constructor.call(this, App.templates["list-view-archive-list-item"]);
      this.render();
      this.isDone = false;
    }

    ArchiveListItem.prototype.onClickNode = function() {
      return this.select();
    };

    ArchiveListItem.prototype.select = function() {
      this.emit("select", this);
      return this.node$.addClass("select");
    };

    ArchiveListItem.prototype.deselect = function() {
      return this.node$.removeClass("select");
    };

    ArchiveListItem.prototype.render = function() {
      this.UI.title$.text(this.archive.title);
      this.UI.content$.text(this.genPreview(this.archive.content));
      this.UI.date$.text(moment(this.archive.createDate).format("YYYY-MM-DD"));
      if (!this.isDone) {
        return this.node$.removeClass("clear");
      } else {
        return this.node$.addClass("clear");
      }
    };

    ArchiveListItem.prototype.markAsDone = function() {
      if (this.isDone) {
        return;
      }
      return this.archive.changeList(null, (function(_this) {
        return function(err) {
          _this.isDone = true;
          return _this.render();
        };
      })(this));
    };

    ArchiveListItem.prototype.markAsUndone = function() {
      if (!this.isDone) {
        return;
      }
      console.debug("mark as undone", this.listName);
      return this.archive.changeList(this.listName, (function(_this) {
        return function(err) {
          _this.isDone = false;
          return _this.render();
        };
      })(this));
    };

    ArchiveListItem.prototype.onClickDone = function() {
      if (this.isDone) {
        return this.markAsUndone();
      } else {
        return this.markAsDone();
      }
    };

    ArchiveListItem.prototype.genPreview = function(content) {
      var container, result;
      container = document.createElement("div");
      container.innerHTML = content;
      result = $(container).text().trim().substring(0, 80);
      if (result.length === 80) {
        result += "...";
      } else if (result.length === 0) {
        result = "( empty )";
      }
      return result;
    };

    return ArchiveListItem;

  })(Leaf.Widget);

  ListArchiveDisplayer = (function(_super) {
    __extends(ListArchiveDisplayer, _super);

    function ListArchiveDisplayer() {
      ListArchiveDisplayer.__super__.constructor.call(this, App.templates["archive-displayer"]);
      this.node$.addClass("no-article");
    }

    ListArchiveDisplayer.prototype.display = function(archive) {
      this.node$.removeClass("no-article");
      this.setArchive(archive);
      return this.render();
    };

    return ListArchiveDisplayer;

  })(ArchiveDisplayer);

  window.ListView = ListView;

}).call(this);
