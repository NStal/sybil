// Generated by CoffeeScript 1.7.1
(function() {
  var App, ArchiveDisplayer, ArchiveList, ArchiveListItem, List, ListArchiveDisplayer, ListItem, ListView, Model, ScrollChecker, SwipeChecker, View, moment,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = require("app");

  SwipeChecker = require("util/swipeChecker");

  Model = require("model");

  View = require("view");

  ArchiveDisplayer = require("archiveDisplayer");

  ScrollChecker = require("util/scrollChecker");

  moment = require("lib/moment");

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      var checker;
      this.list = new List();
      this.archives = new ArchiveList();
      this.archiveDisplayer = new ListArchiveDisplayer();
      this.list.on("init", (function(_this) {
        return function() {
          if (_this.isShow) {
            return _this.show();
          }
        };
      })(this));
      this.list.on("select", (function(_this) {
        return function(list) {
          return _this.archives.load(list.archiveList);
        };
      })(this));
      this.archives.on("archive", (function(_this) {
        return function() {
          return _this.slideTo(1);
        };
      })(this));
      this.archives.on("select", (function(_this) {
        return function(archiveListItem) {
          _this.archiveDisplayer.display(archiveListItem.archive);
          if (_this.currentArchiveListItem) {
            _this.currentArchiveListItem.deselect();
          }
          _this.currentArchiveListItem = archiveListItem;
          _this.slideTo(2);
          return _this.enableArchiveAutoSlide = true;
        };
      })(this));
      ListView.__super__.constructor.call(this, $(".list-view")[0], "list view");
      checker = new SwipeChecker(this.node);
      checker.on("swiperight", (function(_this) {
        return function(ev) {
          return _this.previousSlide();
        };
      })(this));
      checker.on("swipeleft", (function(_this) {
        return function(ev) {
          return _this.nextSlide();
        };
      })(this));
      this.currentSlide = 0;
    }

    ListView.prototype.slideTo = function(count) {
      if (count < 0) {
        count = 0;
      }
      if (count > 2) {
        count = 2;
      }
      this.currentSlide = count;
      return this.applySlide();
    };

    ListView.prototype.nextSlide = function() {
      return this.slideTo(this.currentSlide + 1 || 2);
    };

    ListView.prototype.previousSlide = function() {
      if (this.currentSlide <= 0) {
        return;
      }
      return this.slideTo(this.currentSlide - 1 || 0);
    };

    ListView.prototype.applySlide = function() {
      if (this.currentSlide === 0) {
        return this.node$.removeClass("slide-col2").removeClass("slide-col3");
      } else if (this.currentSlide === 1) {
        return this.node$.addClass("slide-col2").removeClass("slide-col3");
      } else if (this.currentSlide === 2) {
        if (!this.archiveDisplayer.archive) {
          return;
        }
        return this.node$.addClass("slide-col2").addClass("slide-col3");
      }
    };

    ListView.prototype.show = function() {
      if (!this.list.current && this.list.lists.length > 0) {
        this.list.lists[0].select();
      }
      return ListView.__super__.show.call(this);
    };

    return ListView;

  })(View);

  List = (function(_super) {
    __extends(List, _super);

    function List() {
      List.__super__.constructor.call(this, App.templates["list-view-list"]);
      this.lists = Leaf.Widget.makeList(this.UI.container);
      App.initialLoad((function(_this) {
        return function() {
          return Model.ArchiveList.sync(function() {
            return _this.emit("init");
          });
        };
      })(this));
      App.modelSyncManager.on("archiveList/add", (function(_this) {
        return function(list) {
          return _this.lists.push(new ListItem(list));
        };
      })(this));
      this.lists.on("child/add", (function(_this) {
        return function(list) {
          return _this.bubble(list, "select", function() {
            if (this.current) {
              this.current.node$.removeClass("select");
            }
            this.current = list;
            return ["select", list];
          });
        };
      })(this));
    }

    List.prototype.onClickAddListButton = function() {
      var name;
      name = prompt("enter you list name");
      if (!name || !name.trim()) {
        return;
      }
      name = name.trim();
      return Model.ArchiveList.create(name, (function(_this) {
        return function(err, list) {
          console.debug("create list", err, list);
          if (err) {
            return App.showError(err);
          }
        };
      })(this));
    };

    return List;

  })(Leaf.Widget);

  ListItem = (function(_super) {
    __extends(ListItem, _super);

    function ListItem(archiveList) {
      this.archiveList = archiveList;
      this.onClickNode = __bind(this.onClickNode, this);
      ListItem.__super__.constructor.call(this, App.templates["list-view-list-item"]);
      this.archiveList.on("add", (function(_this) {
        return function(archive) {
          return _this.render();
        };
      })(this));
      this.archiveList.on("remove", (function(_this) {
        return function(archive) {
          return _this.render();
        };
      })(this));
      this.archiveList.on("change", (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      this.render();
    }

    ListItem.prototype.render = function() {
      this.UI.name$.text(this.archiveList.name);
      this.UI.unreadCounter$.text(this.archiveList.count);
      return this.name = this.archiveList.name;
    };

    ListItem.prototype.select = function() {
      this.emit("select", this);
      return this.node$.addClass("select");
    };

    ListItem.prototype.onClickNode = function() {
      return this.select();
    };

    return ListItem;

  })(Leaf.Widget);

  ArchiveList = (function(_super) {
    __extends(ArchiveList, _super);

    function ArchiveList() {
      ArchiveList.__super__.constructor.call(this, App.templates["list-view-archive-list"]);
      this.on("child/add", (function(_this) {
        return function(archiveListItem) {
          archiveListItem.listName = _this.currentList.name;
          return archiveListItem.listenBy(_this, "select", function() {
            return _this.emit("select", archiveListItem);
          });
        };
      })(this));
      this.on("child/remove", (function(_this) {
        return function(item) {};
      })(this));
      this.scrollChecker = new ScrollChecker(this.node);
      this.scrollChecker.on("scrollBottom", (function(_this) {
        return function() {
          return _this.more();
        };
      })(this));
    }

    ArchiveList.prototype.load = function(list) {
      if (this.currentList) {
        this.currentList.stopListenBy(this);
      }
      this.currentList = list;
      this.currentList.listenBy(this, "add", this.prependArchive);
      this.currentList.listenBy(this, "remove", this.removeArchive);
      this.length = 0;
      this.noMore = false;
      return this.more();
    };

    ArchiveList.prototype.more = function() {
      var list, loadCount;
      if (this.noMore) {
        return;
      }
      loadCount = 20;
      this.currentList.getArchives({
        offset: this.length,
        count: loadCount
      }, (function(_this) {
        return function(err, archives) {
          var archive, _i, _len;
          for (_i = 0, _len = archives.length; _i < _len; _i++) {
            archive = archives[_i];
            _this.push(new ArchiveListItem(archive));
          }
          if (archives.length !== loadCount) {
            return _this.noMore = true;
          }
        };
      })(this));
      return list = this.currentList;
    };

    ArchiveList.prototype.prependArchive = function(archive) {
      var item, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        if (item.archive.guid === archive.guid) {
          if (item.isDone) {
            item.isDone = false;
            item.render();
          }
          return;
        }
      }
      this.emit("archive");
      return this.unshift(new ArchiveListItem(archive));
    };

    ArchiveList.prototype.removeArchive = function(archive) {
      var index, item, _i, _len;
      for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
        item = this[index];
        if (item.archive.guid === archive.guid) {
          if (!item.isDone) {
            item.isDone = true;
            item.render();
            return;
          }
        }
      }
    };

    ArchiveList.prototype.onClickMoreButton = function() {
      return this.more();
    };

    return ArchiveList;

  })(Leaf.Widget.List);

  ArchiveListItem = (function(_super) {
    __extends(ArchiveListItem, _super);

    function ArchiveListItem(archive) {
      this.archive = archive;
      ArchiveListItem.__super__.constructor.call(this, App.templates["list-view-archive-list-item"]);
      this.render();
      this.isDone = false;
      this.use(this.archive);
    }

    ArchiveListItem.prototype.onClickNode = function() {
      return this.select();
    };

    ArchiveListItem.prototype.select = function() {
      this.emit("select", this);
      return this.node$.addClass("select");
    };

    ArchiveListItem.prototype.deselect = function() {
      return this.node$.removeClass("select");
    };

    ArchiveListItem.prototype.render = function() {
      this.UI.title$.text(this.archive.title);
      this.UI.content$.text(this.genPreview(this.archive.content));
      this.UI.date$.text(moment(this.archive.createDate).format("YYYY-MM-DD"));
      if (!this.isDone) {
        return this.node$.removeClass("clear");
      } else {
        return this.node$.addClass("clear");
      }
    };

    ArchiveListItem.prototype.markAsDone = function() {
      if (this.isDone) {
        return;
      }
      return this.archive.changeList(null, (function(_this) {
        return function(err) {
          _this.isDone = true;
          return _this.render();
        };
      })(this));
    };

    ArchiveListItem.prototype.markAsUndone = function() {
      if (!this.isDone) {
        return;
      }
      return this.archive.changeList(this.listName, (function(_this) {
        return function(err) {
          _this.isDone = false;
          return _this.render();
        };
      })(this));
    };

    ArchiveListItem.prototype.onClickDone = function(e) {
      if (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      if (this.isDone) {
        return this.markAsUndone();
      } else {
        return this.markAsDone();
      }
    };

    ArchiveListItem.prototype.genPreview = function(content) {
      var container, result;
      container = document.createElement("div");
      container.innerHTML = content;
      result = $(container).text().trim().substring(0, 80);
      if (result.length === 80) {
        result += "...";
      } else if (result.length === 0) {
        result = "( empty )";
      }
      return result;
    };

    return ArchiveListItem;

  })(Leaf.Widget);

  ListArchiveDisplayer = (function(_super) {
    __extends(ListArchiveDisplayer, _super);

    function ListArchiveDisplayer() {
      ListArchiveDisplayer.__super__.constructor.call(this, App.templates["archive-displayer"]);
      this.node$.addClass("no-article");
    }

    ListArchiveDisplayer.prototype.display = function(archive) {
      this.node$.removeClass("no-article");
      this.setArchive(archive);
      this.node.scrollTop = 0;
      return this.render();
    };

    return ListArchiveDisplayer;

  })(ArchiveDisplayer);

  module.exports = ListView;

}).call(this);
