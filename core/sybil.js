// Generated by CoffeeScript 1.6.3
(function() {
  var Sybil, sybil,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Sybil = (function(_super) {
    var Database;

    __extends(Sybil, _super);

    Database = require("./db.coffee");

    function Sybil() {
      this.pluginCenter = new (require("./pluginCenter")).PluginCenter(this);
      this.pluginCenter.addPlugin("webApi", "externalProxy");
      this.archiveProcessQueue = (require("async")).queue(this.handleArchive.bind(this), 1);
      this.initTasks = new (require("node-tasks"))("dbInit", "collectorInit", "initHooks");
      this.hookCenter = new (require("./hook.coffee")).HookCenter();
    }

    Sybil.prototype.init = function() {
      var Collector, collectors, name, _i, _len,
        _this = this;
      this.settings = require("../settings.coffee");
      collectors = this.settings.collectors;
      Collector = require("../collector/collector.coffee");
      this.collectorClub = new Collector.CollectorClub();
      for (_i = 0, _len = collectors.length; _i < _len; _i++) {
        name = collectors[_i];
        this.collectorClub.addAndStart(name);
      }
      this.collectorClub.on("archive", function(archive) {
        console.log("archive", archive.guid);
        return _this.archiveProcessQueue.push(archive);
      });
      this.collectorClub.once("ready", function() {
        return _this.initTasks.done("collectorInit");
      });
      this.hookCenter.loadHooks(function(err) {
        return _this.initTasks.done("initHooks");
      });
      Database.on("ready", function() {
        return _this.initTasks.done("dbInit");
      });
      return this.initTasks.on("done", function() {
        return _this.emit("init");
      });
    };

    Sybil.prototype.handleArchive = function(archive, done) {
      var _this = this;
      if (!Database.ready) {
        console.error("Fatal, can't handle archive when database is not ready");
        setTimeout((function() {
          _this.archiveProcessQueue.push(archive);
          return done();
        }), 1000);
        return false;
      }
      return Database.saveArchive(archive, function(err, saved) {
        if (err && err !== "duplicate") {
          console.error("db error", err, "fail to save archive", archive.guid);
          done();
          return;
        } else if (err && err === "duplicate") {
          console.log("duplicated archive");
          done();
          return;
        }
        _this.emit("archive", archive);
        return done();
      });
    };

    Sybil.prototype.getConfig = function(name, callback) {
      return Database.getConfig(name, function(err, config) {
        return callback(err, config);
      });
    };

    Sybil.prototype.saveConfig = function(config, callback) {
      if (!config || !config.name) {
        callback("invalid config");
        return;
      }
      return Database.saveConfig(config, function(err) {
        return callback(err);
      });
    };

    Sybil.prototype.getSource = function(guid, callback) {
      return Database.getSource(guid, function(err, source) {
        return callback(err, source);
      });
    };

    Sybil.prototype.getSources = function(callback) {
      return Database.getSources(function(err, sources) {
        return callback(err, sources);
      });
    };

    Sybil.prototype.getSourceArchives = function(guid, callback) {
      return Database.getSourceArchives(guid, function(err, archives) {
        return callback(err, archives);
      });
    };

    Sybil.prototype.getTagArchives = function(name, callback) {
      return Database.getTagArchives(name, function(err, archives) {
        return callback(err, archives);
      });
    };

    Sybil.prototype.getSourceHint = function(uri, callback) {
      return this.collectorClub.testURI(uri, function(err, available) {
        return callback(err, available);
      });
    };

    Sybil.prototype.likeArchive = function(guid, callback) {
      return Database.likeArchive(guid, function(err, archive) {
        return callback(err, archive);
      });
    };

    Sybil.prototype.unlikeArchive = function(guid, callback) {
      return Database.unlikeArchive(guid, function(err, archive) {
        return callback(err, archive);
      });
    };

    Sybil.prototype.markArchiveAsRead = function(guid, callback) {
      return Database.markArchiveAsRead(guid, function(err, archive) {
        return callback(err, archive);
      });
    };

    Sybil.prototype.markArchiveAsUnread = function(guid, callback) {
      return Database.markArchiveAsUnread(guid, function(err, archive) {
        return callback(err, archive);
      });
    };

    Sybil.prototype.addTagToSource = function(guid, tag, callback) {
      return Database.addTagToSource(guid, tag, function(err, item) {
        return callback(err, item);
      });
    };

    Sybil.prototype.removeTagFromSource = function(guid, tag, callback) {
      return Database.removeTagFromSource(guid, tag, function(err, item) {
        return callback(err, item);
      });
    };

    Sybil.prototype.readLaterArchive = function(guid, callback) {
      var _this = this;
      return Database.readLaterArchive(guid, function(err, archive) {
        _this.hookCenter.emit("hook/readLater", archive);
        return callback(err, archive);
      });
    };

    Sybil.prototype.unreadLaterArchive = function(guid, callback) {
      return Database.unreadLaterArchive(guid, function(err, archive) {
        return callback(err, archive);
      });
    };

    Sybil.prototype.getReadLaterArchives = function(callback) {
      return Database.getReadLaterArchives(function(err, archives) {
        return callback(err, archives);
      });
    };

    Sybil.prototype.getCustomArchives = function(query, callback) {
      return Database.getCustomArchives(query, function(err, archives) {
        return callback(err, archives);
      });
    };

    Sybil.prototype.subscribe = function(source, callback) {
      var _this = this;
      return this.collectorClub.subscribe(source.uri, source.name, function(err, source) {
        if (err && err !== "duplicated") {
          callback(err);
          return;
        }
        if (source) {
          source = source.toJSON();
          return Database.saveSource(source, function(err, source) {
            callback(err, source);
            console.log("push", source);
            return _this.emit("source", source);
          });
        } else {
          return callback("programmer error");
        }
      });
    };

    Sybil.prototype.unsubscribe = function(guid, callback) {
      var _this = this;
      return this.collectorClub.unsubscribe(guid, function(err) {
        return Database.removeSource(guid, callback);
      });
    };

    Sybil.prototype.getCustomWorkspaces = function(callback) {
      return Database.getCustomWorkspaces(function(err, workspaces) {
        return callback(err, workspaces);
      });
    };

    Sybil.prototype.saveCustomWorkspace = function(name, data, callback) {
      return Database.saveCustomWorkspace(name, data, function(err) {
        return callback(err);
      });
    };

    return Sybil;

  })((require("events")).EventEmitter);

  sybil = new Sybil();

  sybil.init();

  sybil.on("init", function() {
    var Database;
    Database = require("./db.coffee");
    return Database.updateUnreadCount(function(err) {
      var sources,
        _this = this;
      if (err) {
        console.error(err);
        return;
      }
      console.log("sync unread count");
      sources = sybil.collectorClub.getSources();
      return Database.getSources(function(err, dbSources) {
        console.log("sync db with collectors");
        if (err) {
          throw err;
        }
        return (require("async")).each(dbSources, (function(dbSource, done) {
          var source, _i, _len;
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            source = sources[_i];
            if (source.guid === dbSource.guid) {
              done();
              return;
            }
          }
          return sybil.collectorClub.subscribe(dbSource.uri, dbSource.collectorName, function(err) {
            if (err) {
              console.log("fail to sync source", dbSource);
            }
            return done();
          });
        }), function(err) {
          return sybil.emit("ready");
        });
      });
    });
  });

  process.title = "sybil";

  process.on("uncaughtException", function(err) {
    console.error(err);
    return console.error(err.stack);
  });

}).call(this);
